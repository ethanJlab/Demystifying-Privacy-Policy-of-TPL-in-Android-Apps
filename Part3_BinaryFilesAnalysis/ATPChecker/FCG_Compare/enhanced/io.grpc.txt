FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newAttachHeadersInterceptor(io.grpc.Metadata)>(r2) in <io.grpc.stub.MetadataUtils: io.grpc.stub.AbstractStub attachHeaders(io.grpc.stub.AbstractStub,io.grpc.Metadata)> ==> <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newAttachHeadersInterceptor(io.grpc.Metadata)>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newCaptureMetadataInterceptor(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>(r2, r3) in <io.grpc.stub.MetadataUtils: io.grpc.stub.AbstractStub captureMetadata(io.grpc.stub.AbstractStub,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)> ==> <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newCaptureMetadataInterceptor(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: io.grpc.Metadata access$000(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor)>($r2) in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: io.grpc.Metadata access$000(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor)>
STATIC edge: $r3 = staticinvoke <io.grpc.ClientInterceptors: io.grpc.Channel intercept(io.grpc.Channel,io.grpc.ClientInterceptor[])>($r2, r1) in <io.grpc.stub.AbstractStub: io.grpc.stub.AbstractStub withInterceptors(io.grpc.ClientInterceptor[])> ==> <io.grpc.ClientInterceptors: io.grpc.Channel intercept(io.grpc.Channel,io.grpc.ClientInterceptor[])>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>(r0, r1, r2, 0) in <io.grpc.stub.ClientCalls: void asyncUnaryCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>(r0, r1, r2, 0) in <io.grpc.stub.ClientCalls: void asyncUnaryCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>(r0, r1, r2, 1) in <io.grpc.stub.ClientCalls: void asyncServerStreamingCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>(r0, r1, r2, 1) in <io.grpc.stub.ClientCalls: void asyncServerStreamingCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)>
CLINIT edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>(r0, r1, 0) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncClientStreamingCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>(r0, r1, 0) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncClientStreamingCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>
CLINIT edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>(r0, r1, 1) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncBidiStreamingCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>(r0, r1, 1) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncBidiStreamingCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>
CLINIT edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>(r0, r1) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r4) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: $r7 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r6) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)>($r10) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>(r0, r1) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>
CLINIT edge: $r5 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r4) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r6) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: $r22 = new io.grpc.stub.ClientCalls$ThreadlessExecutor in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r13 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r6, $r12) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: $r15 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r6, $r14) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r19 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)>($r23) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)>
STATIC edge: r17 = staticinvoke <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>(r6, r7) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>
CLINIT edge: $r13 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r6, $r12) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r6, $r14) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: r19 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)>($r23) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: r17 = staticinvoke <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)>(r6, r7) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r1, r3, $r4, 1) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r1, r3, $r4, 1) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: $r0 = new io.grpc.stub.ClientCalls$ThreadlessExecutor in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r6, r9, $r10, 1) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r6, r9, $r10, 1) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r1, r3, $r6, 0) in <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r1, r3, $r6, 0) in <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()>
STATIC edge: staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()>
CLINIT edge: $r8 = <java.util.logging.Level: java.util.logging.Level WARNING> in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r9 = <io.grpc.stub.ClientCalls$ThreadlessExecutor: java.util.logging.Logger log> in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()>
STATIC edge: staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r2) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void execute(java.lang.Runnable)> ==> <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Stream was terminated by error, no further calls are allowed") in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "Stream is already completed, no further calls are allowed") in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean access$100(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r3) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean access$100(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onReady()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r3) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onReady()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "ClientCall already closed") in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onMessage(java.lang.Object)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>($r1) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "ClientCall already closed") in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>($r2) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>
STATIC edge: $r7 = staticinvoke <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>($r6) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "asyncUnaryRequestCall is only for clientSendsOneMessage methods") in <io.grpc.stub.ServerCalls$UnaryServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod)>(r0) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryCall(io.grpc.stub.ServerCalls$UnaryMethod)> ==> <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod)>
STATIC edge: $r1 = staticinvoke <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod)>(r0) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncServerStreamingCall(io.grpc.stub.ServerCalls$ServerStreamingMethod)> ==> <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod)>
STATIC edge: $r1 = staticinvoke <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncStreamingRequestCall(io.grpc.stub.ServerCalls$StreamingRequestMethod)>(r0) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncClientStreamingCall(io.grpc.stub.ServerCalls$ClientStreamingMethod)> ==> <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncStreamingRequestCall(io.grpc.stub.ServerCalls$StreamingRequestMethod)>
STATIC edge: $r1 = staticinvoke <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncStreamingRequestCall(io.grpc.stub.ServerCalls$StreamingRequestMethod)>(r0) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncBidiStreamingCall(io.grpc.stub.ServerCalls$BidiStreamingMethod)> ==> <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncStreamingRequestCall(io.grpc.stub.ServerCalls$StreamingRequestMethod)>
CLINIT edge: $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method %s is unimplemented", $r4) in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method %s is unimplemented", $r4) in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "responseObserver") in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "methodDescriptor") in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)>(r0, r1) in <io.grpc.stub.ServerCalls: io.grpc.stub.StreamObserver asyncUnimplementedStreamingCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "Stream was terminated by error, no further calls are allowed") in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z5, "Stream is already completed, no further calls are allowed") in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: r5 = staticinvoke <io.grpc.Status: io.grpc.Metadata trailersFromThrowable(java.lang.Throwable)>(r0) in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)> ==> <io.grpc.Status: io.grpc.Metadata trailersFromThrowable(java.lang.Throwable)>
STATIC edge: $r3 = staticinvoke <io.grpc.Status: io.grpc.Status fromThrowable(java.lang.Throwable)>(r0) in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)> ==> <io.grpc.Status: io.grpc.Status fromThrowable(java.lang.Throwable)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Cannot alter onReadyHandler after initialization") in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void setOnReadyHandler(java.lang.Runnable)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Cannot alter onCancelHandler after initialization") in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void setOnCancelHandler(java.lang.Runnable)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Cannot disable auto flow control after initialization") in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void disableAutoInboundFlowControl()> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.ServerCalls$UnaryServerCallHandler: io.grpc.stub.ServerCalls$UnaryRequestMethod access$000(io.grpc.stub.ServerCalls$UnaryServerCallHandler)>($r2) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ServerCalls$UnaryServerCallHandler: io.grpc.stub.ServerCalls$UnaryRequestMethod access$000(io.grpc.stub.ServerCalls$UnaryServerCallHandler)>
STATIC edge: staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r6) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r2) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r5 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r4) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r1) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r3) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r0) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $z0 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: boolean access$400(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r0) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: boolean access$400(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $z0 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: boolean access$400(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r3) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: boolean access$400(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r3 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r2) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r9 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r8) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r2 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onReady()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>($r3) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onReady()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "source") in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "target") in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "source") in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.lang.Iterable,io.grpc.stub.CallStreamObserver)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)>($r2, r3) in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.lang.Iterable,io.grpc.stub.CallStreamObserver)> ==> <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)>
CLINIT edge: <io.grpc.stub.ClientCalls: boolean $assertionsDisabled> = $z1 in <io.grpc.stub.ClientCalls: void <clinit>()> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <io.grpc.stub.ClientCalls: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <io.grpc.stub.ClientCalls: void <clinit>()> ==> <java.util.logging.Logger: void <clinit>()>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r0, r1, $r2, z0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>(r0, r1, $r2, z0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>(r1, $r3, z0) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>(r1, $r3, z0) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: $z1 = <io.grpc.stub.ClientCalls: boolean $assertionsDisabled> in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)>($r3) in <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)>($r3) in <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)> ==> <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)>
STATIC edge: $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()> ==> <java.util.logging.Logger: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
CLINIT edge: <io.grpc.stub.ClientCalls$ThreadlessExecutor: java.util.logging.Logger log> = $r2 in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()>
CLINIT edge: staticinvoke <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>(r0, r1, z0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r3) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: $r6 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r5) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>(r0, r1, z0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)>
CLINIT edge: $r4 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r3) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)>(r0, $r5) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.stub.ClientCalls: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()> ==> <java.lang.Thread: boolean interrupted()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "t") in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall: void <init>(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor,io.grpc.ClientCall)>(r1, $r5) in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: io.grpc.ClientCall interceptCall(io.grpc.MethodDescriptor,io.grpc.CallOptions,io.grpc.Channel)> ==> <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall: void <init>(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor,io.grpc.ClientCall)>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: void <init>(io.grpc.Metadata)>(r1) in <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newAttachHeadersInterceptor(io.grpc.Metadata)> ==> <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: void <init>(io.grpc.Metadata)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "extraHeaders") in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: void <init>(io.grpc.Metadata)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>(r1, r2) in <io.grpc.stub.MetadataUtils: io.grpc.ClientInterceptor newCaptureMetadataInterceptor(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)> ==> <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "headersCapture") in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "trailersCapture") in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r1.<io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)>(r4, r0) in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)>
SPECIAL edge: specialinvoke $r6.<io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor,io.grpc.ClientCall)>(r1, $r5) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: io.grpc.ClientCall interceptCall(io.grpc.MethodDescriptor,io.grpc.CallOptions,io.grpc.Channel)> ==> <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor,io.grpc.ClientCall)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall,io.grpc.ClientCall$Listener)>(r0, r6) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall,io.grpc.ClientCall$Listener)>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)>($r9, r7) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)> ==> <io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)>
VIRTUAL edge: virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void onHeaders(io.grpc.Metadata)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void onHeaders(io.grpc.Metadata)>(r3) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void onHeaders(io.grpc.Metadata)> ==> <io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void onHeaders(io.grpc.Metadata)>
VIRTUAL edge: virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void onClose(io.grpc.Status,io.grpc.Metadata)>(r5, r3) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void onClose(io.grpc.Status,io.grpc.Metadata)>
SPECIAL edge: specialinvoke $r22.<io.grpc.stub.ClientCalls$ThreadlessExecutor: void <init>()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <init>()>
VIRTUAL edge: virtualinvoke $r22.<io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()>
INTERFACE edge: $z1 = interfaceinvoke r17.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <com.google.common.util.concurrent.ListenableFuture: boolean isDone()>
VIRTUAL edge: virtualinvoke r6.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>("Thread interrupted", $r16) in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: virtualinvoke $r11.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls: java.lang.Object blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall)>(r1) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<io.grpc.stub.ClientCalls$BlockingResponseStream: io.grpc.ClientCall$Listener listener()>() in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: io.grpc.ClientCall$Listener listener()>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ClientCalls$ThreadlessExecutor: void <init>()>() in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <init>()>
SPECIAL edge: specialinvoke $r7.<io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)>(r6, $r0) in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)>
VIRTUAL edge: $r10 = virtualinvoke $r7.<io.grpc.stub.ClientCalls$BlockingResponseStream: io.grpc.ClientCall$Listener listener()>() in <io.grpc.stub.ClientCalls: java.util.Iterator blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: io.grpc.ClientCall$Listener listener()>
SPECIAL edge: specialinvoke $r5.<io.grpc.stub.ClientCalls$GrpcFuture: void <init>(io.grpc.ClientCall)>(r1) in <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$GrpcFuture: void <init>(io.grpc.ClientCall)>
SPECIAL edge: specialinvoke $r6.<io.grpc.stub.ClientCalls$UnaryStreamToFuture: void <init>(io.grpc.stub.ClientCalls$GrpcFuture)>($r5) in <io.grpc.stub.ClientCalls: com.google.common.util.concurrent.ListenableFuture futureUnaryCall(io.grpc.ClientCall,java.lang.Object)> ==> <io.grpc.stub.ClientCalls$UnaryStreamToFuture: void <init>(io.grpc.stub.ClientCalls$GrpcFuture)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.grpc.stub.ClientCalls$ThreadlessExecutor: java.lang.Object poll()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
VIRTUAL edge: $r5 = virtualinvoke r0.<io.grpc.stub.ClientCalls$ThreadlessExecutor: java.lang.Object poll()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.grpc.stub.ClientCalls$ThreadlessExecutor: java.lang.Object poll()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
INTERFACE edge: interfaceinvoke r11.<java.lang.Runnable: void run()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke r11.<java.lang.Runnable: void run()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, "Runnable threw exception", $r7) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()> ==> <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<io.grpc.stub.ClientCalls$ThreadlessExecutor: boolean add(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void execute(java.lang.Runnable)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<io.grpc.ClientCall: void sendMessage(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)> ==> <io.grpc.ClientCall: void sendMessage(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>("Cancelled by client with StreamObserver.onError()", r1) in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onError(java.lang.Throwable)> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r1.<io.grpc.ClientCall: void halfClose()>() in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onCompleted()> ==> <io.grpc.ClientCall: void halfClose()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot alter onReadyHandler after call started") in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void setOnReadyHandler(java.lang.Runnable)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot disable auto flow control call started") in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void disableAutoInboundFlowControl()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<io.grpc.ClientCall: void request(int)>(i0) in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void request(int)> ==> <io.grpc.ClientCall: void request(int)>
VIRTUAL edge: virtualinvoke $r3.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>(r1, r2) in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void cancel(java.lang.String,java.lang.Throwable)> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $r9 = specialinvoke r0.<io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: boolean hasNext()> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()>
STATIC edge: $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.grpc.stub.ClientCalls$BlockingResponseStream: boolean hasNext()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object next()> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: boolean hasNext()>
SPECIAL edge: specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<io.grpc.ClientCall: void request(int)>(1) in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object next()> ==> <io.grpc.ClientCall: void request(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: void remove()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onNext(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void request(int)>(1) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void request(int)>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onCompleted()>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onCompleted()>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onCompleted()>
INTERFACE edge: interfaceinvoke $r3.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r6) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r6) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r6) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onReady()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void onReady()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r9.<io.grpc.stub.ClientCalls$GrpcFuture: boolean setException(java.lang.Throwable)>($r12) in <io.grpc.stub.ClientCalls$UnaryStreamToFuture: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$GrpcFuture: boolean setException(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r7.<io.grpc.stub.ClientCalls$GrpcFuture: boolean set(java.lang.Object)>($r6) in <io.grpc.stub.ClientCalls$UnaryStreamToFuture: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$GrpcFuture: boolean set(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<io.grpc.stub.ClientCalls$GrpcFuture: boolean setException(java.lang.Throwable)>($r13) in <io.grpc.stub.ClientCalls$UnaryStreamToFuture: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <io.grpc.stub.ClientCalls$GrpcFuture: boolean setException(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.CallStreamObserver: void <init>()>() in <io.grpc.stub.ClientCallStreamObserver: void <init>()> ==> <io.grpc.stub.CallStreamObserver: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(r3) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onMessage(java.lang.Object)> ==> <java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>($r8) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>($r5) in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void onClose(io.grpc.Status,io.grpc.Metadata)> ==> <java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.CallStreamObserver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void <init>(io.grpc.ServerCall)>(r0) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void <init>(io.grpc.ServerCall)>
SPECIAL edge: specialinvoke $r5.<io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void <init>(io.grpc.stub.ServerCalls$UnaryServerCallHandler,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)>(r6, $r3, r0) in <io.grpc.stub.ServerCalls$UnaryServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void <init>(io.grpc.stub.ServerCalls$UnaryServerCallHandler,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)>
INTERFACE edge: interfaceinvoke r2.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r2.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r2.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls: void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onError(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<io.grpc.stub.ServerCalls$NoopStreamObserver: void <init>()>() in <io.grpc.stub.ServerCalls: io.grpc.stub.StreamObserver asyncUnimplementedStreamingCall(io.grpc.MethodDescriptor,io.grpc.stub.StreamObserver)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void <init>()>
SPECIAL edge: specialinvoke $r9.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)> ==> <io.grpc.Metadata: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)> ==> <io.grpc.Metadata: void <init>()>
SPECIAL edge: specialinvoke $r8.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onCompleted()> ==> <io.grpc.Metadata: void <init>()>
SPECIAL edge: specialinvoke $r6.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onMessage(java.lang.Object)> ==> <io.grpc.Metadata: void <init>()>
SPECIAL edge: specialinvoke $r10.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onHalfClose()> ==> <io.grpc.Metadata: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()>
INTERFACE edge: interfaceinvoke $r5.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onCancel()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke $r5.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onCancel()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void onReady()> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void <init>(io.grpc.ServerCall)>(r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void <init>(io.grpc.ServerCall)>
SPECIAL edge: specialinvoke $r6.<io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void <init>(io.grpc.stub.ServerCalls$StreamingServerCallHandler,io.grpc.stub.StreamObserver,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)>(r3, r5, $r0, r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler: io.grpc.ServerCall$Listener startCall(io.grpc.ServerCall,io.grpc.Metadata)> ==> <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void <init>(io.grpc.stub.ServerCalls$StreamingServerCallHandler,io.grpc.stub.StreamObserver,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.CallStreamObserver: void <init>()>() in <io.grpc.stub.ServerCallStreamObserver: void <init>()> ==> <io.grpc.stub.CallStreamObserver: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onNext(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>(r1) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onMessage(java.lang.Object)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onCompleted()>
INTERFACE edge: interfaceinvoke $r1.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onCompleted()>
INTERFACE edge: interfaceinvoke $r1.<io.grpc.stub.StreamObserver: void onCompleted()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onHalfClose()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onCompleted()>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$NoopStreamObserver: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r5.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r10) in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onCancel()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onError(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onReady()> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void onReady()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<io.grpc.stub.CallStreamObserver: boolean isReady()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean isReady()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<io.grpc.stub.CallStreamObserver: boolean isReady()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: boolean isReady()>
INTERFACE edge: $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r6.<io.grpc.stub.CallStreamObserver: void onNext(java.lang.Object)>($r7) in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onNext(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<io.grpc.stub.CallStreamObserver: void onNext(java.lang.Object)>($r7) in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onNext(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<io.grpc.stub.CallStreamObserver: void onCompleted()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void onCompleted()>
VIRTUAL edge: virtualinvoke $r3.<io.grpc.stub.CallStreamObserver: void onCompleted()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void run()> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void onCompleted()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.StreamObservers: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void <init>(io.grpc.stub.CallStreamObserver,java.util.Iterator)>(r2, r0) in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)> ==> <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void <init>(io.grpc.stub.CallStreamObserver,java.util.Iterator)>
VIRTUAL edge: virtualinvoke r2.<io.grpc.stub.CallStreamObserver: void setOnReadyHandler(java.lang.Runnable)>($r4) in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void setOnReadyHandler(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke r2.<io.grpc.stub.CallStreamObserver: void setOnReadyHandler(java.lang.Runnable)>($r4) in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void setOnReadyHandler(java.lang.Runnable)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.lang.Iterable,io.grpc.stub.CallStreamObserver)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.grpc.stub.StreamObservers: void copyWithFlowControl(java.lang.Iterable,io.grpc.stub.CallStreamObserver)> ==> <java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <io.grpc.stub.ClientCalls: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <io.grpc.stub.ClientCalls: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r4.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall)>(r0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall)>
SPECIAL edge: specialinvoke $r2.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)>(r3, $r4, z0) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)>
STATIC edge: staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void access$000(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>(r2) in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void access$000(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall)>(r1) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall)>
SPECIAL edge: specialinvoke $r3.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)>(r4, $r0, z0) in <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)> ==> <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)>
VIRTUAL edge: virtualinvoke r0.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>(null, r1) in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, "RuntimeException encountered while closing call", $r5) in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls: java.lang.RuntimeException cancelThrow(io.grpc.ClientCall,java.lang.Throwable)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>() in <io.grpc.stub.ClientCalls: java.lang.Object getUnchecked(java.util.concurrent.Future)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke r0.<io.grpc.ClientCall: void sendMessage(java.lang.Object)>(r2) in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.ClientCall: void sendMessage(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.grpc.ClientCall: void halfClose()>() in <io.grpc.stub.ClientCalls: void asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.ClientCall: void halfClose()>
SPECIAL edge: specialinvoke $r0.<java.lang.InterruptedException: void <init>()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void throwIfInterrupted()> ==> <java.lang.InterruptedException: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ServerCalls$UnaryServerCallHandler: void <init>(io.grpc.stub.ServerCalls$UnaryRequestMethod)>(r1) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod)> ==> <io.grpc.stub.ServerCalls$UnaryServerCallHandler: void <init>(io.grpc.stub.ServerCalls$UnaryRequestMethod)>
SPECIAL edge: specialinvoke $r0.<io.grpc.stub.ServerCalls$StreamingServerCallHandler: void <init>(io.grpc.stub.ServerCalls$StreamingRequestMethod)>(r1) in <io.grpc.stub.ServerCalls: io.grpc.ServerCallHandler asyncStreamingRequestCall(io.grpc.stub.ServerCalls$StreamingRequestMethod)> ==> <io.grpc.stub.ServerCalls$StreamingServerCallHandler: void <init>(io.grpc.stub.ServerCalls$StreamingRequestMethod)>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void freeze()>() in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl)> ==> <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void freeze()>
SPECIAL edge: specialinvoke $r2.<io.grpc.Metadata: void <init>()>() in <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.Metadata: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.grpc.ClientCall: void request(int)>(1) in <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.ClientCall: void request(int)>
VIRTUAL edge: virtualinvoke r0.<io.grpc.ClientCall: void request(int)>(2) in <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)> ==> <io.grpc.ClientCall: void request(int)>
SPECIAL edge: specialinvoke $r9.<io.grpc.StatusRuntimeException: void <init>(io.grpc.Status,io.grpc.Metadata)>($r10, $r11) in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <io.grpc.StatusRuntimeException: void <init>(io.grpc.Status,io.grpc.Metadata)>
SPECIAL edge: specialinvoke $r6.<io.grpc.StatusRuntimeException: void <init>(io.grpc.Status,io.grpc.Metadata)>($r7, $r8) in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <io.grpc.StatusRuntimeException: void <init>(io.grpc.Status,io.grpc.Metadata)>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.grpc.stub.ClientCalls: io.grpc.StatusRuntimeException toStatusRuntimeException(java.lang.Throwable)> ==> <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void <init>(io.grpc.ClientCall)>(r2) in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall: void <init>(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor,io.grpc.ClientCall)> ==> <io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void <init>(io.grpc.ClientCall)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor: void <init>(io.grpc.Metadata)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void <init>(io.grpc.ClientCall)>(r2) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor,io.grpc.ClientCall)> ==> <io.grpc.ForwardingClientCall$SimpleForwardingClientCall: void <init>(io.grpc.ClientCall)>
SPECIAL edge: specialinvoke r0.<io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void <init>(io.grpc.ClientCall$Listener)>(r2) in <io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener: void <init>(io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall,io.grpc.ClientCall$Listener)> ==> <io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener: void <init>(io.grpc.ClientCall$Listener)>
SPECIAL edge: specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>() in <io.grpc.stub.ClientCalls$ThreadlessExecutor: void <init>()> ==> <java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)>(r1, null) in <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(2) in <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)> ==> <java.util.concurrent.ArrayBlockingQueue: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void <init>(io.grpc.stub.ClientCalls$BlockingResponseStream)>(r0) in <io.grpc.stub.ClientCalls$BlockingResponseStream: void <init>(io.grpc.ClientCall,io.grpc.stub.ClientCalls$ThreadlessExecutor)> ==> <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void <init>(io.grpc.stub.ClientCalls$BlockingResponseStream)>
SPECIAL edge: specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void <init>()>() in <io.grpc.stub.ClientCalls$GrpcFuture: void <init>(io.grpc.ClientCall)> ==> <com.google.common.util.concurrent.AbstractFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ClientCall$Listener: void <init>()>() in <io.grpc.stub.ClientCalls$UnaryStreamToFuture: void <init>(io.grpc.stub.ClientCalls$GrpcFuture)> ==> <io.grpc.ClientCall$Listener: void <init>()>
INTERFACE edge: r13 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object take()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.util.concurrent.ArrayBlockingQueue: java.lang.Object take()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: virtualinvoke $r12.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>("Thread interrupted", $r11) in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
INTERFACE edge: $r16 = interfaceinvoke $r15.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll()>
INTERFACE edge: $r16 = interfaceinvoke $r15.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.util.concurrent.BlockingQueue: java.lang.Object poll()>
VIRTUAL edge: virtualinvoke $r3.<io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <io.grpc.stub.ClientCalls$ThreadlessExecutor: void waitAndDrain()>
VIRTUAL edge: virtualinvoke $r10.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>("Thread interrupted", $r9) in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Thread: void interrupt()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream: java.lang.Object waitForNext()> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: $z0 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>(r1) in <io.grpc.stub.ClientCalls$GrpcFuture: boolean setException(java.lang.Throwable)> ==> <com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>
SPECIAL edge: $z0 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>(r1) in <io.grpc.stub.ClientCalls$GrpcFuture: boolean set(java.lang.Object)> ==> <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.ServerCallStreamObserver: void <init>()>() in <io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl: void <init>(io.grpc.ServerCall)> ==> <io.grpc.stub.ServerCallStreamObserver: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ServerCall$Listener: void <init>()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener: void <init>(io.grpc.stub.ServerCalls$UnaryServerCallHandler,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)> ==> <io.grpc.ServerCall$Listener: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.ServerCalls$NoopStreamObserver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ServerCall$Listener: void <init>()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener: void <init>(io.grpc.stub.ServerCalls$StreamingServerCallHandler,io.grpc.stub.StreamObserver,io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl,io.grpc.ServerCall)> ==> <io.grpc.ServerCall$Listener: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler: void <init>(io.grpc.stub.CallStreamObserver,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.ClientCallStreamObserver: void <init>()>() in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall)> ==> <io.grpc.stub.ClientCallStreamObserver: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ClientCall$Listener: void <init>()>() in <io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter,boolean)> ==> <io.grpc.ClientCall$Listener: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void freeze()>() in <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void access$000(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)> ==> <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void freeze()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.ServerCalls$UnaryServerCallHandler: void <init>(io.grpc.stub.ServerCalls$UnaryRequestMethod)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.grpc.stub.ServerCalls$StreamingServerCallHandler: void <init>(io.grpc.stub.ServerCalls$StreamingRequestMethod)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.grpc.ClientCall$Listener: void <init>()>() in <io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener: void <init>(io.grpc.stub.ClientCalls$BlockingResponseStream)> ==> <io.grpc.ClientCall$Listener: void <init>()>
