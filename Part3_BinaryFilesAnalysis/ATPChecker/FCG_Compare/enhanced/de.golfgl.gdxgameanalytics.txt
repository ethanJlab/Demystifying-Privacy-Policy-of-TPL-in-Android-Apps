FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: $l2 = staticinvoke <com.badlogic.gdx.utils.TimeUtils: long millis()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <com.badlogic.gdx.utils.TimeUtils: long millis()>
STATIC edge: $r7 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()>
STATIC edge: $r12 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)>($r11) in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)>
CLINIT edge: $r12 = <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus Complete> in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()>
STATIC edge: $l2 = staticinvoke <com.badlogic.gdx.utils.TimeUtils: long millis()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <com.badlogic.gdx.utils.TimeUtils: long millis()>
STATIC edge: $l0 = staticinvoke <com.badlogic.gdx.utils.TimeUtils: long millis()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: long getCurrentServerTime()> ==> <com.badlogic.gdx.utils.TimeUtils: long millis()>
CLINIT edge: $r1 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics: void setPlatform(de.golfgl.gdxgameanalytics.GameAnalytics$Platform)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r0 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] $VALUES> in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lde/golfgl/gdxgameanalytics/GameAnalytics$Platform;", r0) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] $VALUES> in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lde/golfgl/gdxgameanalytics/GameAnalytics$ProgressionStatus;", r0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] $VALUES> in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lde/golfgl/gdxgameanalytics/GameAnalytics$ResourceFlowType;", r0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] $VALUES> in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lde/golfgl/gdxgameanalytics/GameAnalytics$ErrorType;", r0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $i3 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$1300(de.golfgl.gdxgameanalytics.GameAnalytics)>(r1) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$1300(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r7 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1200(de.golfgl.gdxgameanalytics.GameAnalytics)>(r1) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1200(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r38 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$2000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r37) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$2000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r27 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$2000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r26) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$2000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r40 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1900(de.golfgl.gdxgameanalytics.GameAnalytics)>($r39) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1900(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r25 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1900(de.golfgl.gdxgameanalytics.GameAnalytics)>($r24) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1900(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r42 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1800(de.golfgl.gdxgameanalytics.GameAnalytics)>($r41) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1800(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r23 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1800(de.golfgl.gdxgameanalytics.GameAnalytics)>($r22) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1800(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r20 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1700(de.golfgl.gdxgameanalytics.GameAnalytics)>($r19) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1700(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r44 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1600(de.golfgl.gdxgameanalytics.GameAnalytics)>($r43) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1600(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r18 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1600(de.golfgl.gdxgameanalytics.GameAnalytics)>($r17) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1600(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r16 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1500(de.golfgl.gdxgameanalytics.GameAnalytics)>($r15) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1500(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r14 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1400(de.golfgl.gdxgameanalytics.GameAnalytics)>($r13) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1400(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r10 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1100(de.golfgl.gdxgameanalytics.GameAnalytics)>($r9) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1100(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r6 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r3 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $r3 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r2) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r10 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1100(de.golfgl.gdxgameanalytics.GameAnalytics)>($r9) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1100(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $r6 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String access$1000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()> ==> <java.util.UUID: java.util.UUID randomUUID()>
STATIC edge: r16 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)>(r0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)>
STATIC edge: r17 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)>($r2, r3) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)>
STATIC edge: r17 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)>(r16, r3) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)>
STATIC edge: $r2 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.utils.Queue access$000(de.golfgl.gdxgameanalytics.GameAnalytics)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.utils.Queue access$000(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$202(de.golfgl.gdxgameanalytics.GameAnalytics,int)>($r13, 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$202(de.golfgl.gdxgameanalytics.GameAnalytics,int)>
STATIC edge: $r4 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.utils.Queue access$100(de.golfgl.gdxgameanalytics.GameAnalytics)>($r3) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.utils.Queue access$100(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$502(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>($r2, $z3) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$502(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>
STATIC edge: $r37 = staticinvoke <com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float)>($r35, 1.0F, 1.0F) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: void access$900(de.golfgl.gdxgameanalytics.GameAnalytics)>($r31) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void access$900(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $l10 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: long access$800(de.golfgl.gdxgameanalytics.GameAnalytics)>($r28) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: long access$800(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: long access$802(de.golfgl.gdxgameanalytics.GameAnalytics,long)>($r24, $l8) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: long access$802(de.golfgl.gdxgameanalytics.GameAnalytics,long)>
STATIC edge: $l7 = staticinvoke <com.badlogic.gdx.utils.TimeUtils: long millis()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.TimeUtils: long millis()>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: long access$702(de.golfgl.gdxgameanalytics.GameAnalytics,long)>($r22, $l3) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: long access$702(de.golfgl.gdxgameanalytics.GameAnalytics,long)>
STATIC edge: $l3 = staticinvoke <com.badlogic.gdx.utils.TimeUtils: long millis()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.TimeUtils: long millis()>
STATIC edge: $z2 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$500(de.golfgl.gdxgameanalytics.GameAnalytics)>($r6) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$500(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$602(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>($r4, 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$602(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$502(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>($r1, 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void cancelled()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$502(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$602(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>($r2, 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void cancelled()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean access$602(de.golfgl.gdxgameanalytics.GameAnalytics,boolean)>
CLINIT edge: $r1 = <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: int[] $SwitchMap$com$badlogic$gdx$Application$ApplicationType> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()>
CLINIT edge: $r5 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform MacOS> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r6 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform iOS> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r7 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform Linux> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r8 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform Windows> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r2 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform WebGL> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r3 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform Android> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r0 = new de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
STATIC edge: $r28 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()>
STATIC edge: $r24 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()>
STATIC edge: $r14 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()>
STATIC edge: $r0 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()>
CLINIT edge: $r32 = <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus Fail> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()>
CLINIT edge: $r33 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ProgressionStatus> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ProgressionStatus> = $r29 in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r28 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()>
CLINIT edge: <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ResourceFlowType> = $r25 in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r24 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()>
CLINIT edge: $r22 = <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType critical> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
CLINIT edge: $r23 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ErrorType> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r20 = <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType error> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
CLINIT edge: $r21 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ErrorType> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r18 = <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType debug> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
CLINIT edge: $r19 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ErrorType> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ErrorType> = $r15 in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r14 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
CLINIT edge: $r12 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform Linux> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r13 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r10 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform Android> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r11 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r8 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform MacOS> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r9 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r6 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform iOS> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r7 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r4 = <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform WebGL> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r5 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$Platform> = $r1 in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
CLINIT edge: $r0 = new de.golfgl.gdxgameanalytics.GameAnalytics$Platform in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()>
CLINIT edge: $r0 = new de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()>
CLINIT edge: $r0 = new de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <java.lang.Float: java.lang.Class TYPE> = null in <java.lang.Float: void <clinit>()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: $r4 = new java.lang.String in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[])>($r6) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[])>
STATIC edge: r15 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
CLINIT edge: <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: int[] $SwitchMap$com$badlogic$gdx$Application$ApplicationType> = $r1 in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] values()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()> ==> <com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] values()>
CLINIT edge: $r5 = <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: int[] $SwitchMap$com$badlogic$gdx$Application$ApplicationType> in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.badlogic.gdx.utils.Queue: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void <init>()> ==> <com.badlogic.gdx.utils.Queue: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.badlogic.gdx.utils.Queue: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void <init>()> ==> <com.badlogic.gdx.utils.Queue: void <init>()>
INTERFACE edge: interfaceinvoke $r13.<com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>("Gameanalytics", "No new session started. Session still ongoing") in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You must set your game key and secret key") in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void setPlatform(de.golfgl.gdxgameanalytics.GameAnalytics$Platform)>($r12) in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void setPlatform(de.golfgl.gdxgameanalytics.GameAnalytics$Platform)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void loadOrInitUserStringAndSessionNum()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void loadOrInitUserStringAndSessionNum()>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You need to set a os version") in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>("Gameanalytics", "You did not set up preferences. Session and user tracking will not work without it") in <de.golfgl.gdxgameanalytics.GameAnalytics: void startSession()> ==> <com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>
STATIC edge: $r4 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void loadOrInitUserStringAndSessionNum()> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "design") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("event_id", r3) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r6.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", "Queuing design event") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "design") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("event_id", r3) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)>("value", f0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)>
INTERFACE edge: interfaceinvoke $r6.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", "Queuing design event") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitDesignEvent(java.lang.String,float)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: $i1 = specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: int loadAndIncrementTransactionNum()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int loadAndIncrementTransactionNum()>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "business") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("event_id", $r9) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>("amount", i0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("currency", r10) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>("transaction_num", $i1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r13.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", "Queuing business event") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitBusinessEvent(java.lang.String,java.lang.String,int,java.lang.String)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)>(r1, r2, r3, r4, 0, 0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: $r5 = specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getStatusString(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus)>(r4) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getStatusString(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "progression") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("event_id", r25) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>("attempt_num", i2) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>("score", i3) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r10.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke r11.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r27.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", "Queuing progression event") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitProgressionEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus,java.lang.String,java.lang.String,java.lang.String,int,int)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ProgressionStatus> in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getStatusString(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: $r5 = specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getFlowTypeString(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType)>(r4) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getFlowTypeString(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "resource") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("event_id", r16) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)>("amount", f0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r19.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", "Queuing resource event") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitResourceEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType,java.lang.String,java.lang.String,java.lang.String,float)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ResourceFlowType> in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getFlowTypeString(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: boolean isInitialized()>
SPECIAL edge: $r4 = specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getSeverityString(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType)>(r3) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getSeverityString(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
VIRTUAL edge: $i0 = virtualinvoke r15.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: r15 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>(0, 8000) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "error") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("severity", $r4) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("message", r15) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Queuing error event (") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r8.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r12) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitErrorEvent(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType,java.lang.String)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = <de.golfgl.gdxgameanalytics.GameAnalytics$3: int[] $SwitchMap$de$golfgl$gdxgameanalytics$GameAnalytics$ErrorType> in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getSeverityString(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "session_end") in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>("length", $i6) in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueueImmediately()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void closeSession()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueueImmediately()>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueueImmediately()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void setPlatform(de.golfgl.gdxgameanalytics.GameAnalytics$Platform)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("[0-9]{0,5}(\\.[0-9]{0,5}){0,2}") in <de.golfgl.gdxgameanalytics.GameAnalytics: boolean setPlatformVersionString(java.lang.String)> ==> <java.lang.String: boolean matches(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void setDevice(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 30) in <de.golfgl.gdxgameanalytics.GameAnalytics: void setDevice(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <javax.crypto.Mac: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: de.golfgl.gdxgameanalytics.GameAnalytics$Platform[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <javax.crypto.Mac: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <javax.crypto.Mac: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <javax.crypto.Mac: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke r1.<de.golfgl.gdxgameanalytics.GameAnalytics: long getCurrentServerTime()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: long getCurrentServerTime()>
VIRTUAL edge: $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Long: long longValue()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("client_ts", $r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("client_ts", $r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r31 = interfaceinvoke $r30.<java.util.Map: java.util.Set keySet()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r31 = interfaceinvoke $r30.<java.util.Map: java.util.Set keySet()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r34) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r34) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putInt(java.lang.String,int)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void putFloat(java.lang.String,float)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void write(com.badlogic.gdx.utils.Json)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.UUID: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateUuid()> ==> <java.util.UUID: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r1.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", r0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Compressed from ") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes)") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r6.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r12) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.io.ByteArrayInputStream: void <init>(byte[])>(r16) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int length()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.io.ByteArrayOutputStream: void <init>(int)>
VIRTUAL edge: r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
VIRTUAL edge: virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.io.ByteArrayOutputStream: void close()>
SPECIAL edge: specialinvoke $r3.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r3.<java.util.zip.GZIPOutputStream: void write(byte[])>($r5) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r3.<java.util.zip.GZIPOutputStream: void close()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: byte[] compress(java.lang.String)> ==> <java.util.zip.DeflaterOutputStream: void close()>
SPECIAL edge: specialinvoke $r0.<java.io.StringWriter: void <init>()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String getThrowableStacktraceAsString(java.lang.Throwable)> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String getThrowableStacktraceAsString(java.lang.Throwable)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String getThrowableStacktraceAsString(java.lang.Throwable)> ==> <java.io.PrintWriter: void <init>(java.io.Writer)>
VIRTUAL edge: virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String getThrowableStacktraceAsString(java.lang.Throwable)> ==> <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
VIRTUAL edge: virtualinvoke $r4.<com.badlogic.gdx.utils.Queue: void clear()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.Queue: void clear()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r16.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r20) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed(java.lang.Throwable)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()>
STATIC edge: $i0 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$200(de.golfgl.gdxgameanalytics.GameAnalytics)>($r2) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$200(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: $i8 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$300(de.golfgl.gdxgameanalytics.GameAnalytics)>($r9) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$300(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$302(de.golfgl.gdxgameanalytics.GameAnalytics,int)>($r5, $i6) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$302(de.golfgl.gdxgameanalytics.GameAnalytics,int)>
STATIC edge: $i4 = staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$200(de.golfgl.gdxgameanalytics.GameAnalytics)>($r4) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$200(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: staticinvoke <de.golfgl.gdxgameanalytics.GameAnalytics: int access$202(de.golfgl.gdxgameanalytics.GameAnalytics,int)>($r3, $i2) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: int access$202(de.golfgl.gdxgameanalytics.GameAnalytics,int)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 9) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.Math: int min(int,int)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void cancelled()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r16.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r21) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.badlogic.gdx.utils.JsonReader: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.JsonReader: void <init>()>
VIRTUAL edge: r39 = virtualinvoke $r23.<com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(java.lang.String)>(r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(java.lang.String)>
VIRTUAL edge: $l5 = virtualinvoke r39.<com.badlogic.gdx.utils.JsonValue: long getLong(java.lang.String)>("server_ts") in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.utils.JsonValue: long getLong(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session open. Time stamp discrepancy in ms: ") in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r26.<com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>("Gameanalytics", $r30) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r32.<de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueueImmediately()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueueImmediately()>
SPECIAL edge: specialinvoke $r35.<de.golfgl.gdxgameanalytics.GameAnalytics$2$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics$2)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$2$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics$2)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection attempt failed: ") in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$2: void cancelled()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void failed(java.lang.Throwable)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$2: void cancelled()>
VIRTUAL edge: virtualinvoke $r2.<de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2$1: void run()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.badlogic.gdx.Application$ApplicationType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <com.badlogic.gdx.Application$ApplicationType: int ordinal()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You need to set a platform") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: de.golfgl.gdxgameanalytics.GameAnalytics$Platform getDefaultPlatform(com.badlogic.gdx.Application$ApplicationType)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>("Start", 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>("Fail", 1) in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>("Complete", 2) in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i8 = virtualinvoke $r16.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i9 = virtualinvoke $r18.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i10 = virtualinvoke $r20.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i11 = virtualinvoke $r22.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i13 = virtualinvoke $r26.<de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i15 = virtualinvoke $r30.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i16 = virtualinvoke $r32.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$3: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("Windows", 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("Linux", 1) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("Android", 2) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("iOS", 3) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("WebGL", 4) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>("MacOS", 5) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <init>(java.lang.String,int)>("Sink", 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <init>(java.lang.String,int)>("Source", 1) in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>("debug", 0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>("info", 1) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>("warning", 2) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>("error", 3) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>("critical", 4) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <clinit>()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, "HmacSHA256") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke r15.<javax.crypto.Mac: void init(java.security.Key)>($r2) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <javax.crypto.Mac: void init(java.security.Key)>
VIRTUAL edge: $r6 = virtualinvoke r15.<javax.crypto.Mac: byte[] doFinal(byte[])>(r5) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <javax.crypto.Mac: byte[] doFinal(byte[])>
SPECIAL edge: specialinvoke $r4.<java.lang.String: void <init>(char[])>($r7) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.String: void <init>(char[])>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error generating Hmac: ") in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String generateHash(byte[],java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: void submitStartSessionRequest()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void access$900(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void submitStartSessionRequest()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.badlogic.gdx.Application$ApplicationType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()> ==> <com.badlogic.gdx.Application$ApplicationType: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.badlogic.gdx.Application$ApplicationType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff$1: void <clinit>()> ==> <com.badlogic.gdx.Application$ApplicationType: int ordinal()>
VIRTUAL edge: $z0 = virtualinvoke $r12.<java.lang.String: boolean isEmpty()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void loadOrInitUserStringAndSessionNum()> ==> <java.lang.String: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r3.<com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>("Gameanalytics", "No user id found. Generating a new one.") in <de.golfgl.gdxgameanalytics.GameAnalytics: void loadOrInitUserStringAndSessionNum()> ==> <com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.badlogic.gdx.utils.Json: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <com.badlogic.gdx.utils.Json: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object)>($r5) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics,de.golfgl.gdxgameanalytics.GameAnalytics$1)>(r6, null) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics,de.golfgl.gdxgameanalytics.GameAnalytics$1)>
VIRTUAL edge: $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/init") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: r18 = specialinvoke r6.<de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)>($r17, r10) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r19.<de.golfgl.gdxgameanalytics.GameAnalytics$2: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r6) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitInitRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$2: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
STATIC edge: r6 = staticinvoke <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)>($r0, r3, $r5) in <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)> ==> <de.golfgl.gdxgameanalytics.GwtIncompatibleStuff: java.lang.String setHttpRequestContent(com.badlogic.gdx.Net$HttpRequest,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.badlogic.gdx.utils.Queue: java.lang.Object removeFirst()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)> ==> <com.badlogic.gdx.utils.Queue: java.lang.Object removeFirst()>
VIRTUAL edge: virtualinvoke $r3.<com.badlogic.gdx.utils.Queue: void addLast(java.lang.Object)>(r2) in <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)> ==> <com.badlogic.gdx.utils.Queue: void addLast(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getStatusString(de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getFlowTypeString(de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: int ordinal()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: java.lang.String getSeverityString(de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<com.badlogic.gdx.utils.Json: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.utils.Json: void <init>()>
VIRTUAL edge: $r29 = virtualinvoke $r4.<com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object)>($r28) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object)>
VIRTUAL edge: $r36 = virtualinvoke $r34.<com.badlogic.gdx.utils.Queue: java.lang.Object removeFirst()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.utils.Queue: java.lang.Object removeFirst()>
VIRTUAL edge: virtualinvoke $r35.<com.badlogic.gdx.utils.Queue: void addLast(java.lang.Object)>($r36) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.utils.Queue: void addLast(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending queue with ") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" events") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r14) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<com.badlogic.gdx.utils.Queue: java.lang.Object get(int)>(i10) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <com.badlogic.gdx.utils.Queue: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/events") in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: r43 = specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)>($r23, $r24) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r25.<de.golfgl.gdxgameanalytics.GameAnalytics$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void flushQueue()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next flush attempt in ") in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds") in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>("Gameanalytics", $r12) in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void failed()> ==> <com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.badlogic.gdx.utils.Timer$Task: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics$2)> ==> <com.badlogic.gdx.utils.Timer$Task: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ProgressionStatus: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$Platform: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ResourceFlowType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <de.golfgl.gdxgameanalytics.GameAnalytics$ErrorType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r1) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitStartSessionRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
VIRTUAL edge: virtualinvoke $r0.<de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>("category", "user") in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitStartSessionRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent: void put(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r1.<de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>($r0) in <de.golfgl.gdxgameanalytics.GameAnalytics: void submitStartSessionRequest()> ==> <de.golfgl.gdxgameanalytics.GameAnalytics: void addToWaitingQueue(de.golfgl.gdxgameanalytics.GameAnalytics$AnnotatedEvent)>
SPECIAL edge: specialinvoke r0.<de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>(r1) in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics,de.golfgl.gdxgameanalytics.GameAnalytics$1)> ==> <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)>
SPECIAL edge: specialinvoke $r0.<com.badlogic.gdx.Net$HttpRequest: void <init>(java.lang.String)>("POST") in <de.golfgl.gdxgameanalytics.GameAnalytics: com.badlogic.gdx.Net$HttpRequest createHttpRequest(java.lang.String,java.lang.String)> ==> <com.badlogic.gdx.Net$HttpRequest: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$2: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$1: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <de.golfgl.gdxgameanalytics.GameAnalytics$InitEvent: void <init>(de.golfgl.gdxgameanalytics.GameAnalytics)> ==> <java.lang.Object: void <init>()>
