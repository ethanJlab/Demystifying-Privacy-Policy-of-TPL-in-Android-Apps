FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r9 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r36 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: $r38 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r46 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
CLINIT edge: $r13 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
CLINIT edge: $r30 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r38 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = new java.io.File in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r12 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2) in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: $r4 = staticinvoke <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>($r3, $r2) in <io.sentry.buffer.DiskBuffer$1: io.sentry.event.Event next()> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>($r3, $r2) in <io.sentry.buffer.DiskBuffer$1: io.sentry.event.Event next()> ==> <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>
CLINIT edge: $r0 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] $VALUES> in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <io.sentry.event.Event$Level: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/sentry/event/Event$Level;", r0) in <io.sentry.event.Event$Level: io.sentry.event.Event$Level valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r6 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.connection.AsyncConnection: void access$600(io.sentry.connection.AsyncConnection)>($r1) in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.connection.AsyncConnection: void access$600(io.sentry.connection.AsyncConnection)>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.connection.AsyncConnection: void access$600(io.sentry.connection.AsyncConnection)>($r1) in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>() in <io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)> ==> <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>
STATIC edge: staticinvoke <io.sentry.connection.AsyncConnection$ShutDownHook: boolean access$202(io.sentry.connection.AsyncConnection$ShutDownHook,boolean)>($r1, 0) in <io.sentry.connection.AsyncConnection: void close()> ==> <io.sentry.connection.AsyncConnection$ShutDownHook: boolean access$202(io.sentry.connection.AsyncConnection$ShutDownHook,boolean)>
CLINIT edge: $z0 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>
CLINIT edge: $r6 = <io.sentry.environment.SentryEnvironment: java.lang.ThreadLocal SENTRY_THREAD> in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
STATIC edge: $z0 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>
CLINIT edge: $r6 = <io.sentry.environment.SentryEnvironment: java.lang.ThreadLocal SENTRY_THREAD> in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.environment.SentryEnvironment: java.lang.ThreadLocal SENTRY_THREAD> in <io.sentry.environment.SentryEnvironment: boolean isManagingThread()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r2 = <io.sentry.environment.SentryEnvironment: java.lang.String SDK_VERSION> in <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r7 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r9 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$400()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$400()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r2 = staticinvoke <io.sentry.connection.AsyncConnection: io.sentry.connection.Connection access$300(io.sentry.connection.AsyncConnection)>($r1) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: io.sentry.connection.Connection access$300(io.sentry.connection.AsyncConnection)>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$400()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <io.sentry.connection.AsyncConnection: io.sentry.connection.Connection access$300(io.sentry.connection.AsyncConnection)>($r1) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r5 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r39 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: $r33 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: $r17 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: $r10 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r23 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $z1 = staticinvoke <io.sentry.connection.BufferedConnection: boolean access$400(io.sentry.connection.BufferedConnection)>($r6) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: boolean access$400(io.sentry.connection.BufferedConnection)>
STATIC edge: $r3 = staticinvoke <io.sentry.connection.BufferedConnection: io.sentry.buffer.Buffer access$200(io.sentry.connection.BufferedConnection)>($r2) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: io.sentry.buffer.Buffer access$200(io.sentry.connection.BufferedConnection)>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
STATIC edge: $r0 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r33 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>($r2) in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>
CLINIT edge: $r1 = <io.sentry.connection.BufferedConnection: org.slf4j.Logger logger> in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
STATIC edge: $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: staticinvoke <io.sentry.connection.BufferedConnection$ShutDownHook: boolean access$102(io.sentry.connection.BufferedConnection$ShutDownHook,boolean)>($r12, 0) in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection$ShutDownHook: boolean access$102(io.sentry.connection.BufferedConnection$ShutDownHook,boolean)>
CLINIT edge: $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r18 = <io.sentry.connection.BufferedConnection: org.slf4j.Logger logger> in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: $r6 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <io.sentry.connection.BufferedConnection: io.sentry.buffer.Buffer access$200(io.sentry.connection.BufferedConnection)>($r1) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>
STATIC edge: $r2 = staticinvoke <io.sentry.connection.BufferedConnection: io.sentry.buffer.Buffer access$200(io.sentry.connection.BufferedConnection)>($r1) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: io.sentry.buffer.Buffer access$200(io.sentry.connection.BufferedConnection)>
CLINIT edge: $r7 = staticinvoke <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()>() in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: $i0 = <io.sentry.connection.HttpConnection: int DEFAULT_TIMEOUT> in <io.sentry.connection.HttpConnection: void <init>(java.net.URL,java.lang.String,java.lang.String,java.net.Proxy,io.sentry.connection.EventSampler)> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
CLINIT edge: $i0 = <io.sentry.connection.HttpConnection: int DEFAULT_TIMEOUT> in <io.sentry.connection.HttpConnection: void <init>(java.net.URL,java.lang.String,java.lang.String,java.net.Proxy,io.sentry.connection.EventSampler)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r27 = <io.sentry.connection.AbstractConnection: org.slf4j.Logger logger> in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r20 = <io.sentry.connection.AbstractConnection: org.slf4j.Logger logger> in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r14 = <io.sentry.connection.AbstractConnection: org.slf4j.Logger logger> in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $l0 = <io.sentry.connection.LockdownManager: long DEFAULT_MAX_LOCKDOWN_TIME> in <io.sentry.connection.LockdownManager: void <init>(io.sentry.time.Clock)> ==> <io.sentry.connection.LockdownManager: void <clinit>()>
STATIC edge: $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l6, $l7) in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <java.lang.Math: long min(long,long)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.time.SystemClock: long millis()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.time.SystemClock: long millis()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0) in <io.sentry.connection.RandomEventSampler: boolean shouldSendEvent(io.sentry.event.Event)> ==> <java.lang.Math: double abs(double)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <java.util.Collections: java.util.List emptyList()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4) in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.Collections: java.util.Map emptyMap()>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4) in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4) in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.Collections: java.util.Map emptyMap()>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4) in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null) in <io.sentry.util.CircularFifoQueue: void clear()> ==> <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The specified index (%1$d) is outside the available range [0, %2$d)", $r2) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The specified index (%1$d) is outside the available range [0, %2$d)", $r2) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15) in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r13) in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11) in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <io.sentry.event.Breadcrumb: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $i1 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r1) in <io.sentry.util.CircularFifoQueue$1: boolean hasNext()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i2 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$300(io.sentry.util.CircularFifoQueue,int)>($r1, $i1) in <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()> ==> <io.sentry.util.CircularFifoQueue: int access$300(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: $r3 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r2) in <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, i19, $r28, $i16, $i18) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $i11 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>($r10, $i10) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: staticinvoke <io.sentry.util.CircularFifoQueue: boolean access$102(io.sentry.util.CircularFifoQueue,boolean)>($r9, 0) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: boolean access$102(io.sentry.util.CircularFifoQueue,boolean)>
STATIC edge: $i9 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r8) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: $r7 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r6) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: staticinvoke <io.sentry.util.CircularFifoQueue: int access$202(io.sentry.util.CircularFifoQueue,int)>($r4, $i7) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$202(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: $i7 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>($r5, $i6) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: $i6 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r3) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: i19 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$300(io.sentry.util.CircularFifoQueue,int)>($r18, i19) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$300(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: $r16 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r15) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i13 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>($r14, i19) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)>
STATIC edge: $r13 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r12) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $r22 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r21) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $r20 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r19) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i12 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$500(io.sentry.util.CircularFifoQueue)>($r11) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$500(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i20 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r33) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, i19, $r28, $i16, $i18) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $i17 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r29) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: $r28 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r27) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $r26 = staticinvoke <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>($r25) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i15 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>($r24) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$200(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i4 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>($r2) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i2 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>($r1) in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>
CLINIT edge: $r0 = <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] $VALUES> in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <io.sentry.event.Breadcrumb$Type: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/sentry/event/Breadcrumb$Type;", r0) in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] $VALUES> in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <io.sentry.event.Breadcrumb$Level: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/sentry/event/Breadcrumb$Level;", r0) in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = new io.sentry.SentryClient in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("javax.servlet.ServletRequestListener", 0, $r7) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
CLINIT edge: $r14 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r14 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(null, null) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient()> ==> <io.sentry.SentryClientFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(null, null) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient()> ==> <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: $r1 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(r0, null) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(r0, null) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String)> ==> <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: r1 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)>(r0) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
STATIC edge: r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r2) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("factory", r1) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
STATIC edge: r1 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)>(r0) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)>
CLINIT edge: $r8 = <io.sentry.SentryClientFactory: org.slf4j.Logger logger> in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r4 = new io.sentry.DefaultSentryClientFactory in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("factory", r1) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r8 = <io.sentry.SentryClient: org.slf4j.Logger logger> in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: void <clinit>()>
CLINIT edge: $r14 = <io.sentry.SentryClient: org.slf4j.Logger logger> in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: void <clinit>()>
CLINIT edge: $r18 = <io.sentry.SentryClient: org.slf4j.Logger lockdownLogger> in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>($r1) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: $z1 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>($r2) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: $z4 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>($r32) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: $z3 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>($r28) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $r0 = new io.sentry.event.EventBuilder in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
CLINIT edge: $r3 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level INFO> in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.event.EventBuilder in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
CLINIT edge: $r4 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level ERROR> in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.SentryClient: org.slf4j.Logger logger> in <io.sentry.SentryClient: void removeBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <io.sentry.SentryClient: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.SentryClient: org.slf4j.Logger logger> in <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <io.sentry.SentryClient: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <io.sentry.SentryClient: java.util.List getBuilderHelpers()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <io.sentry.SentryClient: java.util.List getBuilderHelpers()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.SentryClient: java.util.Map getTags()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.SentryClient: java.util.Map getTags()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1) in <io.sentry.SentryClient: java.util.Set getMdcTags()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1) in <io.sentry.SentryClient: java.util.Set getMdcTags()> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.lang.String)> ==> <java.net.URI: java.net.URI create(java.lang.String)>
CLINIT edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)>("dsn") in <io.sentry.dsn.Dsn: java.lang.String dsnLookup()> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)>("dns") in <io.sentry.dsn.Dsn: java.lang.String dsnLookup()> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)>("dsn") in <io.sentry.dsn.Dsn: java.lang.String dsnLookup()> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)>
CLINIT edge: $r0 = <io.sentry.dsn.Dsn: org.slf4j.Logger logger> in <io.sentry.dsn.Dsn: java.lang.String dsnLookup()> ==> <io.sentry.dsn.Dsn: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void <init>()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void <init>()> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r1 = staticinvoke <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)>(r0, "tags") in <io.sentry.util.Util: java.util.Map parseTags(java.lang.String)> ==> <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)>(r0, "extras") in <io.sentry.util.Util: java.util.Map parseExtra(java.lang.String)> ==> <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)>(r0) in <io.sentry.util.Util: java.util.Set parseExtraTags(java.lang.String)> ==> <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2) in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <java.util.Collections: java.util.Set emptySet()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r0) in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)> ==> <java.lang.Double: double parseDouble(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r0) in <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $r0 = <io.sentry.jvmti.FrameCache: java.lang.ThreadLocal cache> in <io.sentry.jvmti.FrameCache: void add(java.lang.Throwable,io.sentry.jvmti.Frame[])> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.jvmti.FrameCache: java.lang.ThreadLocal cache> in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.jvmti.FrameCache: java.util.Set appPackages> in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.jvmti.FrameCache: java.util.Set appPackages> in <io.sentry.jvmti.FrameCache: void addAppPackage(java.lang.String)> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>(r0, null) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>(r0, null) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $z0 = <io.sentry.config.Lookup: boolean checkJndi> in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: r35 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>($r15) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.System: java.lang.String getenv(java.lang.String)>
STATIC edge: r35 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r21) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: r35 = staticinvoke <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("javax.naming.InitialContext", 0, $r24) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
CLINIT edge: r35 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>($r15) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r35 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r21) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r30 = <io.sentry.config.Lookup: org.slf4j.Logger logger> in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: r35 = staticinvoke <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <io.sentry.config.JndiLookup: void <clinit>()>
CLINIT edge: r0 = staticinvoke <io.sentry.servlet.SentryServletRequestListener: javax.servlet.http.HttpServletRequest getServletRequest()>() in <io.sentry.event.helper.HttpEventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
STATIC edge: r0 = staticinvoke <io.sentry.servlet.SentryServletRequestListener: javax.servlet.http.HttpServletRequest getServletRequest()>() in <io.sentry.event.helper.HttpEventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.servlet.SentryServletRequestListener: javax.servlet.http.HttpServletRequest getServletRequest()>
CLINIT edge: $r34 = new io.sentry.marshaller.json.SentryJsonGenerator in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void <clinit>()>
CLINIT edge: $r9 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r13 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r15 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r17 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r2, $i0) in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
STATIC edge: $r9 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r8, $i1) in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
STATIC edge: $r1 = staticinvoke <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>(r0, null) in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[])> ==> <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>
STATIC edge: $r10 = staticinvoke <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)>(r2, r9) in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)>
STATIC edge: $r1 = staticinvoke <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)>(r0, null) in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, $r17) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r13) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.event.interfaces.SentryStackTraceElement: int hashCode()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i1 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <io.sentry.event.interfaces.SentryStackTraceElement: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.event.interfaces.SentryStackTraceElement: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>(r1, r2) in <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0) in <io.sentry.event.interfaces.StackTraceInterface: void <init>(io.sentry.event.interfaces.SentryStackTraceElement[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <io.sentry.event.interfaces.StackTraceInterface: io.sentry.event.interfaces.SentryStackTraceElement[] getStackTrace()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5) in <io.sentry.event.interfaces.StackTraceInterface: boolean equals(java.lang.Object)> ==> <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
STATIC edge: $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1) in <io.sentry.event.interfaces.StackTraceInterface: int hashCode()> ==> <java.util.Arrays: int hashCode(java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3) in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.util.Arrays: java.lang.String toString(java.lang.Object[])>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3) in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.util.Arrays: java.lang.String toString(java.lang.Object[])>
CLINIT edge: $r17 = <io.sentry.config.JndiLookup: org.slf4j.Logger logger> in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <io.sentry.config.JndiLookup: void <clinit>()>
CLINIT edge: $r8 = <io.sentry.config.JndiLookup: org.slf4j.Logger logger> in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <io.sentry.config.JndiLookup: void <clinit>()>
CLINIT edge: $r11 = <io.sentry.config.JndiLookup: org.slf4j.Logger logger> in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <io.sentry.config.JndiLookup: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r13) in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11) in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9) in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <io.sentry.event.interfaces.UserInterface: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <io.sentry.event.EventBuilder: void <init>()> ==> <java.util.UUID: java.util.UUID randomUUID()>
CLINIT edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withFingerprint(java.lang.String[])> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withFingerprint(java.lang.String[])> ==> <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
CLINIT edge: $r2 = staticinvoke <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksumFor(java.lang.String)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksumFor(java.lang.String)> ==> <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)>
CLINIT edge: $r0 = <io.sentry.servlet.SentryServletRequestListener: java.lang.ThreadLocal THREAD_REQUEST> in <io.sentry.servlet.SentryServletRequestListener: javax.servlet.http.HttpServletRequest getServletRequest()> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.servlet.SentryServletRequestListener: java.lang.ThreadLocal THREAD_REQUEST> in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
STATIC edge: r5 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r2 = <io.sentry.servlet.SentryServletRequestListener: org.slf4j.Logger logger> in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
CLINIT edge: r5 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: $r3 = <io.sentry.servlet.SentryServletRequestListener: java.lang.ThreadLocal THREAD_REQUEST> in <io.sentry.servlet.SentryServletRequestListener: void requestInitialized(javax.servlet.ServletRequestEvent)> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r26 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r25) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
STATIC edge: $r21 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r20) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
STATIC edge: $r10 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r38) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: $r21 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r20) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.event.interfaces.HttpInterface: java.util.Map getParameters()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.event.interfaces.HttpInterface: java.util.Map getParameters()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.event.interfaces.HttpInterface: java.util.Map getHeaders()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.event.interfaces.HttpInterface: java.util.Map getHeaders()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r2 = staticinvoke <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)>(r1) in <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)> ==> <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)>
CLINIT edge: $r10 = staticinvoke <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)>(r1) in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
STATIC edge: $r10 = staticinvoke <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)>(r1) in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)>
CLINIT edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <io.sentry.SentryUncaughtExceptionHandler: void <init>(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <io.sentry.SentryUncaughtExceptionHandler: void <init>(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r5 = <io.sentry.SentryUncaughtExceptionHandler: org.slf4j.Logger logger> in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>(r12) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>
CLINIT edge: $r15 = <io.sentry.SentryUncaughtExceptionHandler: org.slf4j.Logger logger> in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>(r12) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: $r9 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level FATAL> in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r6 = new io.sentry.event.EventBuilder in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.SentryUncaughtExceptionHandler: org.slf4j.Logger logger> in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r2) in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
STATIC edge: r1 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>() in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
CLINIT edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.sentry.SentryUncaughtExceptionHandler: void disable()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r3) in <io.sentry.SentryUncaughtExceptionHandler: void disable()> ==> <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
STATIC edge: r2 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>() in <io.sentry.SentryUncaughtExceptionHandler: void disable()> ==> <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
STATIC edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.sentry.SentryUncaughtExceptionHandler: void disable()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.lang.String[])> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) in <io.sentry.event.interfaces.MessageInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9) in <io.sentry.event.interfaces.MessageInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <io.sentry.event.interfaces.MessageInterface: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <io.sentry.event.interfaces.MessageInterface: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
CLINIT edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r3 = <io.sentry.event.EventBuilder$HostnameCache: org.slf4j.Logger logger> in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r11 = <io.sentry.event.EventBuilder$HostnameCache: org.slf4j.Logger logger> in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
CLINIT edge: $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(null, null) in <io.sentry.Sentry: io.sentry.SentryClient init()> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(null, null) in <io.sentry.Sentry: io.sentry.SentryClient init()> ==> <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: $r1 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(null, r0) in <io.sentry.Sentry: io.sentry.SentryClient init(io.sentry.SentryClientFactory)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(null, r0) in <io.sentry.Sentry: io.sentry.SentryClient init(io.sentry.SentryClientFactory)> ==> <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: $r1 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(r0, null) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>(r0, null) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String)> ==> <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: r2 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(r0, r1) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.Sentry: void setStoredClient(io.sentry.SentryClient)>(r2) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.Sentry: void setStoredClient(io.sentry.SentryClient)>
STATIC edge: r2 = staticinvoke <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>(r0, r1) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)>
CLINIT edge: staticinvoke <io.sentry.Sentry: void setStoredClient(io.sentry.SentryClient)>(r2) in <io.sentry.Sentry: io.sentry.SentryClient init(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: $r0 = <io.sentry.Sentry: io.sentry.SentryClient storedClient> in <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.Sentry: io.sentry.SentryClient init()>() in <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()> ==> <io.sentry.Sentry: io.sentry.SentryClient init()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: io.sentry.context.Context getContext()> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: io.sentry.context.Context getContext()> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void clearContext()> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void clearContext()> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = <io.sentry.Sentry: io.sentry.SentryClient storedClient> in <io.sentry.Sentry: void setStoredClient(io.sentry.SentryClient)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(io.sentry.event.Event)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(io.sentry.event.Event)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(java.lang.Throwable)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(java.lang.Throwable)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(java.lang.String)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(java.lang.String)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void record(io.sentry.event.Breadcrumb)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void record(io.sentry.event.Breadcrumb)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void setUser(io.sentry.event.User)> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.Sentry: void setUser(io.sentry.event.User)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
CLINIT edge: $r0 = <io.sentry.Sentry: io.sentry.SentryClient storedClient> in <io.sentry.Sentry: void close()> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.event.EventBuilder$HostnameCache: java.lang.String access$102(io.sentry.event.EventBuilder$HostnameCache,java.lang.String)>($r1, $r3) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
STATIC edge: $r12 = staticinvoke <io.sentry.event.EventBuilder$HostnameCache: java.util.concurrent.atomic.AtomicBoolean access$400(io.sentry.event.EventBuilder$HostnameCache)>($r11) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: java.util.concurrent.atomic.AtomicBoolean access$400(io.sentry.event.EventBuilder$HostnameCache)>
STATIC edge: $r8 = staticinvoke <io.sentry.event.EventBuilder$HostnameCache: java.util.concurrent.atomic.AtomicBoolean access$400(io.sentry.event.EventBuilder$HostnameCache)>($r7) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: java.util.concurrent.atomic.AtomicBoolean access$400(io.sentry.event.EventBuilder$HostnameCache)>
STATIC edge: staticinvoke <io.sentry.event.EventBuilder$HostnameCache: long access$202(io.sentry.event.EventBuilder$HostnameCache,long)>($r5, $l2) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: long access$202(io.sentry.event.EventBuilder$HostnameCache,long)>
STATIC edge: $l1 = staticinvoke <io.sentry.event.EventBuilder$HostnameCache: long access$300(io.sentry.event.EventBuilder$HostnameCache)>($r6) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: long access$300(io.sentry.event.EventBuilder$HostnameCache)>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: staticinvoke <io.sentry.event.EventBuilder$HostnameCache: java.lang.String access$102(io.sentry.event.EventBuilder$HostnameCache,java.lang.String)>($r1, $r3) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: java.lang.String access$102(io.sentry.event.EventBuilder$HostnameCache,java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>() in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.net.InetAddress: java.net.InetAddress getLocalHost()>
CLINIT edge: $r12 = staticinvoke <io.sentry.event.EventBuilder$HostnameCache: java.util.concurrent.atomic.AtomicBoolean access$400(io.sentry.event.EventBuilder$HostnameCache)>($r11) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r1) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: $r5 = staticinvoke <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)>(r1) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)>
CLINIT edge: $z1 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>(r5) in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
STATIC edge: $z1 = staticinvoke <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: boolean isManagingThread()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)>(r5) in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void stopManagingThread()>
STATIC edge: staticinvoke <io.sentry.Sentry: void close()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.Sentry: void close()>
STATIC edge: staticinvoke <io.sentry.environment.SentryEnvironment: void startManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void startManagingThread()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.environment.SentryEnvironment: void stopManagingThread()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.Sentry: void close()>() in <io.sentry.jul.SentryHandler: void close()> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> = $r0 in <io.sentry.buffer.DiskBuffer: void <clinit>()> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/buffer/DiskBuffer;") in <io.sentry.buffer.DiskBuffer: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.event.Event$Level in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: <io.sentry.environment.SentryEnvironment: java.lang.String SDK_VERSION> = $r1 in <io.sentry.environment.SentryEnvironment: void <clinit>()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/environment/SentryEnvironment;") in <io.sentry.environment.SentryEnvironment: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("sentry-build") in <io.sentry.environment.SentryEnvironment: void <clinit>()> ==> <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
CLINIT edge: $r0 = <io.sentry.connection.AsyncConnection: org.slf4j.Logger logger> in <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$500()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: <io.sentry.connection.AsyncConnection: org.slf4j.Logger logger> = $r0 in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
STATIC edge: $r7 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r6) in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/connection/AsyncConnection;") in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = <io.sentry.connection.AsyncConnection: org.slf4j.Logger lockdownLogger> in <io.sentry.connection.AsyncConnection: org.slf4j.Logger access$400()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: <io.sentry.connection.BufferedConnection: org.slf4j.Logger logger> = $r0 in <io.sentry.connection.BufferedConnection: void <clinit>()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/connection/BufferedConnection;") in <io.sentry.connection.BufferedConnection: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = <io.sentry.connection.BufferedConnection: org.slf4j.Logger logger> in <io.sentry.connection.BufferedConnection: org.slf4j.Logger access$300()> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: <io.sentry.connection.HttpConnection: java.nio.charset.Charset UTF_8> = $r0 in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/connection/HttpConnection;") in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: <io.sentry.connection.HttpConnection: java.nio.charset.Charset UTF_8> = $r0 in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: <io.sentry.connection.AbstractConnection: org.slf4j.Logger logger> = $r0 in <io.sentry.connection.AbstractConnection: void <clinit>()> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/connection/AbstractConnection;") in <io.sentry.connection.AbstractConnection: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> in <io.sentry.connection.LockdownManager: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: <io.sentry.connection.LockdownManager: long DEFAULT_MAX_LOCKDOWN_TIME> = $l0 in <io.sentry.connection.LockdownManager: void <clinit>()> ==> <io.sentry.connection.LockdownManager: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.event.Breadcrumb$Type in <io.sentry.event.Breadcrumb$Type: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Type: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.event.Breadcrumb$Level in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <clinit>()>
CLINIT edge: <io.sentry.SentryClient: org.slf4j.Logger logger> = $r0 in <io.sentry.SentryClient: void <clinit>()> ==> <io.sentry.SentryClient: void <clinit>()>
STATIC edge: $r7 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r6) in <io.sentry.SentryClient: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/SentryClient;") in <io.sentry.SentryClient: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.sentry.SentryClientFactory: org.slf4j.Logger logger> = $r0 in <io.sentry.SentryClientFactory: void <clinit>()> ==> <io.sentry.SentryClientFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/SentryClientFactory;") in <io.sentry.SentryClientFactory: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/DefaultSentryClientFactory;") in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r4 = <java.lang.Boolean: java.lang.Boolean FALSE> in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <io.sentry.DefaultSentryClientFactory: int TIMEOUT_DEFAULT> = $i1 in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: <io.sentry.DefaultSentryClientFactory: int TIMEOUT_DEFAULT> = $i1 in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: r4 = staticinvoke <io.sentry.dsn.Dsn: java.lang.String dsnLookup()>() in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.dsn.Dsn: void <clinit>()>
STATIC edge: r4 = staticinvoke <io.sentry.dsn.Dsn: java.lang.String dsnLookup()>() in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.dsn.Dsn: java.lang.String dsnLookup()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r4) in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: $r3 = <io.sentry.SentryClientFactory: org.slf4j.Logger logger> in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.dsn.Dsn in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.dsn.Dsn: void <clinit>()>
CLINIT edge: <io.sentry.config.Lookup: org.slf4j.Logger logger> = $r0 in <io.sentry.config.Lookup: void <clinit>()> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: r7 = staticinvoke <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)>(r1) in <io.sentry.config.Lookup: void <clinit>()> ==> <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String getConfigFilePath()>() in <io.sentry.config.Lookup: void <clinit>()> ==> <io.sentry.config.Lookup: java.lang.String getConfigFilePath()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/config/Lookup;") in <io.sentry.config.Lookup: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r6 = <io.sentry.config.Lookup: org.slf4j.Logger logger> in <io.sentry.config.Lookup: void <clinit>()> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS> in <io.sentry.event.EventBuilder: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") in <io.sentry.event.EventBuilder: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: $r2 = new io.sentry.event.EventBuilder$HostnameCache in <io.sentry.event.EventBuilder: void <clinit>()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
CLINIT edge: <io.sentry.event.EventBuilder: long HOSTNAME_CACHE_DURATION> = $l0 in <io.sentry.event.EventBuilder: void <clinit>()> ==> <io.sentry.event.EventBuilder: void <clinit>()>
CLINIT edge: <io.sentry.dsn.Dsn: org.slf4j.Logger logger> = $r0 in <io.sentry.dsn.Dsn: void <clinit>()> ==> <io.sentry.dsn.Dsn: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/dsn/Dsn;") in <io.sentry.dsn.Dsn: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r18 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r18 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r0) in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: <io.sentry.jvmti.FrameCache: java.util.Set appPackages> = $r0 in <io.sentry.jvmti.FrameCache: void <clinit>()> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
CLINIT edge: <io.sentry.config.JndiLookup: org.slf4j.Logger logger> = $r0 in <io.sentry.config.JndiLookup: void <clinit>()> ==> <io.sentry.config.JndiLookup: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/config/JndiLookup;") in <io.sentry.config.JndiLookup: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.sentry.servlet.SentryServletRequestListener: org.slf4j.Logger logger> = $r0 in <io.sentry.servlet.SentryServletRequestListener: void <clinit>()> ==> <io.sentry.servlet.SentryServletRequestListener: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/servlet/SentryServletRequestListener;") in <io.sentry.servlet.SentryServletRequestListener: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.sentry.marshaller.json.SentryJsonGenerator: org.slf4j.Logger logger> = $r0 in <io.sentry.marshaller.json.SentryJsonGenerator: void <clinit>()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/util/Util;") in <io.sentry.marshaller.json.SentryJsonGenerator: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.sentry.marshaller.json.JsonMarshaller: java.lang.ThreadLocal ISO_FORMAT> = $r0 in <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/marshaller/json/JsonMarshaller;") in <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r1 = <io.sentry.event.EventBuilder: java.nio.charset.Charset UTF_8> in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1) in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.lang.Long: java.lang.String toHexString(long)>
CLINIT edge: $r5 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1) in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <io.sentry.Sentry: org.slf4j.Logger logger> = $r0 in <io.sentry.Sentry: void <clinit>()> ==> <io.sentry.Sentry: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/Sentry;") in <io.sentry.Sentry: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <io.sentry.SentryUncaughtExceptionHandler: org.slf4j.Logger logger> = $r0 in <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()> ==> <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/SentryClientFactory;") in <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/sentry/event/EventBuilder$HostnameCache;") in <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.sentry.event.EventBuilder$HostnameCache: long GET_HOSTNAME_TIMEOUT> = $l0 in <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()>
STATIC edge: r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: $r0 = new java.io.File in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sentry.properties.file") in <io.sentry.config.Lookup: java.lang.String getConfigFilePath()> ==> <java.lang.System: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SENTRY_PROPERTIES_FILE") in <io.sentry.config.Lookup: java.lang.String getConfigFilePath()> ==> <java.lang.System: java.lang.String getenv(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sentry.properties.file") in <io.sentry.config.Lookup: java.lang.String getConfigFilePath()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i1 = specialinvoke r0.<io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create or write to disk buffer dir: ") in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: virtualinvoke r1.<java.io.File: boolean mkdirs()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z2 = virtualinvoke r1.<java.io.File: boolean canWrite()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.io.File: boolean canWrite()>
VIRTUAL edge: $r13 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(r6) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r6, $r16) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stored events found in dir: ") in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r15) in <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>
SPECIAL edge: $i2 = specialinvoke r0.<io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()>
SPECIAL edge: specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not adding Event because at least ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" events are already stored: ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke r5.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r6 = virtualinvoke r5.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r48 = virtualinvoke r5.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r36.<org.slf4j.Logger: void warn(java.lang.String)>($r43) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <org.slf4j.Logger: void warn(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.util.UUID: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".sentry-event") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, $r10) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r32 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r15 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not adding Event to offline storage because it already exists: ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r30.<org.slf4j.Logger: void trace(java.lang.String)>($r34) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding Event to offline storage: ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String)>($r17) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r1) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r18.<java.io.FileOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r18.<java.io.FileOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r18.<java.io.FileOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.FileOutputStream: void close()>
SPECIAL edge: specialinvoke $r19.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r18) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r19.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r5) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r19.<java.io.ObjectOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.ObjectOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.ObjectOutputStream: void close()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r61.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r57) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r55.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r51) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r45.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing Event to offline storage: ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r46.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r50, $r44) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stored events are now in dir: ") in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String)>($r28) in <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r4.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.UUID: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".sentry-event") in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9) in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r14 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: virtualinvoke $r0.<java.io.File: boolean delete()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding Event from offline storage: ") in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r16) in <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>() in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <java.io.File: java.io.File[] listFiles()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<io.sentry.buffer.DiskBuffer$1: void <init>(io.sentry.buffer.DiskBuffer,java.util.Iterator)>(r0, r4) in <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()> ==> <io.sentry.buffer.DiskBuffer$1: void <init>(io.sentry.buffer.DiskBuffer,java.util.Iterator)>
CLINIT edge: $r5 = staticinvoke <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>($r4, $r3) in <io.sentry.buffer.DiskBuffer$1: void <init>(io.sentry.buffer.DiskBuffer,java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>($r4, $r3) in <io.sentry.buffer.DiskBuffer$1: void <init>(io.sentry.buffer.DiskBuffer,java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Date: java.lang.Object clone()>() in <io.sentry.event.Event: java.util.Date getTimestamp()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.Event: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.Event: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.util.UUID: boolean equals(java.lang.Object)>($r5) in <io.sentry.event.Event: boolean equals(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.UUID: int hashCode()>() in <io.sentry.event.Event: int hashCode()> ==> <java.util.UUID: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event{level=") in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", message=\'") in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", logger=\'") in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.Event: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>() in <io.sentry.buffer.DiskBuffer$1: void remove()> ==> <java.lang.UnsupportedOperationException: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.buffer.DiskBuffer$1: io.sentry.event.Event next()>() in <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()> ==> <io.sentry.buffer.DiskBuffer$1: io.sentry.event.Event next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.text.MessageFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.Sdk: void <init>(java.lang.String,java.lang.String,java.util.Set)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while closing the connection.", $r4) in <io.sentry.connection.AsyncConnection$ShutDownHook: void run()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AsyncConnection: void addShutdownHook()>() in <io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)> ==> <io.sentry.connection.AsyncConnection: void addShutdownHook()>
SPECIAL edge: specialinvoke $r1.<io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection,io.sentry.connection.AsyncConnection$1)>(r0, null) in <io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)> ==> <io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection,io.sentry.connection.AsyncConnection$1)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.sentry.connection.AsyncConnection: void addShutdownHook()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
SPECIAL edge: specialinvoke $r1.<io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event,io.sentry.connection.AsyncConnection$1)>(r0, r2, null) in <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event,io.sentry.connection.AsyncConnection$1)>
EXECUTOR edge: interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1) in <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AsyncConnection$EventSubmitter: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1) in <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)> ==> <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AbstractConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AsyncConnection: void doClose()>() in <io.sentry.connection.AsyncConnection: void close()> ==> <io.sentry.connection.AsyncConnection: void doClose()>
CLINIT edge: $r0 = <io.sentry.connection.AsyncConnection: org.slf4j.Logger logger> in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
STATIC edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r17 = <io.sentry.connection.AsyncConnection: org.slf4j.Logger logger> in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("Thread already managed by Sentry") in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <io.sentry.environment.SentryEnvironment: void startManagingThread()> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("Thread not yet managed by Sentry") in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <io.sentry.environment.SentryEnvironment: void stopManagingThread()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.environment.SentryEnvironment: boolean isManagingThread()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>() in <io.sentry.environment.SentryEnvironment: boolean isManagingThread()> ==> <java.util.concurrent.atomic.AtomicInteger: int get()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sentry-java/") in <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>($r3) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>($r3) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>($r3) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>($r3) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("The connection to Sentry is currently locked down.", $r8) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while sending the event to Sentry.", $r6) in <io.sentry.connection.AsyncConnection$EventSubmitter: void run()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <io.sentry.connection.ConnectionException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.sentry.connection.ConnectionException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1) in <io.sentry.connection.ConnectionException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.sentry.connection.LockedDownException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r0.<org.slf4j.Logger: void trace(java.lang.String)>("Running Flusher") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.sentry.buffer.Buffer: java.util.Iterator getEvents()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.buffer.DiskBuffer: java.util.Iterator getEvents()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke r8.<io.sentry.event.Event: java.util.Date getTimestamp()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.event.Event: java.util.Date getTimestamp()>
VIRTUAL edge: $r13 = virtualinvoke r8.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r20 = virtualinvoke r8.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r36 = virtualinvoke r8.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: l1 = virtualinvoke $r9.<java.util.Date: long getTime()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring buffered event because it only ") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms old.") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r23.<org.slf4j.Logger: void trace(java.lang.String)>($r28) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flusher attempting to send Event: ") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String)>($r15) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
VIRTUAL edge: virtualinvoke $r16.<io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>(r8) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flusher successfully sent Event: ") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void trace(java.lang.String)>($r22) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flusher failed to send Event: ") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r38, $r31) in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r39.<org.slf4j.Logger: void trace(java.lang.String)>("Flusher run exiting early.") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String)>("Flusher run exiting, no more events to send.") in <io.sentry.connection.BufferedConnection$Flusher: void run()> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.BufferedConnection$1)>(r0, null) in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.BufferedConnection$1)>
SPECIAL edge: specialinvoke $r2.<io.sentry.connection.BufferedConnection$1: void <init>(io.sentry.connection.BufferedConnection)>(r0) in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <io.sentry.connection.BufferedConnection$1: void <init>(io.sentry.connection.BufferedConnection)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r12) in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
SPECIAL edge: specialinvoke $r6.<io.sentry.connection.BufferedConnection$Flusher: void <init>(io.sentry.connection.BufferedConnection,long)>(r0, l1) in <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)> ==> <io.sentry.connection.BufferedConnection$Flusher: void <init>(io.sentry.connection.BufferedConnection,long)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r1) in <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r1) in <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r1) in <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r1) in <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r3.<io.sentry.buffer.Buffer: void discard(io.sentry.event.Event)>(r1) in <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void discard(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AbstractConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("Gracefully shutting down Sentry buffer threads.") in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Still waiting on buffer flusher executor to terminate.") in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Graceful shutdown took too much time, forcing the shutdown.") in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
INTERFACE edge: $i3 = interfaceinvoke r24.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r24.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r24.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} tasks failed to execute before the shutdown.", $r8) in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r25.<org.slf4j.Logger: void debug(java.lang.String)>("Shutdown finished.") in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r26.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.NoopConnection: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.lang.Thread: void interrupt()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.lang.Thread: void interrupt()>
INTERFACE edge: interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>("Graceful shutdown interrupted, forcing the shutdown.") in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
INTERFACE edge: $i4 = interfaceinvoke r20.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r20.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r20.<java.util.List: int size()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r21.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} tasks failed to execute before the shutdown.", $r22) in <io.sentry.connection.BufferedConnection: void close()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r23.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.NoopConnection: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection: void close()> ==> <io.sentry.connection.NoopConnection: void close()>
SPECIAL edge: specialinvoke $r0.<io.sentry.connection.BufferedConnection$2: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.Connection)>(r1, r2) in <io.sentry.connection.BufferedConnection: io.sentry.connection.Connection wrapConnectionWithBufferWriter(io.sentry.connection.Connection)> ==> <io.sentry.connection.BufferedConnection$2: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.Connection)>
VIRTUAL edge: virtualinvoke $r1.<io.sentry.connection.BufferedConnection: void close()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while closing the connection.", $r4) in <io.sentry.connection.BufferedConnection$ShutDownHook: void run()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1) in <io.sentry.connection.BufferedConnection$1: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(1) in <io.sentry.connection.BufferedConnection$1: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void setDaemon(boolean)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.buffer.Buffer: void add(io.sentry.event.Event)>(r3) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer: void add(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred while attempting to add Event to buffer: ", $r5) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r3) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r4.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r3) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r4.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r3) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r4.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r3) in <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AbstractConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.BufferedConnection$2: void close()> ==> <io.sentry.connection.NoopConnection: void close()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>(r1, r2) in <io.sentry.connection.HttpConnection: void <init>(java.net.URL,java.lang.String,java.lang.String,java.net.Proxy,io.sentry.connection.EventSampler)> ==> <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = new io.sentry.connection.LockdownManager in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <io.sentry.connection.LockdownManager: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>
CLINIT edge: $r5 = staticinvoke <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>() in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("api/") in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/store/") in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.net.URL: void <init>(java.lang.String)>(r11) in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.net.URL: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t build a valid URL from the Sentry API.", $r9) in <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<io.sentry.connection.LockdownManager: boolean isLockedDown()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.LockdownManager: boolean isLockedDown()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping an Event due to lockdown: ") in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<io.sentry.connection.LockedDownException: void <init>(java.lang.String)>($r10) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.LockedDownException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.connection.AbstractConnection: void doSend(io.sentry.event.Event)>(r2) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.connection.AbstractConnection: void doSend(io.sentry.event.Event)>(r2) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.NoopConnection: void doSend(io.sentry.event.Event)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.connection.AbstractConnection: void doSend(io.sentry.event.Event)>(r2) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)>
INTERFACE edge: r33 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An exception occurred while running an EventSendCallback.onSuccess: ") in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r32, $r25) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r4.<io.sentry.connection.LockdownManager: void resetState()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.LockdownManager: void resetState()>
INTERFACE edge: r37 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r22 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An exception occurred while running an EventSendCallback.onFailure: ") in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r19, $r11) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("An exception due to the connection occurred, a lockdown will be initiated.", $r23) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r21.<io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)>($r23) in <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)> ==> <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)>
CLINIT edge: $r1 = <io.sentry.connection.OutputStreamConnection: java.nio.charset.Charset UTF_8> in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.OutputStreamConnection: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.connection.OutputStreamConnection: java.nio.charset.Charset UTF_8> in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r13) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r13) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: <io.sentry.connection.OutputStreamConnection: java.nio.charset.Charset UTF_8> = $r0 in <io.sentry.connection.OutputStreamConnection: void <clinit>()> ==> <io.sentry.connection.OutputStreamConnection: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") in <io.sentry.connection.OutputStreamConnection: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: <io.sentry.connection.OutputStreamConnection: java.nio.charset.Charset UTF_8> = $r0 in <io.sentry.connection.OutputStreamConnection: void <clinit>()> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.sentry.connection.AbstractConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<io.sentry.time.SystemClock: void <init>()>() in <io.sentry.connection.LockdownManager: void <init>()> ==> <io.sentry.time.SystemClock: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.LockdownManager: void <init>(io.sentry.time.Clock)>($r1) in <io.sentry.connection.LockdownManager: void <init>()> ==> <io.sentry.connection.LockdownManager: void <init>(io.sentry.time.Clock)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.LockdownManager: void <init>(io.sentry.time.Clock)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $l0 = interfaceinvoke $r2.<io.sentry.time.Clock: long millis()>() in <io.sentry.connection.LockdownManager: boolean isLockedDown()> ==> <io.sentry.time.SystemClock: long millis()>
INTERFACE edge: $l0 = interfaceinvoke $r2.<io.sentry.time.Clock: long millis()>() in <io.sentry.connection.LockdownManager: boolean isLockedDown()> ==> <io.sentry.time.FixedClock: long millis()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<java.util.Date: long getTime()>() in <io.sentry.connection.LockdownManager: boolean isLockedDown()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.connection.LockdownManager: boolean isLockedDown()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <io.sentry.connection.LockdownManager: boolean isLockedDown()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.connection.ConnectionException: java.lang.Long getRecommendedLockdownTime()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <io.sentry.connection.ConnectionException: java.lang.Long getRecommendedLockdownTime()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.connection.ConnectionException: java.lang.Long getRecommendedLockdownTime()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <io.sentry.connection.ConnectionException: java.lang.Long getRecommendedLockdownTime()>
VIRTUAL edge: $l5 = virtualinvoke $r3.<java.lang.Long: long longValue()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <java.lang.Long: long longValue()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.sentry.time.Clock: java.util.Date date()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <io.sentry.time.SystemClock: java.util.Date date()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.sentry.time.Clock: java.util.Date date()>() in <io.sentry.connection.LockdownManager: void setState(io.sentry.connection.ConnectionException)> ==> <io.sentry.time.FixedClock: java.util.Date date()>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void <init>(java.io.OutputStream)> ==> <java.io.OutputStream: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <java.io.ObjectOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <java.util.zip.DeflaterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[])> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[])> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.io.ObjectOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.util.zip.GZIPOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[],int,int)> ==> <java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <java.io.ObjectOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()> ==> <java.util.zip.DeflaterOutputStream: void flush()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.time.SystemClock: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.Date: void <init>()>() in <io.sentry.time.SystemClock: java.util.Date date()> ==> <java.util.Date: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>(null, null) in <io.sentry.connection.NoopConnection: void <init>()> ==> <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.Random: void <init>()>() in <io.sentry.connection.RandomEventSampler: void <init>(double)> ==> <java.util.Random: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.RandomEventSampler: void <init>(double,java.util.Random)>(d0, $r1) in <io.sentry.connection.RandomEventSampler: void <init>(double)> ==> <io.sentry.connection.RandomEventSampler: void <init>(double,java.util.Random)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.RandomEventSampler: void <init>(double,java.util.Random)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>() in <io.sentry.connection.RandomEventSampler: boolean shouldSendEvent(io.sentry.event.Event)> ==> <java.util.Random: double nextDouble()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.context.SingletonContextManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.context.Context: void <init>()>() in <io.sentry.context.SingletonContextManager: void <init>()> ==> <io.sentry.context.Context: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<io.sentry.context.Context: void clear()>() in <io.sentry.context.SingletonContextManager: void clear()> ==> <io.sentry.context.Context: void clear()>
SPECIAL edge: specialinvoke r0.<io.sentry.context.Context: void <init>(int)>(100) in <io.sentry.context.Context: void <init>()> ==> <io.sentry.context.Context: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.context.Context: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<io.sentry.util.CircularFifoQueue: boolean isEmpty()>() in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<io.sentry.util.CircularFifoQueue: int size()>() in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <io.sentry.util.CircularFifoQueue: int size()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0) in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r7) in <io.sentry.context.Context: java.util.List getBreadcrumbs()> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getTags()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <io.sentry.context.Context: java.util.Map getExtra()> ==> <java.util.WeakHashMap: boolean isEmpty()>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>()>() in <io.sentry.context.Context: void addTag(java.lang.String,java.lang.String)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addTag(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addTag(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addTag(java.lang.String,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>()>() in <io.sentry.context.Context: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.context.Context: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<io.sentry.util.CircularFifoQueue: void <init>(int)>($i0) in <io.sentry.context.Context: void recordBreadcrumb(io.sentry.event.Breadcrumb)> ==> <io.sentry.util.CircularFifoQueue: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)>(r2) in <io.sentry.context.Context: void recordBreadcrumb(io.sentry.event.Breadcrumb)> ==> <io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.context.Context: void setUser(io.sentry.event.User)>(null) in <io.sentry.context.Context: void clearUser()> ==> <io.sentry.context.Context: void setUser(io.sentry.event.User)>
SPECIAL edge: specialinvoke r0.<io.sentry.util.CircularFifoQueue: void <init>(int)>(32) in <io.sentry.util.CircularFifoQueue: void <init>()> ==> <io.sentry.util.CircularFifoQueue: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <io.sentry.util.CircularFifoQueue: void <init>(int)> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size must be greater than 0") in <io.sentry.util.CircularFifoQueue: void <init>(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.concurrent.LinkedBlockingDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke r0.<io.sentry.util.CircularFifoQueue: void <init>(int)>($i0) in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean addAll(java.util.Collection)>(r1) in <io.sentry.util.CircularFifoQueue: void <init>(java.util.Collection)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: int size()>() in <io.sentry.util.CircularFifoQueue: boolean isEmpty()> ==> <io.sentry.util.CircularFifoQueue: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: int size()>() in <io.sentry.util.CircularFifoQueue: boolean isAtFullCapacity()> ==> <io.sentry.util.CircularFifoQueue: int size()>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Attempted to add null object to queue") in <io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.sentry.util.CircularFifoQueue: boolean isAtFullCapacity()>() in <io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)> ==> <io.sentry.util.CircularFifoQueue: boolean isAtFullCapacity()>
VIRTUAL edge: virtualinvoke r1.<io.sentry.util.CircularFifoQueue: java.lang.Object remove()>() in <io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object remove()>
VIRTUAL edge: i0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: int size()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <io.sentry.util.CircularFifoQueue: int size()>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r5) in <io.sentry.util.CircularFifoQueue: java.lang.Object get(int)> ==> <java.util.NoSuchElementException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)>(r1) in <io.sentry.util.CircularFifoQueue: boolean offer(java.lang.Object)> ==> <io.sentry.util.CircularFifoQueue: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean isEmpty()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object poll()> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: java.lang.Object remove()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object poll()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object remove()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean isEmpty()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object element()> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: java.lang.Object peek()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object element()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object peek()>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty") in <io.sentry.util.CircularFifoQueue: java.lang.Object element()> ==> <java.util.NoSuchElementException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean isEmpty()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object peek()> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue: boolean isEmpty()>() in <io.sentry.util.CircularFifoQueue: java.lang.Object remove()> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
SPECIAL edge: specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty") in <io.sentry.util.CircularFifoQueue: java.lang.Object remove()> ==> <java.util.NoSuchElementException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.sentry.util.CircularFifoQueue$1: void <init>(io.sentry.util.CircularFifoQueue)>(r1) in <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()> ==> <io.sentry.util.CircularFifoQueue$1: void <init>(io.sentry.util.CircularFifoQueue)>
STATIC edge: $i0 = staticinvoke <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>($r2) in <io.sentry.util.CircularFifoQueue$1: void <init>(io.sentry.util.CircularFifoQueue)> ==> <io.sentry.util.CircularFifoQueue: int access$000(io.sentry.util.CircularFifoQueue)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.CircularFifoQueue: boolean access$100(io.sentry.util.CircularFifoQueue)>($r3) in <io.sentry.util.CircularFifoQueue$1: void <init>(io.sentry.util.CircularFifoQueue)> ==> <io.sentry.util.CircularFifoQueue: boolean access$100(io.sentry.util.CircularFifoQueue)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r1, r2, r3, r4, null) in <io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.Breadcrumb: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.util.CircularFifoQueue$1: boolean hasNext()>() in <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
SPECIAL edge: specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>() in <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r32.<java.lang.IllegalStateException: void <init>()>() in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <java.lang.IllegalStateException: void <init>()>
VIRTUAL edge: virtualinvoke $r30.<io.sentry.util.CircularFifoQueue: java.lang.Object remove()>() in <io.sentry.util.CircularFifoQueue$1: void remove()> ==> <io.sentry.util.CircularFifoQueue: java.lang.Object remove()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.text.MessageFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Type: io.sentry.event.Breadcrumb$Type[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.text.MessageFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.sentry.event.Breadcrumb$Level: io.sentry.event.Breadcrumb$Level[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>($r4, r2, $r9, 0L) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Thread: boolean isDaemon()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: boolean isDaemon()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(1) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.Thread: int getPriority()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: int getPriority()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>($i3) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void setPriority(int)>
SPECIAL edge: specialinvoke r0.<io.sentry.SentryClientFactory: void <init>()>() in <io.sentry.DefaultSentryClientFactory: void <init>()> ==> <io.sentry.SentryClientFactory: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)>(r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.DefaultSentryClientFactory: io.sentry.context.ContextManager getContextManager(io.sentry.dsn.Dsn)>(r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.context.ContextManager getContextManager(io.sentry.dsn.Dsn)>
VIRTUAL edge: $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r11 = virtualinvoke r1.<io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)>($r0, r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r0.<io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)>($r3, $r4) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)>($r9) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)>($r10) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r9.<io.sentry.event.helper.HttpEventBuilderHelper: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.event.helper.HttpEventBuilderHelper: void <init>()>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("The current environment doesn\'t provide access to servlets, or provides an unsupported version.") in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<io.sentry.event.helper.ContextBuilderHelper: void <init>(io.sentry.SentryClient)>($r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)> ==> <io.sentry.event.helper.ContextBuilderHelper: void <init>(io.sentry.SentryClient)>
CLINIT edge: $r2 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r22 = new io.sentry.connection.BufferedConnection in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.BufferedConnection: void <clinit>()>
CLINIT edge: r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r14 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r14 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r16 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r16 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r2 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: staticinvoke <io.sentry.jvmti.FrameCache: void addAppPackage(java.lang.String)>(r31) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.jvmti.FrameCache: void <clinit>()>
STATIC edge: staticinvoke <io.sentry.jvmti.FrameCache: void addAppPackage(java.lang.String)>(r31) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.jvmti.FrameCache: void addAppPackage(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.SentryClientFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.sentry.DefaultSentryClientFactory: void <init>()>() in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.DefaultSentryClientFactory: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>() in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating SentryClient using factory class: \'") in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.") in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r5) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r15 = virtualinvoke r13.<io.sentry.SentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)>(r1) in <io.sentry.SentryClientFactory: io.sentry.SentryClient sentryClient(java.lang.String,io.sentry.SentryClientFactory)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient createSentryClient(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SentryClientFactory{name=\'") in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.SentryClientFactory: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.HashSet: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <io.sentry.SentryClient: void <init>(io.sentry.connection.Connection,io.sentry.context.ContextManager)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<io.sentry.event.helper.EventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)>(r5) in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.event.helper.HttpEventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)>
INTERFACE edge: interfaceinvoke r4.<io.sentry.event.helper.EventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)>(r5) in <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)> ==> <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)>
INTERFACE edge: r21 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r3.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r2) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r3.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r2) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.connection.AsyncConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r3.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r2) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.connection.AbstractConnection: void send(io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r3.<io.sentry.connection.Connection: void send(io.sentry.event.Event)>(r2) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.connection.BufferedConnection$2: void send(io.sentry.event.Event)>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: $r19 = virtualinvoke r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: $r15 = virtualinvoke r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: $r11 = virtualinvoke r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: $r5 = virtualinvoke r2.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r20 = virtualinvoke r2.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r16 = virtualinvoke r2.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r12 = virtualinvoke r2.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: virtualinvoke $r4.<io.sentry.context.Context: void setLastEventId(java.util.UUID)>($r5) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.context.Context: void setLastEventId(java.util.UUID)>
INTERFACE edge: interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("The connection to Sentry is currently locked down.", $r17) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r19.<io.sentry.context.Context: void setLastEventId(java.util.UUID)>($r20) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.context.Context: void setLastEventId(java.util.UUID)>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while sending the event to Sentry.", $r13) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r15.<io.sentry.context.Context: void setLastEventId(java.util.UUID)>($r16) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.context.Context: void setLastEventId(java.util.UUID)>
VIRTUAL edge: virtualinvoke $r11.<io.sentry.context.Context: void setLastEventId(java.util.UUID)>($r12) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)> ==> <io.sentry.context.Context: void setLastEventId(java.util.UUID)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withRelease(java.lang.String)>($r26) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withRelease(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withDist(java.lang.String)>($r30) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withDist(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withEnvironment(java.lang.String)>($r23) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withEnvironment(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withServerName(java.lang.String)>($r20) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withServerName(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>($r15, $r17) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>($r10, $r11) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>
VIRTUAL edge: r37 = virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.Event build()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.Event build()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.String: java.lang.String trim()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String trim()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.lang.String: java.lang.String trim()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r33 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z5 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r13 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r35 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r8 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)>(r7) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.SentryClient: void runBuilderHelpers(io.sentry.event.EventBuilder)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)>(r37) in <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.EventBuilder: void <init>()>() in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.event.EventBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>(r1) in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r2.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>($r3) in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>
VIRTUAL edge: virtualinvoke r5.<io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>(r4) in <io.sentry.SentryClient: void sendMessage(java.lang.String)> ==> <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.EventBuilder: void <init>()>() in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>($r2) in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>($r4) in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>
SPECIAL edge: specialinvoke $r6.<io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>(r1) in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>
VIRTUAL edge: r7 = virtualinvoke $r5.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r6) in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>(r7) in <io.sentry.SentryClient: void sendException(java.lang.Throwable)> ==> <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Removing \'{}\' from the list of builder helpers.", r0) in <io.sentry.SentryClient: void removeBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r0) in <io.sentry.SentryClient: void removeBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r0) in <io.sentry.SentryClient: void removeBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r0) in <io.sentry.SentryClient: void removeBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Adding \'{}\' to the list of builder helpers.", r0) in <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <io.sentry.SentryClient: void addBuilderHelper(io.sentry.event.helper.EventBuilderHelper)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<io.sentry.SentryUncaughtExceptionHandler: void disable()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.SentryUncaughtExceptionHandler: void disable()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void close()>() in <io.sentry.SentryClient: void closeConnection()> ==> <io.sentry.connection.NoopConnection: void close()>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t close the Sentry connection", $r4) in <io.sentry.SentryClient: void closeConnection()> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.context.ContextManager: void clear()>() in <io.sentry.SentryClient: void clearContext()> ==> <io.sentry.context.ThreadLocalContextManager: void clear()>
INTERFACE edge: interfaceinvoke $r1.<io.sentry.context.ContextManager: void clear()>() in <io.sentry.SentryClient: void clearContext()> ==> <io.sentry.context.SingletonContextManager: void clear()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.sentry.context.ContextManager: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: io.sentry.context.Context getContext()> ==> <io.sentry.context.SingletonContextManager: io.sentry.context.Context getContext()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.sentry.context.ContextManager: io.sentry.context.Context getContext()>() in <io.sentry.SentryClient: io.sentry.context.Context getContext()> ==> <io.sentry.context.ThreadLocalContextManager: io.sentry.context.Context getContext()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addTag(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addTag(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addTag(java.lang.String,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.sentry.SentryClient: void setTags(java.util.Map)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.SentryClient: void setMdcTags(java.util.Set)>(r1) in <io.sentry.SentryClient: void setExtraTags(java.util.Set)> ==> <io.sentry.SentryClient: void setMdcTags(java.util.Set)>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <io.sentry.SentryClient: void setMdcTags(java.util.Set)> ==> <java.util.HashSet: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.SentryClient: void addMdcTag(java.lang.String)>(r1) in <io.sentry.SentryClient: void addExtraTag(java.lang.String)> ==> <io.sentry.SentryClient: void addMdcTag(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.sentry.SentryClient: void addMdcTag(java.lang.String)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.SentryClient: void addExtra(java.lang.String,java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.sentry.SentryClient: void setExtra(java.util.Map)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.SentryClient: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.SentryClient: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AsyncConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.SentryClient: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.AbstractConnection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<io.sentry.connection.Connection: void addEventSendCallback(io.sentry.connection.EventSendCallback)>(r1) in <io.sentry.SentryClient: void addEventSendCallback(io.sentry.connection.EventSendCallback)> ==> <io.sentry.connection.BufferedConnection$2: void addEventSendCallback(io.sentry.connection.EventSendCallback)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.sentry.SentryClient: void addShouldSendEventCallback(io.sentry.event.helper.ShouldSendEventCallback)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SentryClient{release=\'") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dist=\'") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", environment=\'") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", serverName=\'") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tags=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mdcTags=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extra=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", connection=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", builderHelpers=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", contextManager=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uncaughtExceptionHandler=") in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.SentryClient: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void <init>(java.net.URI)>($r2) in <io.sentry.dsn.Dsn: void <init>(java.lang.String)> ==> <io.sentry.dsn.Dsn: void <init>(java.net.URI)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void extractUserKeys(java.net.URI)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void extractUserKeys(java.net.URI)>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void extractHostInfo(java.net.URI)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void extractHostInfo(java.net.URI)>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void extractOptions(java.net.URI)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void makeOptionsImmutable()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void makeOptionsImmutable()>
SPECIAL edge: specialinvoke r0.<io.sentry.dsn.Dsn: void validate()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.Dsn: void validate()>
SPECIAL edge: specialinvoke $r8.<io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String)>("DSN constructed with null value!") in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashSet: void <init>()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>($r7, null, $r6, $i0, $r5, null, null) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible to determine Sentry\'s URI from the DSN \'") in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r9) in <io.sentry.dsn.Dsn: void <init>(java.net.URI)> ==> <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String,java.lang.Throwable)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2) in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: r5 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r4, "UTF-8") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
STATIC edge: $r19 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r10, "UTF-8") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.dsn.Dsn: void makeOptionsImmutable()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3) in <io.sentry.dsn.Dsn: void makeOptionsImmutable()> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <io.sentry.dsn.Dsn: void makeOptionsImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
INTERFACE edge: interfaceinvoke $r0.<org.slf4j.Logger: void warn(java.lang.String)>("*** Couldn\'t find a suitable DSN, Sentry operations will do nothing! See documentation: https://docs.sentry.io/clients/java/ ***") in <io.sentry.dsn.Dsn: java.lang.String dsnLookup()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r8.<java.util.Map: boolean equals(java.lang.Object)>($r7) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r8.<java.util.Map: boolean equals(java.lang.Object)>($r7) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z4 = interfaceinvoke $r16.<java.util.Set: boolean equals(java.lang.Object)>($r15) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r17) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r19) in <io.sentry.dsn.Dsn: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: i8 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <io.sentry.dsn.Dsn: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() in <io.sentry.dsn.Dsn: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r3.<java.lang.String: int hashCode()>() in <io.sentry.dsn.Dsn: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i7 = virtualinvoke $r4.<java.lang.String: int hashCode()>() in <io.sentry.dsn.Dsn: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.dsn.Dsn: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dsn{uri=") in <io.sentry.dsn.Dsn: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.sentry.dsn.Dsn: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.dsn.Dsn: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.dsn.Dsn: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: r2 = virtualinvoke r1.<io.sentry.event.interfaces.StackTraceInterface: io.sentry.event.interfaces.SentryStackTraceElement[] getStackTrace()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.event.interfaces.StackTraceInterface: io.sentry.event.interfaces.SentryStackTraceElement[] getStackTrace()>
VIRTUAL edge: i2 = virtualinvoke r1.<io.sentry.event.interfaces.StackTraceInterface: int getFramesCommonWithEnclosing()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.event.interfaces.StackTraceInterface: int getFramesCommonWithEnclosing()>
SPECIAL edge: specialinvoke r3.<io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)>(r0, $r4, $z0) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)>(r1, $r3) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.StackTraceInterface)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3) in <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2) in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...") in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.jvmti.FrameCache: void add(java.lang.Throwable,io.sentry.jvmti.Frame[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.jvmti.FrameCache: void add(java.lang.Throwable,io.sentry.jvmti.Frame[])> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.jvmti.FrameCache: void add(java.lang.Throwable,io.sentry.jvmti.Frame[])> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.jvmti.FrameCache: void add(java.lang.Throwable,io.sentry.jvmti.Frame[])> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <io.sentry.jvmti.FrameCache: io.sentry.jvmti.Frame[] get(java.lang.Throwable)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.HashSet: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r7 = virtualinvoke r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r13 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getClassName()>() in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.lang.StackTraceElement: java.lang.String getClassName()>
VIRTUAL edge: $z2 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>(r12) in <io.sentry.jvmti.FrameCache: boolean shouldCacheThrowable(java.lang.Throwable,int)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0) in <io.sentry.jvmti.FrameCache: void addAppPackage(java.lang.String)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {}={} in JNDI.", r2, r35) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JNDI is not available: ") in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r30.<org.slf4j.Logger: void trace(java.lang.String)>($r34) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sentry.") in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r12 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "_") in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {}={} in Java System Properties.", r2, r35) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SENTRY_") in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toUpperCase()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {}={} in System Environment Variables.", r2, r35) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r6.<io.sentry.dsn.Dsn: java.util.Map getOptions()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.util.Map getOptions()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {}={} in DSN.", r2, r35) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: r35 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r2) in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke r35.<java.lang.String: java.lang.String trim()>() in <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.lang.String getId()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getId()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.lang.String getUsername()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getUsername()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.lang.String getEmail()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getEmail()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.lang.String getIpAddress()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getIpAddress()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.util.Map getData()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.util.Map getData()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.util.Map getData()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.util.Map getData()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.sentry.event.interfaces.UserInterface: java.util.Map getData()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.event.interfaces.UserInterface: java.util.Map getData()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)>(r1, $r3) in <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.UserInterface)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.helper.HttpEventBuilderHelper: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>() in <io.sentry.event.helper.HttpEventBuilderHelper: void <init>()> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.helper.HttpEventBuilderHelper: void <init>(io.sentry.event.helper.RemoteAddressResolver)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r1.<io.sentry.event.helper.HttpEventBuilderHelper: void addHttpInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)>(r2, r0) in <io.sentry.event.helper.HttpEventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.helper.HttpEventBuilderHelper: void addHttpInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)>
SPECIAL edge: specialinvoke r1.<io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)>(r2, r0) in <io.sentry.event.helper.HttpEventBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)>
SPECIAL edge: specialinvoke r0.<java.net.Authenticator: void <init>()>() in <io.sentry.connection.ProxyAuthenticator: void <init>(java.lang.String,java.lang.String)> ==> <java.net.Authenticator: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("data") in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("cookies") in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("headers") in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("env") in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getRequestUrl()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getRequestUrl()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getMethod()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getMethod()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.util.Map getParameters()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.util.Map getParameters()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getBody()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getBody()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getQueryString()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getQueryString()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.util.Map getCookies()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.util.Map getCookies()>
VIRTUAL edge: $r9 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.util.Map getHeaders()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.util.Map getHeaders()>
SPECIAL edge: specialinvoke r4.<io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)>(r0, $r5, $r6) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)>
SPECIAL edge: specialinvoke r4.<io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r8) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r9) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)>(r0, r1) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)>
STATIC edge: $r14 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>(r2, 2048) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)>(r1, $r3) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void <init>(io.sentry.marshaller.json.InterfaceBinding)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.sentry.event.interfaces.ExceptionInterface: java.util.Deque getExceptions()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.util.Deque getExceptions()>
VIRTUAL edge: virtualinvoke r2.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
VIRTUAL edge: virtualinvoke r2.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Deque: java.util.Iterator descendingIterator()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <java.util.LinkedList: java.util.Iterator descendingIterator()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Deque: java.util.Iterator descendingIterator()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator descendingIterator()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Deque: java.util.Iterator descendingIterator()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <java.util.ArrayDeque: java.util.Iterator descendingIterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
SPECIAL edge: specialinvoke r4.<io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)>(r2, $r6) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)> ==> <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)>(r1, $r3) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.ExceptionInterface)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)>(r0, r2) in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)>(r1, $r3) in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.JsonMarshaller: void <init>(int)>(1000) in <io.sentry.marshaller.json.JsonMarshaller: void <init>()> ==> <io.sentry.marshaller.json.JsonMarshaller: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.JsonMarshaller: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.fasterxml.jackson.core.JsonFactory: void <init>()>() in <io.sentry.marshaller.json.JsonMarshaller: void <init>(int)> ==> <com.fasterxml.jackson.core.JsonFactory: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.sentry.marshaller.json.JsonMarshaller: void <init>(int)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r32.<io.sentry.marshaller.Marshaller$UncloseableOutputStream: void <init>(java.io.OutputStream)>(r24) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r33.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r35) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream)>($r36) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r34.<io.sentry.marshaller.json.SentryJsonGenerator: void <init>(com.fasterxml.jackson.core.JsonGenerator)>($r4) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void <init>(com.fasterxml.jackson.core.JsonGenerator)>
VIRTUAL edge: virtualinvoke $r34.<io.sentry.marshaller.json.SentryJsonGenerator: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void close()>
VIRTUAL edge: virtualinvoke $r34.<io.sentry.marshaller.json.SentryJsonGenerator: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void close()>
VIRTUAL edge: virtualinvoke $r34.<io.sentry.marshaller.json.SentryJsonGenerator: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void close()>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)>($r34, r5) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)>
VIRTUAL edge: virtualinvoke $r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.util.zip.DeflaterOutputStream: void close()>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while serialising the event.", $r16) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while serialising the event.", $r14) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.util.zip.DeflaterOutputStream: void close()>
INTERFACE edge: interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while serialising the event.", $r12) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r39.<java.io.OutputStream: void close()>() in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <java.util.zip.DeflaterOutputStream: void close()>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("An exception occurred while serialising the event.", $r7) in <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r7 = <io.sentry.marshaller.json.JsonMarshaller: java.lang.ThreadLocal ISO_FORMAT> in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r5, $i0) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.marshaller.json.JsonMarshaller: boolean isCompressed()>() in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String getContentEncoding()> ==> <io.sentry.marshaller.json.JsonMarshaller: boolean isCompressed()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.helper.ContextBuilderHelper: void <init>(io.sentry.SentryClient)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: r3 = virtualinvoke r2.<io.sentry.context.Context: java.util.List getBreadcrumbs()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.context.Context: java.util.List getBreadcrumbs()>
VIRTUAL edge: $r4 = virtualinvoke r2.<io.sentry.context.Context: io.sentry.event.User getUser()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.context.Context: io.sentry.event.User getUser()>
VIRTUAL edge: $r21 = virtualinvoke r2.<io.sentry.context.Context: io.sentry.event.User getUser()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.context.Context: io.sentry.event.User getUser()>
VIRTUAL edge: r5 = virtualinvoke r2.<io.sentry.context.Context: java.util.Map getTags()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.context.Context: java.util.Map getTags()>
VIRTUAL edge: r27 = virtualinvoke r2.<io.sentry.context.Context: java.util.Map getExtra()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.context.Context: java.util.Map getExtra()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withBreadcrumbs(java.util.List)>(r3) in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withBreadcrumbs(java.util.List)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r22) in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>($r17, $r19) in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>($r11, $r12) in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>
SPECIAL edge: $r22 = specialinvoke r0.<io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)>($r21) in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r14 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r14 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r14 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r25 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r6 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r28 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.helper.ContextBuilderHelper: void helpBuildingEvent(io.sentry.event.EventBuilder)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.context.ThreadLocalContextManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.context.ThreadLocalContextManager$1: void <init>(io.sentry.context.ThreadLocalContextManager)>(r0) in <io.sentry.context.ThreadLocalContextManager: void <init>()> ==> <io.sentry.context.ThreadLocalContextManager$1: void <init>(io.sentry.context.ThreadLocalContextManager)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.context.ThreadLocalContextManager: io.sentry.context.Context getContext()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>() in <io.sentry.context.ThreadLocalContextManager: void clear()> ==> <java.lang.ThreadLocal: void remove()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r11) in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.MessageInterface: java.lang.String getMessage()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String getMessage()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.interfaces.MessageInterface: java.util.List getParameters()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.event.interfaces.MessageInterface: java.util.List getParameters()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.MessageInterface: java.lang.String getFormatted()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String getFormatted()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.sentry.event.interfaces.MessageInterface: java.lang.String getFormatted()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String getFormatted()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)>(r1, $r3) in <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.MessageInterface)>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>(null, null) in <io.sentry.connection.OutputStreamConnection: void <init>(java.io.OutputStream)> ==> <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <io.sentry.connection.OutputStreamConnection: void close()> ==> <java.util.zip.DeflaterOutputStream: void close()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String,java.util.Map)>(r1, r2, r3, i0, r4, r5, r6, null) in <io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String,java.util.Map)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.sentry.jvmti.Frame: java.lang.reflect.Method getMethod()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <io.sentry.jvmti.Frame: java.lang.reflect.Method getMethod()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <java.lang.reflect.Method: java.lang.String getName()>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <java.lang.StackTraceElement: java.lang.String getMethodName()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r9 = virtualinvoke $r4.<io.sentry.jvmti.Frame: java.util.Map getLocals()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement[] fromStackTraceElements(java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <io.sentry.jvmti.Frame: java.util.Map getLocals()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryStackTraceElement: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SentryStackTraceElement{module=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", function=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fileName=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lineno=") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", colno=") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", absPath=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", platform=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", locals=\'") in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>(r1, $r2, null) in <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[])> ==> <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>(r1, r2, null) in <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[])> ==> <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r5) in <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.StackTraceInterface: void <init>(io.sentry.event.interfaces.SentryStackTraceElement[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.StackTraceInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.StackTraceInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StackTraceInterface{stackTrace=") in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.jvmti.Frame: void <init>(java.lang.reflect.Method,io.sentry.jvmti.Frame$LocalVariable[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.HashMap: void <init>()>() in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9) in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r7.<io.sentry.jvmti.Frame$LocalVariable: java.lang.String getName()>() in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.String getName()>
VIRTUAL edge: $r9 = virtualinvoke r7.<io.sentry.jvmti.Frame$LocalVariable: java.lang.Object getValue()>() in <io.sentry.jvmti.Frame: java.util.Map getLocals()> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Frame{, locals=") in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.jvmti.Frame: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r23.<javax.naming.InitialContext: void <init>()>() in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <javax.naming.InitialContext: void <init>()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java:comp/env/sentry/") in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r26.<javax.naming.Context: java.lang.Object lookup(java.lang.String)>($r5) in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <javax.naming.Context: java.lang.Object lookup(java.lang.String)>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void trace(java.lang.String)>("JNDI not configured for Sentry (NoInitialContextEx)") in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No /sentry/") in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in JNDI") in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void trace(java.lang.String)>($r15) in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <org.slf4j.Logger: void trace(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Odd RuntimeException while testing for JNDI", $r7) in <io.sentry.config.JndiLookup: java.lang.String jndiLookup(java.lang.String)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r1, r2, r3, r4, null) in <io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.UserInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UserInterface{id=\'") in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", username=\'") in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ipAddress=\'") in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", email=\'") in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", data=") in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.UserInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.EventBuilder: void <init>(java.util.UUID)>($r1) in <io.sentry.event.EventBuilder: void <init>()> ==> <io.sentry.event.EventBuilder: void <init>(java.util.UUID)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.EventBuilder: void <init>(java.util.UUID)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashSet: void <init>()>() in <io.sentry.event.EventBuilder: void <init>(java.util.UUID)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.Event: void <init>(java.util.UUID)>(r3) in <io.sentry.event.EventBuilder: void <init>(java.util.UUID)> ==> <io.sentry.event.Event: void <init>(java.util.UUID)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setMessage(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)> ==> <io.sentry.event.Event: void setMessage(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setTimestamp(java.util.Date)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTimestamp(java.util.Date)> ==> <io.sentry.event.Event: void setTimestamp(java.util.Date)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setLevel(io.sentry.event.Event$Level)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)> ==> <io.sentry.event.Event: void setLevel(io.sentry.event.Event$Level)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setRelease(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withRelease(java.lang.String)> ==> <io.sentry.event.Event: void setRelease(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setDist(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withDist(java.lang.String)> ==> <io.sentry.event.Event: void setDist(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setEnvironment(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withEnvironment(java.lang.String)> ==> <io.sentry.event.Event: void setEnvironment(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setLogger(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLogger(java.lang.String)> ==> <io.sentry.event.Event: void setLogger(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setPlatform(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withPlatform(java.lang.String)> ==> <io.sentry.event.Event: void setPlatform(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSdkIntegration(java.lang.String)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFunction()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFunction()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFileName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFileName()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: int getLineno()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: int getLineno()>
SPECIAL edge: $r5 = specialinvoke r0.<io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)>($r2, $r3, $r4, $i0) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>($r5) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <java.lang.StackTraceElement: java.lang.String getClassName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <java.lang.StackTraceElement: java.lang.String getMethodName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getFileName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <java.lang.StackTraceElement: java.lang.String getFileName()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.StackTraceElement: int getLineNumber()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <java.lang.StackTraceElement: int getLineNumber()>
SPECIAL edge: $r5 = specialinvoke r0.<io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)>($r2, $r3, $r4, $i0) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>($r5) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setCulprit(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)> ==> <io.sentry.event.Event: void setCulprit(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.sentry.event.Event: java.util.Map getTags()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)> ==> <io.sentry.event.Event: java.util.Map getTags()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setBreadcrumbs(java.util.List)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withBreadcrumbs(java.util.List)> ==> <io.sentry.event.Event: void setBreadcrumbs(java.util.List)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setContexts(java.util.Map)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withContexts(java.util.Map)> ==> <io.sentry.event.Event: void setContexts(java.util.Map)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setServerName(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withServerName(java.lang.String)> ==> <io.sentry.event.Event: void setServerName(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.sentry.event.Event: java.util.Map getExtra()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)> ==> <io.sentry.event.Event: java.util.Map getExtra()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withFingerprint(java.lang.String[])> ==> <java.util.ArrayList: void <init>(int)>
VIRTUAL edge: virtualinvoke $r4.<io.sentry.event.Event: void setFingerprint(java.util.List)>($r0) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withFingerprint(java.lang.String[])> ==> <io.sentry.event.Event: void setFingerprint(java.util.List)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setFingerprint(java.util.List)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withFingerprint(java.util.List)> ==> <io.sentry.event.Event: void setFingerprint(java.util.List)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksum(java.lang.String)>($r2) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksumFor(java.lang.String)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksum(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setChecksum(java.lang.String)>(r1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withChecksum(java.lang.String)> ==> <io.sentry.event.Event: void setChecksum(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>(r1, 1) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<io.sentry.event.Event: java.util.Map getSentryInterfaces()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.Event: java.util.Map getSentryInterfaces()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r8 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.sentry.event.interfaces.SentryInterface: java.lang.String getInterfaceName()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String getInterfaceName()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.sentry.event.Event: java.util.Map getSentryInterfaces()>() in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <io.sentry.event.Event: java.util.Map getSentryInterfaces()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3) in <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A message can\'t be built twice") in <io.sentry.event.EventBuilder: io.sentry.event.Event build()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.EventBuilder: void autoSetMissingValues()>() in <io.sentry.event.EventBuilder: io.sentry.event.Event build()> ==> <io.sentry.event.EventBuilder: void autoSetMissingValues()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.EventBuilder: void makeImmutable()>() in <io.sentry.event.EventBuilder: io.sentry.event.Event build()> ==> <io.sentry.event.EventBuilder: void makeImmutable()>
CLINIT edge: $r14 = <io.sentry.environment.SentryEnvironment: java.lang.String SDK_VERSION> in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r9 = <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder$HostnameCache HOSTNAME_CACHE> in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.EventBuilder: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r24 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r23) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r20 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r19) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r30 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r29) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EventBuilder{event=") in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", alreadyBuilt=") in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.EventBuilder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.servlet.SentryServletRequestListener: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.servlet.SentryServletRequestListener: javax.servlet.http.HttpServletRequest getServletRequest()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.ThreadLocal: void remove()>() in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <java.lang.ThreadLocal: void remove()>
VIRTUAL edge: virtualinvoke r5.<io.sentry.SentryClient: void clearContext()>() in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <io.sentry.SentryClient: void clearContext()>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error clearing Context state.", $r1) in <io.sentry.servlet.SentryServletRequestListener: void requestDestroyed(javax.servlet.ServletRequestEvent)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2) in <io.sentry.servlet.SentryServletRequestListener: void requestInitialized(javax.servlet.ServletRequestEvent)> ==> <java.lang.ThreadLocal: void set(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver)>(r1, $r2) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)>(r1, r2, null) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver)> ==> <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r41 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r34 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r39) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r39) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r39) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r28.<java.util.HashMap: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke r11.<io.sentry.event.helper.RemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>(r1) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>
INTERFACE edge: $r12 = interfaceinvoke r11.<io.sentry.event.helper.RemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>(r1) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>
SPECIAL edge: specialinvoke $r19.<java.util.HashMap: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: r44 = virtualinvoke $r21.<java.util.ArrayList: java.util.Iterator iterator()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r23 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r23 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r45, $r26) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r45, $r26) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r45, $r26) in <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HttpInterface{requestUrl=\'") in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", method=\'") in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queryString=\'") in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameters=") in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z17 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z4 = interfaceinvoke $r8.<java.util.Map: boolean equals(java.lang.Object)>($r7) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
INTERFACE edge: $z4 = interfaceinvoke $r8.<java.util.Map: boolean equals(java.lang.Object)>($r7) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
INTERFACE edge: $z5 = interfaceinvoke $r10.<java.util.Map: boolean equals(java.lang.Object)>($r9) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
INTERFACE edge: $z5 = interfaceinvoke $r10.<java.util.Map: boolean equals(java.lang.Object)>($r9) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z16 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>($r47) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r45) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z6 = interfaceinvoke $r18.<java.util.Map: boolean equals(java.lang.Object)>($r17) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
INTERFACE edge: $z6 = interfaceinvoke $r18.<java.util.Map: boolean equals(java.lang.Object)>($r17) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r43) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r41) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r39) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r37) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r27) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r35) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r33) in <io.sentry.event.interfaces.HttpInterface: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: i3 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <io.sentry.event.interfaces.HttpInterface: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i4 = virtualinvoke $r4.<java.lang.String: int hashCode()>() in <io.sentry.event.interfaces.HttpInterface: int hashCode()> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Map: int hashCode()>() in <io.sentry.event.interfaces.HttpInterface: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Map: int hashCode()>() in <io.sentry.event.interfaces.HttpInterface: int hashCode()> ==> <java.util.Hashtable: int hashCode()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.ExceptionInterface: void <init>(java.util.Deque)>($r2) in <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)> ==> <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.util.Deque)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.util.Deque)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ExceptionInterface{exceptions=") in <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.ExceptionInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.ExceptionInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <io.sentry.event.interfaces.ExceptionInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <io.sentry.event.interfaces.ExceptionInterface: boolean equals(java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <io.sentry.event.interfaces.ExceptionInterface: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <io.sentry.event.interfaces.ExceptionInterface: int hashCode()> ==> <java.util.AbstractList: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r8 = virtualinvoke r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Package getPackage()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Class: java.lang.Package getPackage()>
VIRTUAL edge: $r12 = virtualinvoke r6.<java.lang.Package: java.lang.String getName()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <java.lang.Package: java.lang.String getName()>
SPECIAL edge: specialinvoke $r7.<io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>($r8, r9, $r10) in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])> ==> <io.sentry.event.interfaces.StackTraceInterface: void <init>(java.lang.StackTraceElement[],java.lang.StackTraceElement[],io.sentry.jvmti.Frame[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.SentryException: void <init>(java.lang.String,java.lang.String,java.lang.String,io.sentry.event.interfaces.StackTraceInterface)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayDeque: void <init>()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.util.ArrayDeque: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Deque: boolean add(java.lang.Object)>($r4) in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r5) in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])>(r5, r6) in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <io.sentry.event.interfaces.SentryException: void <init>(java.lang.Throwable,java.lang.StackTraceElement[])>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>() in <io.sentry.event.interfaces.SentryException: java.util.Deque extractExceptionQueue(java.lang.Throwable)> ==> <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SentryException{exceptionMessage=\'") in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", exceptionClassName=\'") in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", exceptionPackageName=\'") in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", stackTraceInterface=") in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.SentryException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5) in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15) in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13) in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r12.<io.sentry.event.interfaces.StackTraceInterface: boolean equals(java.lang.Object)>($r11) in <io.sentry.event.interfaces.SentryException: boolean equals(java.lang.Object)> ==> <io.sentry.event.interfaces.StackTraceInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $i3 = virtualinvoke $r5.<java.lang.String: int hashCode()>() in <io.sentry.event.interfaces.SentryException: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() in <io.sentry.event.interfaces.SentryException: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r4.<java.lang.String: int hashCode()>() in <io.sentry.event.interfaces.SentryException: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.DebugMetaInterface: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.sentry.event.interfaces.DebugMetaInterface: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <io.sentry.event.interfaces.DebugMetaInterface: void addDebugImage(io.sentry.event.interfaces.DebugMetaInterface$DebugImage)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.ArrayList: int hashCode()>() in <io.sentry.event.interfaces.DebugMetaInterface: int hashCode()> ==> <java.util.ArrayList: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DebugMetaInterface{debugImages=") in <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.DebugMetaInterface$DebugImage: void <init>(java.lang.String,java.lang.String)>(r1, "proguard") in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: void <init>(java.lang.String)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DebugImage{uuid=\'") in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=\'") in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void <init>()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void <init>(com.fasterxml.jackson.core.JsonGenerator)> ==> <com.fasterxml.jackson.core.JsonGenerator: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>(r1, 0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>
CLINIT edge: $r30 = <io.sentry.marshaller.json.SentryJsonGenerator: org.slf4j.Logger logger> in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void <clinit>()>
STATIC edge: $r34 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r33, $i9) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
STATIC edge: $r6 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r4, $i2) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
STATIC edge: $r16 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r15, $i4) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
STATIC edge: $r24 = staticinvoke <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>($r23, $i8) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.Util: java.lang.String trimString(java.lang.String,int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.ObjectCodec getCodec()>() in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.ObjectCodec getCodec()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.ObjectCodec getCodec()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.Version version()>() in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.Version version()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.Version version()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: int getFeatureMask()>() in <io.sentry.marshaller.json.SentryJsonGenerator: int getFeatureMask()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: int getFeatureMask()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)>(i0) in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>() in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(com.fasterxml.jackson.core.SerializableString)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(com.fasterxml.jackson.core.SerializableString)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(com.fasterxml.jackson.core.SerializableString)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(char[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(com.fasterxml.jackson.core.SerializableString)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(com.fasterxml.jackson.core.SerializableString)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(com.fasterxml.jackson.core.SerializableString)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRawUTF8String(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawUTF8String(byte[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawUTF8String(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeUTF8String(byte[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeUTF8String(byte[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeUTF8String(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(java.lang.String)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(java.lang.String,int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(java.lang.String,int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(char[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(char[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(char)>(c0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(char)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRaw(char)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(java.lang.String)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(java.lang.String,int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(java.lang.String,int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(char[],int,int)>(r1, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(char[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeRawValue(char[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>(r1, r2, i0, i1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r3.<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>(r1, r2, i0) in <io.sentry.marshaller.json.SentryJsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(i0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(int)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(l0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(long)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(long)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.math.BigInteger)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.math.BigInteger)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(d0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(double)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(double)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(f0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(float)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(float)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.math.BigDecimal)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.math.BigDecimal)>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.lang.String)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(z0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeBoolean(boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeBoolean(boolean)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeNull()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNull()>
VIRTUAL edge: virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeTree(com.fasterxml.jackson.core.TreeNode)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeTree(com.fasterxml.jackson.core.TreeNode)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeTree(com.fasterxml.jackson.core.TreeNode)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>() in <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void flush()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void flush()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void flush()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: boolean isClosed()>() in <io.sentry.marshaller.json.SentryJsonGenerator: boolean isClosed()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: boolean isClosed()>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void close()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void close()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <io.sentry.dsn.InvalidDsnException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1) in <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.SentryUncaughtExceptionHandler: void <init>(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String)>("Uncaught exception received.") in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <org.slf4j.Logger: void trace(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<io.sentry.event.EventBuilder: void <init>()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>($r7) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>($r9) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>
SPECIAL edge: specialinvoke $r11.<io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>(r3) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>
VIRTUAL edge: r12 = virtualinvoke $r10.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r11) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error sending uncaught exception to Sentry.", $r13) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r2, r3) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r2, r3) in <io.sentry.SentryUncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ==> <java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r0.<org.slf4j.Logger: void debug(java.lang.String)>("Configuring uncaught exception handler.") in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("default UncaughtExceptionHandler class=\'") in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>() in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r11) in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.sentry.SentryUncaughtExceptionHandler: void <init>(java.lang.Thread$UncaughtExceptionHandler)>(r1) in <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()> ==> <io.sentry.SentryUncaughtExceptionHandler: void <init>(java.lang.Thread$UncaughtExceptionHandler)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List)>(r1, $r2) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String)> ==> <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List)>(r1, $r3) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.lang.String[])> ==> <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)>(r1, r2, null) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List)> ==> <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r3) in <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MessageInterface{message=\'") in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameters=") in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", formatted=") in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.MessageInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.event.interfaces.MessageInterface: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.jvmti.Frame$LocalVariable: void <init>(java.lang.String,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalVariable{name=\'") in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", value=") in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1) in <io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()> ==> <java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.event.EventBuilder$HostnameCache: void updateCache()>() in <io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()> ==> <io.sentry.event.EventBuilder$HostnameCache: void updateCache()>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.EventBuilder$HostnameCache$1: void <init>(io.sentry.event.EventBuilder$HostnameCache)>(r1) in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <io.sentry.event.EventBuilder$HostnameCache$1: void <init>(io.sentry.event.EventBuilder$HostnameCache)>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("Updating the hostname cache") in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r0) in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
VIRTUAL edge: virtualinvoke $r4.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r6) in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4) in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <io.sentry.connection.AsyncConnection$ShutDownHook: void run()>
THREAD edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <io.sentry.connection.BufferedConnection$ShutDownHook: void run()>
THREAD edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: $l2 = virtualinvoke $r9.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.event.EventBuilder$HostnameCache: void updateCache()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() in <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()> ==> <java.util.concurrent.atomic.AtomicBoolean: boolean get()>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1) in <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.Sentry: io.sentry.context.Context getContext()> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void clearContext()>() in <io.sentry.Sentry: void clearContext()> ==> <io.sentry.SentryClient: void clearContext()>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)>(r1) in <io.sentry.Sentry: void capture(io.sentry.event.Event)> ==> <io.sentry.SentryClient: void sendEvent(io.sentry.event.Event)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void sendException(java.lang.Throwable)>(r1) in <io.sentry.Sentry: void capture(java.lang.Throwable)> ==> <io.sentry.SentryClient: void sendException(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void sendMessage(java.lang.String)>(r1) in <io.sentry.Sentry: void capture(java.lang.String)> ==> <io.sentry.SentryClient: void sendMessage(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>(r1) in <io.sentry.Sentry: void capture(io.sentry.event.EventBuilder)> ==> <io.sentry.SentryClient: void sendEvent(io.sentry.event.EventBuilder)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.Sentry: void record(io.sentry.event.Breadcrumb)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: virtualinvoke $r1.<io.sentry.context.Context: void recordBreadcrumb(io.sentry.event.Breadcrumb)>(r2) in <io.sentry.Sentry: void record(io.sentry.event.Breadcrumb)> ==> <io.sentry.context.Context: void recordBreadcrumb(io.sentry.event.Breadcrumb)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<io.sentry.SentryClient: io.sentry.context.Context getContext()>() in <io.sentry.Sentry: void setUser(io.sentry.event.User)> ==> <io.sentry.SentryClient: io.sentry.context.Context getContext()>
VIRTUAL edge: virtualinvoke $r1.<io.sentry.context.Context: void setUser(io.sentry.event.User)>(r2) in <io.sentry.Sentry: void setUser(io.sentry.event.User)> ==> <io.sentry.context.Context: void setUser(io.sentry.event.User)>
VIRTUAL edge: virtualinvoke $r1.<io.sentry.SentryClient: void closeConnection()>() in <io.sentry.Sentry: void close()> ==> <io.sentry.SentryClient: void closeConnection()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) in <io.sentry.Sentry: void close()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getCanonicalHostName()>() in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.net.InetAddress: java.lang.String getCanonicalHostName()>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
VIRTUAL edge: virtualinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()>() in <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Object call()> ==> <io.sentry.event.EventBuilder$HostnameCache$1: java.lang.Void call()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.helper.ForwardedAddressResolver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>() in <io.sentry.event.helper.ForwardedAddressResolver: void <init>()> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.sentry.event.helper.BasicRemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>(r0) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>
SPECIAL edge: specialinvoke r0.<java.util.logging.Handler: void <init>()>() in <io.sentry.jul.SentryHandler: void <init>()> ==> <java.util.logging.Handler: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.jul.SentryHandler: void retrieveProperties()>() in <io.sentry.jul.SentryHandler: void <init>()> ==> <io.sentry.jul.SentryHandler: void retrieveProperties()>
VIRTUAL edge: virtualinvoke r0.<io.sentry.jul.SentryHandler: void setFilter(java.util.logging.Filter)>($r1) in <io.sentry.jul.SentryHandler: void <init>()> ==> <java.util.logging.Handler: void setFilter(java.util.logging.Filter)>
SPECIAL edge: specialinvoke $r1.<io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler,io.sentry.jul.SentryHandler$1)>(r0, null) in <io.sentry.jul.SentryHandler: void <init>()> ==> <io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler,io.sentry.jul.SentryHandler$1)>
CLINIT edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r8) in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r8) in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.jul.SentryHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1) in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>
VIRTUAL edge: r5 = virtualinvoke r0.<io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)>(r1) in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.jul.SentryHandler: void reportError(java.lang.String,java.lang.Exception,int)>("An exception occurred while creating a new event in Sentry", $r4, 1) in <io.sentry.jul.SentryHandler: void publish(java.util.logging.LogRecord)> ==> <java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>
CLINIT edge: $r0 = new io.sentry.event.EventBuilder in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: void <clinit>()>
STATIC edge: $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r25 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>
STATIC edge: $r59 = staticinvoke <org.slf4j.MDC: org.slf4j.spi.MDCAdapter getMDCAdapter()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <org.slf4j.MDC: org.slf4j.spi.MDCAdapter getMDCAdapter()>
STATIC edge: r54 = staticinvoke <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])>($r11) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)>($r3) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)>
CLINIT edge: $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r25 = staticinvoke <io.sentry.Sentry: io.sentry.SentryClient getStoredClient()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.Sentry: void <clinit>()>
CLINIT edge: $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r5 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level DEBUG> in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r6 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level INFO> in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r7 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level WARNING> in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r8 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level ERROR> in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <io.sentry.event.Event$Level: void <clinit>()>
VIRTUAL edge: virtualinvoke r4.<io.sentry.jul.SentryHandler: void reportError(java.lang.String,java.lang.Exception,int)>("An exception occurred while closing the Sentry connection", $r2, 3) in <io.sentry.jul.SentryHandler: void close()> ==> <java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getLoggerName()>() in <io.sentry.jul.SentryHandler$DropSentryFilter: boolean isLoggable(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getLoggerName()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("io.sentry") in <io.sentry.jul.SentryHandler$DropSentryFilter: boolean isLoggable(java.util.logging.LogRecord)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.servlet.SentryServletContainerInitializer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.UserBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>()>() in <io.sentry.event.UserBuilder: io.sentry.event.UserBuilder withData(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.event.UserBuilder: io.sentry.event.UserBuilder withData(java.lang.String,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.event.UserBuilder: io.sentry.event.UserBuilder withData(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) in <io.sentry.event.UserBuilder: io.sentry.event.UserBuilder withData(java.lang.String,java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>($r6, $r5, $r4, $r3, $r2) in <io.sentry.event.UserBuilder: io.sentry.event.User build()> ==> <io.sentry.event.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.BreadcrumbBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.util.Date: long getTime()>() in <io.sentry.event.BreadcrumbBuilder: io.sentry.event.BreadcrumbBuilder setTimestamp(java.util.Date)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r1.<java.util.Date: void <init>(long)>($l0) in <io.sentry.event.BreadcrumbBuilder: io.sentry.event.BreadcrumbBuilder setTimestamp(java.util.Date)> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)>($r7, $r6, $r5, $r4, $r3, $r2) in <io.sentry.event.BreadcrumbBuilder: io.sentry.event.Breadcrumb build()> ==> <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.time.FixedClock: void <init>(java.util.Date)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>() in <io.sentry.time.FixedClock: long millis()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>() in <io.sentry.time.FixedClock: void tick(long,java.util.concurrent.TimeUnit)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l2 = virtualinvoke r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1) in <io.sentry.time.FixedClock: void tick(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
SPECIAL edge: specialinvoke $r1.<java.util.Date: void <init>(long)>($l3) in <io.sentry.time.FixedClock: void tick(long,java.util.concurrent.TimeUnit)> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)>(r1) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event access$000(io.sentry.buffer.DiskBuffer,java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.Event$Level: void <init>(java.lang.String,int)>("FATAL", 0) in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.Event$Level: void <init>(java.lang.String,int)>("ERROR", 1) in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.Event$Level: void <init>(java.lang.String,int)>("WARNING", 2) in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<io.sentry.event.Event$Level: void <init>(java.lang.String,int)>("INFO", 3) in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<io.sentry.event.Event$Level: void <init>(java.lang.String,int)>("DEBUG", 4) in <io.sentry.event.Event$Level: void <clinit>()> ==> <io.sentry.event.Event$Level: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.sentry.environment.SentryEnvironment$1: void <init>()>() in <io.sentry.environment.SentryEnvironment: void <clinit>()> ==> <io.sentry.environment.SentryEnvironment$1: void <init>()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AsyncConnection: void doClose()>() in <io.sentry.connection.AsyncConnection: void access$600(io.sentry.connection.AsyncConnection)> ==> <io.sentry.connection.AsyncConnection: void doClose()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lockdown") in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.AsyncConnection: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $l0 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
SPECIAL edge: specialinvoke $r3.<io.sentry.connection.HttpConnection$1: void <init>()>() in <io.sentry.connection.HttpConnection: void <clinit>()> ==> <io.sentry.connection.HttpConnection$1: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(5L) in <io.sentry.connection.LockdownManager: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.connection.LockdownManager: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
SPECIAL edge: $i1 = specialinvoke r0.<io.sentry.util.CircularFifoQueue: int increment(int)>(i0) in <io.sentry.util.CircularFifoQueue: int access$300(io.sentry.util.CircularFifoQueue,int)> ==> <io.sentry.util.CircularFifoQueue: int increment(int)>
SPECIAL edge: $i1 = specialinvoke r0.<io.sentry.util.CircularFifoQueue: int decrement(int)>(i0) in <io.sentry.util.CircularFifoQueue: int access$600(io.sentry.util.CircularFifoQueue,int)> ==> <io.sentry.util.CircularFifoQueue: int decrement(int)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>("DEFAULT", 0, "default") in <io.sentry.event.Breadcrumb$Type: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>("HTTP", 1, "http") in <io.sentry.event.Breadcrumb$Type: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>("NAVIGATION", 2, "navigation") in <io.sentry.event.Breadcrumb$Type: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>("USER", 3, "user") in <io.sentry.event.Breadcrumb$Type: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>("DEBUG", 0, "debug") in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>("INFO", 1, "info") in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>("WARNING", 2, "warning") in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>("ERROR", 3, "error") in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>("CRITICAL", 4, "critical") in <io.sentry.event.Breadcrumb$Level: void <clinit>()> ==> <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.sentry.SentryClient: void <clinit>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.sentry.SentryClient: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <io.sentry.SentryClient: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lockdown") in <io.sentry.SentryClient: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.SentryClient: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l3 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Boolean: java.lang.String toString()>() in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.lang.Boolean: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>()>() in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>() in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sync", $r7) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sync", $r7) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sync", $r7) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.util.concurrent.ThreadPoolExecutor$DiscardPolicy: void <init>()>() in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.ThreadPoolExecutor$DiscardPolicy: void <init>()>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardnew", $r10) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardnew", $r10) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardnew", $r10) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>() in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardold", $r13) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardold", $r13) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("discardold", $r13) in <io.sentry.DefaultSentryClientFactory: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.sentry.dsn.Dsn: void <init>(java.lang.String)>(r4) in <io.sentry.SentryClientFactory: io.sentry.dsn.Dsn resolveDsn(java.lang.String)> ==> <io.sentry.dsn.Dsn: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.Properties: void <init>()>() in <io.sentry.config.Lookup: void <clinit>()> ==> <java.util.Properties: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.util.Properties: void load(java.io.InputStream)>(r7) in <io.sentry.config.Lookup: void <clinit>()> ==> <java.util.Properties: void load(java.io.InputStream)>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Sentry configuration file not found in filesystem or classpath: \'{}\'.", r1) in <io.sentry.config.Lookup: void <clinit>()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(5L) in <io.sentry.event.EventBuilder: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.EventBuilder$HostnameCache: void <init>(long,io.sentry.event.EventBuilder$1)>($l1, null) in <io.sentry.event.EventBuilder: void <clinit>()> ==> <io.sentry.event.EventBuilder$HostnameCache: void <init>(long,io.sentry.event.EventBuilder$1)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>() in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.util.LinkedHashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7) in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ") in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entry: ") in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17) in <io.sentry.util.Util: java.util.Map parseCsv(java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <io.sentry.jvmti.FrameCache: void <clinit>()> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.jvmti.FrameCache$1: void <init>()>() in <io.sentry.jvmti.FrameCache: void <clinit>()> ==> <io.sentry.jvmti.FrameCache$1: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>() in <io.sentry.servlet.SentryServletRequestListener: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.sentry.marshaller.json.JsonMarshaller$1: void <init>()>() in <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$1: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)> ==> <java.lang.StackTraceElement: java.lang.String getClassName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)> ==> <java.lang.StackTraceElement: java.lang.String getMethodName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getFileName()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)> ==> <java.lang.StackTraceElement: java.lang.String getFileName()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.StackTraceElement: int getLineNumber()>() in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)> ==> <java.lang.StackTraceElement: int getLineNumber()>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String,java.util.Map)>($r2, $r3, $r4, $i0, null, null, null, r5) in <io.sentry.event.interfaces.SentryStackTraceElement: io.sentry.event.interfaces.SentryStackTraceElement fromStackTraceElement(java.lang.StackTraceElement,java.util.Map)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Integer,java.lang.String,java.lang.String,java.util.Map)>
VIRTUAL edge: r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r3.<java.util.zip.CRC32: void <init>()>() in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.util.zip.CRC32: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.zip.Checksum: void update(byte[],int,int)>(r2, 0, $i0) in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.util.zip.CRC32: void update(byte[],int,int)>
INTERFACE edge: $l1 = interfaceinvoke $r3.<java.util.zip.Checksum: long getValue()>() in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.util.zip.CRC32: long getValue()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>() in <io.sentry.event.EventBuilder: java.lang.String calculateChecksum(java.lang.String)> ==> <java.lang.String: java.lang.String toUpperCase()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0) in <io.sentry.Sentry: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L) in <io.sentry.event.EventBuilder$HostnameCache: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>() in <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String firstAddress(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.io.File: boolean isFile()>() in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $z1 = virtualinvoke $r0.<java.io.File: boolean canRead()>() in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.io.File: boolean canRead()>
SPECIAL edge: specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r0) in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.sentry.config.Lookup: java.io.InputStream getInputStream(java.lang.String)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>() in <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".sentry-event") in <io.sentry.buffer.DiskBuffer: int getNumStoredEvents()> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.buffer.DiskBuffer$1: void <init>(io.sentry.buffer.DiskBuffer,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r2) in <io.sentry.connection.AsyncConnection: void addShutdownHook()> ==> <java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection)>(r1) in <io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection,io.sentry.connection.AsyncConnection$1)> ==> <io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection)>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event)>(r1, r2) in <io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event,io.sentry.connection.AsyncConnection$1)> ==> <io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event)>
INTERFACE edge: interfaceinvoke $r0.<org.slf4j.Logger: void debug(java.lang.String)>("Gracefully shutting down Sentry async threads.") in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void shutdown()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.ThreadPoolExecutor: void shutdown()>
INTERFACE edge: $z1 = interfaceinvoke $r10.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(5000L, $r9) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Still waiting on async executor to terminate.") in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l2, $r3) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Graceful shutdown took too much time, forcing the shutdown.") in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
INTERFACE edge: r23 = interfaceinvoke $r6.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>
INTERFACE edge: $i3 = interfaceinvoke r23.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r23.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r23.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} tasks failed to execute before shutdown.", $r8) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>("Shutdown finished.") in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r25.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.NoopConnection: void close()>
VIRTUAL edge: virtualinvoke $r16.<java.lang.Thread: void interrupt()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.lang.Thread: void interrupt()>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>("Graceful shutdown interrupted, forcing the shutdown.") in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void warn(java.lang.String)>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>
INTERFACE edge: $i4 = interfaceinvoke r19.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r19.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r19.<java.util.List: int size()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} tasks failed to execute before shutdown.", $r21) in <io.sentry.connection.AsyncConnection: void doClose()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r22.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.NoopConnection: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.AsyncConnection: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.HttpConnection: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.BufferedConnection$2: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.OutputStreamConnection: void close()>
INTERFACE edge: interfaceinvoke $r14.<io.sentry.connection.Connection: void close()>() in <io.sentry.connection.AsyncConnection: void doClose()> ==> <io.sentry.connection.NoopConnection: void close()>
SPECIAL edge: specialinvoke r0.<io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection)>(r1) in <io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.BufferedConnection$1)> ==> <io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.BufferedConnection$1: void <init>(io.sentry.connection.BufferedConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.BufferedConnection$Flusher: void <init>(io.sentry.connection.BufferedConnection,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.BufferedConnection$2: void <init>(io.sentry.connection.BufferedConnection,io.sentry.connection.Connection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.sentry.connection.LockdownManager: void <init>()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <io.sentry.connection.LockdownManager: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sentry sentry_version=6,sentry_client=") in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sentry_key=") in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sentry_secret=") in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.AbstractConnection: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[])>
INTERFACE edge: interfaceinvoke $r7.<io.sentry.marshaller.Marshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)>(r5, $r6) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r11) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r11) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r12.<java.io.OutputStream: void flush()>() in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <java.util.zip.DeflaterOutputStream: void flush()>
SPECIAL edge: specialinvoke $r15.<io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t sent the event properly", $r13) in <io.sentry.connection.OutputStreamConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<io.sentry.connection.EventSampler: boolean shouldSendEvent(io.sentry.event.Event)>(r3) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.RandomEventSampler: boolean shouldSendEvent(io.sentry.event.Event)>
VIRTUAL edge: r2 = virtualinvoke r0.<io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()>
SPECIAL edge: r16 = specialinvoke r0.<io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)>(r12) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)>
INTERFACE edge: interfaceinvoke $r4.<io.sentry.marshaller.Marshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)>(r3, r14) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void marshall(io.sentry.event.Event,java.io.OutputStream)>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.marshaller.Marshaller$UncloseableOutputStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke r14.<java.io.OutputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.InputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.InputStream: void close()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: $z1 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>() in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r18.<io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable,java.lang.Long)>(r16, $r11, r17) in <io.sentry.connection.HttpConnection: void doSend(io.sentry.event.Event)> ==> <io.sentry.connection.ConnectionException: void <init>(java.lang.String,java.lang.Throwable,java.lang.Long)>
CLINIT edge: $r11 = <io.sentry.connection.HttpConnection: javax.net.ssl.HostnameVerifier NAIVE_VERIFIER> in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
STATIC edge: $r19 = staticinvoke <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>
CLINIT edge: $r19 = staticinvoke <io.sentry.environment.SentryEnvironment: java.lang.String getSentryName()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.environment.SentryEnvironment: void <clinit>()>
CLINIT edge: $r11 = <io.sentry.connection.HttpConnection: javax.net.ssl.HostnameVerifier NAIVE_VERIFIER> in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r3 = <io.sentry.connection.HttpConnection: java.nio.charset.Charset UTF_8> in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
CLINIT edge: $r12 = <io.sentry.connection.HttpConnection: org.slf4j.Logger logger> in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r12 = <io.sentry.connection.HttpConnection: org.slf4j.Logger logger> in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
CLINIT edge: $r3 = <io.sentry.connection.HttpConnection: java.nio.charset.Charset UTF_8> in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.util.CircularFifoQueue$1: void <init>(io.sentry.util.CircularFifoQueue)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.lang.String getProtocol()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.lang.String getProtocol()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("http") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("out") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("noop") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Using an {} connection to Sentry.", $r3) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: r17 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)>
VIRTUAL edge: r17 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)>
VIRTUAL edge: $z5 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: r5 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)>
VIRTUAL edge: l0 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)>
VIRTUAL edge: z1 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: $l1 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)>
VIRTUAL edge: $z6 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: r17 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)>(r0, $r24) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)>
INTERFACE edge: interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>("Using StdOut to send events.") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("Using noop to send events.") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<io.sentry.connection.NoopConnection: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.NoopConnection: void <init>()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create a connection for the protocol \'") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke r6.<java.lang.Long: long longValue()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <java.lang.Long: long longValue()>
SPECIAL edge: specialinvoke $r22.<io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)>($r23, r5, l0, z1, $l2) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.BufferedConnection: void <init>(io.sentry.connection.Connection,io.sentry.buffer.Buffer,long,boolean,long)>
VIRTUAL edge: r17 = virtualinvoke r18.<io.sentry.connection.BufferedConnection: io.sentry.connection.Connection wrapConnectionWithBufferWriter(io.sentry.connection.Connection)>($r25) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.BufferedConnection: io.sentry.connection.Connection wrapConnectionWithBufferWriter(io.sentry.connection.Connection)>
CLINIT edge: r3 = staticinvoke <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: void <clinit>()>
STATIC edge: staticinvoke <java.net.Authenticator: void setDefault(java.net.Authenticator)>($r17) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.net.Authenticator: void setDefault(java.net.Authenticator)>
STATIC edge: r3 = staticinvoke <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)>
CLINIT edge: $r16 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.net.Proxy$Type: void <clinit>()>
CLINIT edge: $r15 = new java.net.Proxy in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.net.Proxy: void <clinit>()>
CLINIT edge: r3 = staticinvoke <io.sentry.connection.HttpConnection: java.net.URL getSentryApiUrl(java.net.URI,java.lang.String)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.connection.OutputStreamConnection in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.OutputStreamConnection: void <clinit>()>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream out> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new io.sentry.connection.OutputStreamConnection in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.AbstractConnection: void <clinit>()>
CLINIT edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.enabled", r0) in <io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.enabled", r0) in <io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: boolean getBufferEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.dir", r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.dir", r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r3 = new java.io.File in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r2 = new io.sentry.buffer.DiskBuffer in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.flushtime", r0) in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(60000L) in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.flushtime", r0) in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(60000L) in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.gracefulshutdown", r0) in <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.gracefulshutdown", r0) in <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.shutdowntimeout", r0) in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.shutdowntimeout", r0) in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $l0 = <io.sentry.DefaultSentryClientFactory: long BUFFER_SHUTDOWN_TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $l0 = <io.sentry.DefaultSentryClientFactory: long BUFFER_SHUTDOWN_TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async", r0) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async", r0) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r8 = new io.sentry.connection.AsyncConnection in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.connection.AsyncConnection: void <clinit>()>
CLINIT edge: $r4 = new io.sentry.DefaultSentryClientFactory$DaemonThreadFactory in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <clinit>()>
CLINIT edge: <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.util.concurrent.atomic.AtomicInteger POOL_NUMBER> = $r0 in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <clinit>()> ==> <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<io.sentry.context.ThreadLocalContextManager: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.context.ContextManager getContextManager(io.sentry.dsn.Dsn)> ==> <io.sentry.context.ThreadLocalContextManager: void <init>()>
VIRTUAL edge: r2 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.lang.String getRelease(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getRelease(io.sentry.dsn.Dsn)>
VIRTUAL edge: r3 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.lang.String getDist(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getDist(io.sentry.dsn.Dsn)>
VIRTUAL edge: r4 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.lang.String getEnvironment(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getEnvironment(io.sentry.dsn.Dsn)>
VIRTUAL edge: r5 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.lang.String getServerName(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getServerName(io.sentry.dsn.Dsn)>
VIRTUAL edge: r6 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.Map getTags(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.util.Map getTags(io.sentry.dsn.Dsn)>
VIRTUAL edge: r24 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)>
VIRTUAL edge: r27 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.Map getExtra(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.util.Map getExtra(io.sentry.dsn.Dsn)>
VIRTUAL edge: $z3 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: $r7 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void setRelease(java.lang.String)>(r2) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void setRelease(java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void setDist(java.lang.String)>(r3) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void setDist(java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void setEnvironment(java.lang.String)>(r4) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void setEnvironment(java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void setServerName(java.lang.String)>(r5) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void setServerName(java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void addTag(java.lang.String,java.lang.String)>($r19, $r21) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void addTag(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void addMdcTag(java.lang.String)>(r26) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void addMdcTag(java.lang.String)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void addExtra(java.lang.String,java.lang.Object)>($r13, $r14) in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void addExtra(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r8.<io.sentry.SentryClient: void setupUncaughtExceptionHandler()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClient: void setupUncaughtExceptionHandler()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r16 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r16 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r16 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r22 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z6 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r17 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r17 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r24.<java.util.Set: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: r25 = interfaceinvoke r24.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z5 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r27.<java.util.Map: boolean isEmpty()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r10 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke r27.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r28 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z7 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z7 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.SentryClient configureSentryClient(io.sentry.SentryClient,io.sentry.dsn.Dsn)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("release", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getRelease(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("release", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getRelease(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("dist", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getDist(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("dist", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getDist(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("environment", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getEnvironment(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("environment", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getEnvironment(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("servername", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getServerName(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("servername", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getServerName(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("tags", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Map getTags(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.util.Util: java.util.Map parseTags(java.lang.String)>($r1) in <io.sentry.DefaultSentryClientFactory: java.util.Map getTags(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.util.Map parseTags(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("tags", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Map getTags(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: r3 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("mdctags", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)>(r3) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.util.Set parseMdcTags(java.lang.String)>
STATIC edge: $z1 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r3) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: r3 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("extratags", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r3) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: r3 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("mdctags", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("extra", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Map getExtra(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.util.Util: java.util.Map parseExtra(java.lang.String)>($r1) in <io.sentry.DefaultSentryClientFactory: java.util.Map getExtra(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.util.Map parseExtra(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("extra", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Map getExtra(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("uncaught.handler.enabled", r0) in <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("uncaught.handler.enabled", r0) in <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("stacktrace.app.packages", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("stacktrace.app.packages", r0) in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r7 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r7 = <io.sentry.DefaultSentryClientFactory: org.slf4j.Logger logger> in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()>() in <io.sentry.SentryClient: void setupUncaughtExceptionHandler()> ==> <io.sentry.SentryUncaughtExceptionHandler: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()>() in <io.sentry.SentryClient: void setupUncaughtExceptionHandler()> ==> <io.sentry.SentryUncaughtExceptionHandler: io.sentry.SentryUncaughtExceptionHandler setup()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>() in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.net.URI: java.lang.String getScheme()>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\+") in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(0, $i1) in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.util.AbstractList: java.util.List subList(int,int)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(0, $i1) in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.List subList(int,int)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r6) in <io.sentry.dsn.Dsn: void extractProtocolInfo(java.net.URI)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URI: java.lang.String getUserInfo()>() in <io.sentry.dsn.Dsn: void extractUserKeys(java.net.URI)> ==> <java.net.URI: java.lang.String getUserInfo()>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") in <io.sentry.dsn.Dsn: void extractUserKeys(java.net.URI)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.net.URI: java.lang.String getHost()>() in <io.sentry.dsn.Dsn: void extractHostInfo(java.net.URI)> ==> <java.net.URI: java.lang.String getHost()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.net.URI: int getPort()>() in <io.sentry.dsn.Dsn: void extractHostInfo(java.net.URI)> ==> <java.net.URI: int getPort()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>() in <io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)> ==> <java.net.URI: java.lang.String getPath()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") in <io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1) in <io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1) in <io.sentry.dsn.Dsn: void extractPathInfo(java.net.URI)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URI: java.lang.String getQuery()>() in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.net.URI: java.lang.String getQuery()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>() in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("&") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r19) in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r19) in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r19) in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible to decode the query parameter \'") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r11) in <io.sentry.dsn.Dsn: void extractOptions(java.net.URI)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedList: void <init>()>() in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("host") in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("public key") in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("secret key") in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("project ID") in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: $z7 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <io.sentry.dsn.Dsn: void validate()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $z0 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("noop") in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("out") in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r16.<java.lang.String: boolean isEmpty()>() in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid DSN, the following properties aren\'t set \'") in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.dsn.Dsn: void validate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String)>($r10) in <io.sentry.dsn.Dsn: void validate()> ==> <io.sentry.dsn.InvalidDsnException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r15) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r16) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r16) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFileName()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFileName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>
VIRTUAL edge: $r20 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFunction()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getFunction()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: int getLineno()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: int getLineno()>
VIRTUAL edge: $r21 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.Integer getColno()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.Integer getColno()>
VIRTUAL edge: $r19 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.Integer getColno()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.Integer getColno()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getPlatform()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getPlatform()>
VIRTUAL edge: $r18 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getPlatform()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getPlatform()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getAbsPath()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getAbsPath()>
VIRTUAL edge: $r17 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getAbsPath()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getAbsPath()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>
VIRTUAL edge: $r9 = virtualinvoke r1.<io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.util.Map getLocals()>
SPECIAL edge: $z1 = specialinvoke r4.<io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)>(r1) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.lang.Integer: int intValue()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.lang.Integer: int intValue()>
INTERFACE edge: $z3 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeFrame(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryStackTraceElement,boolean)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r1.<io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver)>(r2, $r4) in <io.sentry.event.helper.HttpEventBuilderHelper: void addHttpInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.interfaces.HttpInterface: void <init>(javax.servlet.http.HttpServletRequest,io.sentry.event.helper.RemoteAddressResolver)>
VIRTUAL edge: virtualinvoke r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>($r1, 0) in <io.sentry.event.helper.HttpEventBuilderHelper: void addHttpInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.sentry.event.helper.RemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>(r0) in <io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.helper.BasicRemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.sentry.event.helper.RemoteAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>(r0) in <io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.helper.ForwardedAddressResolver: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>
SPECIAL edge: specialinvoke $r2.<io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, r10, $r5, null) in <io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>($r2, 0) in <io.sentry.event.helper.HttpEventBuilderHelper: void addUserInterface(io.sentry.event.EventBuilder,javax.servlet.http.HttpServletRequest)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface,boolean)>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNull()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r13) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeData(com.fasterxml.jackson.core.JsonGenerator,java.util.Map,java.lang.String)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNull()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeCookies(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r12) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r10) in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeHeaders(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getRemoteAddr()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getRemoteAddr()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getServerName()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getServerName()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: int getServerPort()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: int getServerPort()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getLocalAddr()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getLocalAddr()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getLocalName()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getLocalName()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: int getLocalPort()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: int getLocalPort()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getProtocol()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getProtocol()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: boolean isSecure()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: boolean isSecure()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: boolean isAsyncStarted()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: boolean isAsyncStarted()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getAuthType()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getAuthType()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.sentry.event.interfaces.HttpInterface: java.lang.String getRemoteUser()>() in <io.sentry.marshaller.json.HttpInterfaceBinding: void writeEnvironment(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.HttpInterface)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String getRemoteUser()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("stacktrace") in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.SentryException: java.lang.String getExceptionClassName()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String getExceptionClassName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.interfaces.SentryException: java.lang.String getExceptionMessage()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String getExceptionMessage()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.interfaces.SentryException: java.lang.String getExceptionPackageName()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String getExceptionPackageName()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.sentry.event.interfaces.SentryException: io.sentry.event.interfaces.StackTraceInterface getStackTraceInterface()>() in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.event.interfaces.SentryException: io.sentry.event.interfaces.StackTraceInterface getStackTraceInterface()>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r6.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r0, $r7) in <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeException(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryException)> ==> <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.interfaces.DebugMetaInterface: java.util.ArrayList getDebugImages()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.util.ArrayList getDebugImages()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r5.<io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String getUuid()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String getUuid()>
VIRTUAL edge: $r7 = virtualinvoke r5.<io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String getType()>() in <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeDebugImages(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.DebugMetaInterface)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String getType()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r3 = virtualinvoke r2.<io.sentry.event.Event: java.util.UUID getId()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.UUID getId()>
VIRTUAL edge: $r5 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getMessage()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getMessage()>
VIRTUAL edge: $r10 = virtualinvoke r2.<io.sentry.event.Event: java.util.Date getTimestamp()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.Date getTimestamp()>
VIRTUAL edge: $r12 = virtualinvoke r2.<io.sentry.event.Event: io.sentry.event.Event$Level getLevel()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: io.sentry.event.Event$Level getLevel()>
VIRTUAL edge: $r14 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getLogger()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getLogger()>
VIRTUAL edge: $r15 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getPlatform()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getPlatform()>
VIRTUAL edge: $r16 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getCulprit()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getCulprit()>
VIRTUAL edge: $r17 = virtualinvoke r2.<io.sentry.event.Event: io.sentry.event.Sdk getSdk()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: io.sentry.event.Sdk getSdk()>
VIRTUAL edge: $r18 = virtualinvoke r2.<io.sentry.event.Event: java.util.Map getTags()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.Map getTags()>
VIRTUAL edge: $r19 = virtualinvoke r2.<io.sentry.event.Event: java.util.List getBreadcrumbs()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.List getBreadcrumbs()>
VIRTUAL edge: $r20 = virtualinvoke r2.<io.sentry.event.Event: java.util.Map getContexts()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.Map getContexts()>
VIRTUAL edge: $r21 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getServerName()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getServerName()>
VIRTUAL edge: $r22 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getRelease()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getRelease()>
VIRTUAL edge: $r23 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getDist()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getDist()>
VIRTUAL edge: $r24 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getEnvironment()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getEnvironment()>
VIRTUAL edge: $r25 = virtualinvoke r2.<io.sentry.event.Event: java.util.Map getExtra()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.Map getExtra()>
VIRTUAL edge: $r26 = virtualinvoke r2.<io.sentry.event.Event: java.util.List getFingerprint()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.List getFingerprint()>
VIRTUAL edge: $r27 = virtualinvoke r2.<io.sentry.event.Event: java.lang.String getChecksum()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.lang.String getChecksum()>
VIRTUAL edge: $r28 = virtualinvoke r2.<io.sentry.event.Event: java.util.Map getSentryInterfaces()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.event.Event: java.util.Map getSentryInterfaces()>
SPECIAL edge: $r4 = specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatId(java.util.UUID)>($r3) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatId(java.util.UUID)>
SPECIAL edge: $r13 = specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)>($r12) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)>(r0, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r18) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)>(r0, $r19) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r20) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r25) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)>(r0, "fingerprint", $r26) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)>
SPECIAL edge: specialinvoke r1.<io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>(r0, $r28) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10) in <io.sentry.marshaller.json.JsonMarshaller: void writeContent(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Event)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
CLINIT edge: $r1 = <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
CLINIT edge: $r2 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r10 = <io.sentry.marshaller.json.JsonMarshaller: org.slf4j.Logger logger> in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: io.sentry.event.Event$Level[] values()>
CLINIT edge: $r10 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level ERROR> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r11 = <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
CLINIT edge: $r8 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level INFO> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r9 = <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
CLINIT edge: $r6 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level WARNING> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r7 = <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
CLINIT edge: $r4 = <io.sentry.event.Event$Level: io.sentry.event.Event$Level FATAL> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.event.Event$Level: void <clinit>()>
CLINIT edge: $r5 = <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
CLINIT edge: <io.sentry.marshaller.json.JsonMarshaller$2: int[] $SwitchMap$io$sentry$event$Event$Level> = $r1 in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.User: java.lang.String getId()>() in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.User: java.lang.String getId()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.User: java.lang.String getUsername()>() in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.User: java.lang.String getUsername()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.User: java.lang.String getIpAddress()>() in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.User: java.lang.String getIpAddress()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.User: java.lang.String getEmail()>() in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.User: java.lang.String getEmail()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.User: java.util.Map getData()>() in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.User: java.util.Map getData()>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>($r2, $r3, $r4, $r5, $r6) in <io.sentry.event.helper.ContextBuilderHelper: io.sentry.event.interfaces.UserInterface fromUser(io.sentry.event.User)> ==> <io.sentry.event.interfaces.UserInterface: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <io.sentry.context.ThreadLocalContextManager$1: void <init>(io.sentry.context.ThreadLocalContextManager)> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.HashMap: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The id can\'t be null") in <io.sentry.event.Event: void <init>(java.util.UUID)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(") in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r7.<java.lang.String: boolean isEmpty()>() in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <io.sentry.event.EventBuilder: java.lang.String buildCulpritString(java.lang.String,java.lang.String,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.sentry.event.Event: java.util.Date getTimestamp()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: java.util.Date getTimestamp()>
SPECIAL edge: specialinvoke $r17.<java.util.Date: void <init>()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <java.util.Date: void <init>()>
VIRTUAL edge: virtualinvoke $r18.<io.sentry.event.Event: void setTimestamp(java.util.Date)>($r17) in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: void setTimestamp(java.util.Date)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.sentry.event.Event: java.lang.String getPlatform()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: java.lang.String getPlatform()>
VIRTUAL edge: virtualinvoke $r16.<io.sentry.event.Event: void setPlatform(java.lang.String)>("java") in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: void setPlatform(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.sentry.event.Event: io.sentry.event.Sdk getSdk()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: io.sentry.event.Sdk getSdk()>
SPECIAL edge: specialinvoke $r12.<io.sentry.event.Sdk: void <init>(java.lang.String,java.lang.String,java.util.Set)>("sentry-java", $r14, $r13) in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Sdk: void <init>(java.lang.String,java.lang.String,java.util.Set)>
VIRTUAL edge: virtualinvoke $r15.<io.sentry.event.Event: void setSdk(io.sentry.event.Sdk)>($r12) in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: void setSdk(io.sentry.event.Sdk)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<io.sentry.event.Event: java.lang.String getServerName()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: java.lang.String getServerName()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()>() in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.EventBuilder$HostnameCache: java.lang.String getHostname()>
VIRTUAL edge: virtualinvoke $r10.<io.sentry.event.Event: void setServerName(java.lang.String)>($r11) in <io.sentry.event.EventBuilder: void autoSetMissingValues()> ==> <io.sentry.event.Event: void setServerName(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<io.sentry.event.Event: java.util.Map getTags()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: java.util.Map getTags()>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.event.Event: void setTags(java.util.Map)>($r4) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: void setTags(java.util.Map)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<io.sentry.event.Event: java.util.List getBreadcrumbs()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: java.util.List getBreadcrumbs()>
VIRTUAL edge: virtualinvoke $r6.<io.sentry.event.Event: void setBreadcrumbs(java.util.List)>($r8) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: void setBreadcrumbs(java.util.List)>
SPECIAL edge: specialinvoke $r9.<java.util.HashMap: void <init>()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r30) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<io.sentry.event.Event: java.util.Map getContexts()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: java.util.Map getContexts()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r25 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r15.<io.sentry.event.Event: void setContexts(java.util.Map)>($r16) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: void setContexts(java.util.Map)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<io.sentry.event.Event: java.util.Map getExtra()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: java.util.Map getExtra()>
VIRTUAL edge: virtualinvoke $r18.<io.sentry.event.Event: void setExtra(java.util.Map)>($r20) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: void setExtra(java.util.Map)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<io.sentry.event.Event: java.util.Map getSentryInterfaces()>() in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: java.util.Map getSentryInterfaces()>
VIRTUAL edge: virtualinvoke $r22.<io.sentry.event.Event: void setSentryInterfaces(java.util.Map)>($r24) in <io.sentry.event.EventBuilder: void makeImmutable()> ==> <io.sentry.event.Event: void setSentryInterfaces(java.util.Map)>
VIRTUAL edge: virtualinvoke $r28.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>("<recursion limit hit>") in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r27.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNull()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.Event: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.dsn.Dsn: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClientFactory: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.LinkedBlockingDeque: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClient: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.EventBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r31 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.Event: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.dsn.Dsn: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClientFactory: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.LinkedBlockingDeque: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClient: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.EventBuilder: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r33 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Class: boolean isArray()>
VIRTUAL edge: virtualinvoke $r25.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)>(r1, i0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>(r36, $i7) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>($r17, $i5) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>
VIRTUAL edge: virtualinvoke $r26.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke $r22.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r24) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r19.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartArray()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z6 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: r36 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: r36 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r21.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke $r7.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r37 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z5 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r18.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>("null") in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.Event: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.dsn.Dsn: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClientFactory: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.LinkedBlockingDeque: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryException: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.SentryClient: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.event.EventBuilder: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r13.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r16) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke $r5.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r6) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(r1) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Couldn\'t marshal \'{}\' of type \'{}\', had to be converted into a String", r1, $r31) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r32.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r34) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
CLINIT edge: $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c14) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c14) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <java.lang.String: java.lang.String valueOf(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.EventBuilder$HostnameCache$1: void <init>(io.sentry.event.EventBuilder$HostnameCache)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".printfStyle") in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r7) in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>() in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: virtualinvoke r3.<io.sentry.jul.SentryHandler: void setPrintfStyle(boolean)>($z0) in <io.sentry.jul.SentryHandler: void retrieveProperties()> ==> <io.sentry.jul.SentryHandler: void setPrintfStyle(boolean)>
SPECIAL edge: specialinvoke r0.<io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler)>(r1) in <io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler,io.sentry.jul.SentryHandler$1)> ==> <io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler)>
SPECIAL edge: specialinvoke $r0.<io.sentry.event.EventBuilder: void <init>()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSdkIntegration(java.lang.String)>("java.util.logging") in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSdkIntegration(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.util.logging.Level getLevel()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.util.logging.LogRecord: long getMillis()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: long getMillis()>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getLoggerName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getLoggerName()>
VIRTUAL edge: r51 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getMessage()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getMessage()>
VIRTUAL edge: $r10 = virtualinvoke r2.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>
VIRTUAL edge: $r46 = virtualinvoke r2.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>
VIRTUAL edge: $r47 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getMessage()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getMessage()>
VIRTUAL edge: $r48 = virtualinvoke r2.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>
VIRTUAL edge: $r49 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getMessage()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getMessage()>
VIRTUAL edge: $r53 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.Object[] getParameters()>
VIRTUAL edge: $r11 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.Object[] getParameters()>
VIRTUAL edge: $r13 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.Object[] getParameters()>
VIRTUAL edge: r57 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.Throwable getThrown()>
VIRTUAL edge: $r17 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getSourceClassName()>
VIRTUAL edge: $r37 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getSourceMethodName()>
VIRTUAL edge: $r39 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getSourceClassName()>
VIRTUAL edge: $r40 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getSourceMethodName()>
VIRTUAL edge: $r18 = virtualinvoke r2.<java.util.logging.LogRecord: java.lang.String getLoggerName()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: java.lang.String getLoggerName()>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.util.logging.LogRecord: int getThreadID()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.logging.LogRecord: int getThreadID()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>($r4) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLevel(io.sentry.event.Event$Level)>
SPECIAL edge: specialinvoke $r6.<java.util.Date: void <init>(long)>($l0) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTimestamp(java.util.Date)>($r6) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTimestamp(java.util.Date)>
VIRTUAL edge: r9 = virtualinvoke $r7.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLogger(java.lang.String)>($r8) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withLogger(java.lang.String)>
SPECIAL edge: specialinvoke $r44.<io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String)>(r51) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r44) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r14) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>(r52) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withMessage(java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>($r42) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withSentryInterface(io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)>($r38) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.StackTraceElement)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>($r18) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withCulprit(java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>($r33, $r35) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withTag(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>($r29, $r30) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r9.<io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>("Sentry-ThreadId", $r20) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.EventBuilder: io.sentry.event.EventBuilder withExtra(java.lang.String,java.lang.Object)>
VIRTUAL edge: r55 = virtualinvoke r12.<io.sentry.jul.SentryHandler: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r51, $r13) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.jul.SentryHandler: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r14.<io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)>(r51, r54, r55) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.interfaces.MessageInterface: void <init>(java.lang.String,java.util.List,java.lang.String)>
SPECIAL edge: specialinvoke $r42.<io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>(r57) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.event.interfaces.ExceptionInterface: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r38.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r39, $r40, null, -1) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>
INTERFACE edge: $r22 = interfaceinvoke r60.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r22 = interfaceinvoke r60.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r22 = interfaceinvoke r60.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r61 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r23 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r23 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<io.sentry.SentryClient: java.util.Set getMdcTags()>() in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <io.sentry.SentryClient: java.util.Set getMdcTags()>
INTERFACE edge: $z1 = interfaceinvoke $r26.<java.util.Set: boolean contains(java.lang.Object)>($r27) in <io.sentry.jul.SentryHandler: io.sentry.event.EventBuilder createEventBuilder(java.util.logging.LogRecord)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
CLINIT edge: r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2) in <io.sentry.jul.SentryHandler: java.lang.String formatMessage(java.lang.String,java.lang.Object[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2) in <io.sentry.jul.SentryHandler: java.lang.String formatMessage(java.lang.String,java.lang.Object[])> ==> <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2) in <io.sentry.jul.SentryHandler: java.lang.String formatMessage(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6) in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.UserInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.jvmti.Frame: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.HttpInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.Event: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.jvmti.Frame$LocalVariable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.dsn.Dsn: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.DebugMetaInterface$DebugImage: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.MessageInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.ExceptionInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.SentryClientFactory: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.concurrent.LinkedBlockingDeque: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.SentryException: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.StackTraceInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.interfaces.DebugMetaInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.SentryClient: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <io.sentry.event.EventBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <io.sentry.jul.SentryHandler: java.util.List formatMessageParameters(java.lang.Object[])> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke r0.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i4 = virtualinvoke r0.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i6 = virtualinvoke r0.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i5 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
VIRTUAL edge: $i7 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>() in <io.sentry.jul.SentryHandler: io.sentry.event.Event$Level getLevel(java.util.logging.Level)> ==> <java.util.logging.Level: int intValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.Date: void <init>()>() in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.util.Date: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.util.WeakHashMap: int size()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("one of \'message\' or \'data\' must be set") in <io.sentry.event.Breadcrumb: void <init>(io.sentry.event.Breadcrumb$Type,java.util.Date,io.sentry.event.Breadcrumb$Level,java.lang.String,java.lang.String,java.util.Map)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(".sentry-event") in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r4.<io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)>(r2) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event getNextEvent(java.util.Iterator)> ==> <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)>
CLINIT edge: $r33 = new java.io.File in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r8 = <io.sentry.buffer.DiskBuffer: org.slf4j.Logger logger> in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <io.sentry.buffer.DiskBuffer: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.sentry.event.Event$Level: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <io.sentry.environment.SentryEnvironment$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.HttpConnection$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.sentry.event.Breadcrumb$Type: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.sentry.event.Breadcrumb$Level: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<io.sentry.event.EventBuilder$HostnameCache: void <init>(long)>(l0) in <io.sentry.event.EventBuilder$HostnameCache: void <init>(long,io.sentry.event.EventBuilder$1)> ==> <io.sentry.event.EventBuilder$HostnameCache: void <init>(long)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <io.sentry.jvmti.FrameCache$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <io.sentry.marshaller.json.JsonMarshaller$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <io.sentry.connection.AsyncConnection$ShutDownHook: void <init>(io.sentry.connection.AsyncConnection)> ==> <java.lang.Thread: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.connection.AsyncConnection$EventSubmitter: void <init>(io.sentry.connection.AsyncConnection,io.sentry.event.Event)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <io.sentry.connection.BufferedConnection$ShutDownHook: void <init>(io.sentry.connection.BufferedConnection)> ==> <java.lang.Thread: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>($r13) in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <java.net.URL: java.net.URLConnection openConnection()>
VIRTUAL edge: $r20 = virtualinvoke r0.<io.sentry.connection.HttpConnection: java.lang.String getAuthHeader()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.connection.AbstractConnection: java.lang.String getAuthHeader()>
INTERFACE edge: $r22 = interfaceinvoke $r21.<io.sentry.marshaller.Marshaller: java.lang.String getContentType()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String getContentType()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<io.sentry.marshaller.Marshaller: java.lang.String getContentType()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String getContentType()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.sentry.marshaller.Marshaller: java.lang.String getContentEncoding()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String getContentEncoding()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.sentry.marshaller.Marshaller: java.lang.String getContentEncoding()>() in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <io.sentry.marshaller.json.JsonMarshaller: java.lang.String getContentEncoding()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t set up a connection to the Sentry server.", $r16) in <io.sentry.connection.HttpConnection: java.net.HttpURLConnection getConnection()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r2, $r3) in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1) in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r7 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>() in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception while reading the error message from the connection.", $r11) in <io.sentry.connection.HttpConnection: java.lang.String getErrorMessageFromStream(java.io.InputStream)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.net.URI getUri()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.net.URI getUri()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.lang.String getProjectId()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.lang.String getProjectId()>
VIRTUAL edge: $r9 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.lang.String getPublicKey()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.lang.String getPublicKey()>
VIRTUAL edge: $r10 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.lang.String getSecretKey()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.lang.String getSecretKey()>
VIRTUAL edge: r5 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: java.lang.String getProxyHost(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyHost(io.sentry.dsn.Dsn)>
VIRTUAL edge: r6 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: java.lang.String getProxyUser(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyUser(io.sentry.dsn.Dsn)>
VIRTUAL edge: r7 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: java.lang.String getProxyPass(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyPass(io.sentry.dsn.Dsn)>
VIRTUAL edge: i0 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)>
VIRTUAL edge: r20 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: java.lang.Double getSampleRate(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.lang.Double getSampleRate(io.sentry.dsn.Dsn)>
VIRTUAL edge: r12 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)>
VIRTUAL edge: i1 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)>
VIRTUAL edge: z0 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: boolean getBypassSecurityEnabled(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getBypassSecurityEnabled(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r14.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r5, i0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r15.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r16, $r14) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
SPECIAL edge: specialinvoke $r17.<io.sentry.connection.ProxyAuthenticator: void <init>(java.lang.String,java.lang.String)>(r6, r7) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.ProxyAuthenticator: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $d0 = virtualinvoke r20.<java.lang.Double: double doubleValue()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <java.lang.Double: double doubleValue()>
SPECIAL edge: specialinvoke $r13.<io.sentry.connection.RandomEventSampler: void <init>(double)>($d0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.RandomEventSampler: void <init>(double)>
SPECIAL edge: specialinvoke $r8.<io.sentry.connection.HttpConnection: void <init>(java.net.URL,java.lang.String,java.lang.String,java.net.Proxy,io.sentry.connection.EventSampler)>(r3, $r9, $r10, r18, r21) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: void <init>(java.net.URL,java.lang.String,java.lang.String,java.net.Proxy,io.sentry.connection.EventSampler)>
VIRTUAL edge: virtualinvoke $r8.<io.sentry.connection.HttpConnection: void setMarshaller(io.sentry.marshaller.Marshaller)>(r12) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: void setMarshaller(io.sentry.marshaller.Marshaller)>
VIRTUAL edge: virtualinvoke $r8.<io.sentry.connection.HttpConnection: void setTimeout(int)>(i1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: void setTimeout(int)>
VIRTUAL edge: virtualinvoke $r8.<io.sentry.connection.HttpConnection: void setBypassSecurity(boolean)>(z0) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createHttpConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.HttpConnection: void setBypassSecurity(boolean)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.host", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyHost(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.host", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyHost(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.user", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyUser(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.user", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyUser(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.password", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyPass(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.password", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.String getProxyPass(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.port", r0) in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80) in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("http.proxy.port", r0) in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80) in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("sample.rate", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.Double getSampleRate(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)>($r1, null) in <io.sentry.DefaultSentryClientFactory: java.lang.Double getSampleRate(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Double parseDouble(java.lang.String,java.lang.Double)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("sample.rate", r0) in <io.sentry.DefaultSentryClientFactory: java.lang.Double getSampleRate(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = new io.sentry.marshaller.json.JsonMarshaller in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("timeout", r0) in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("timeout", r0) in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $i0 = <io.sentry.DefaultSentryClientFactory: int TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $i0 = <io.sentry.DefaultSentryClientFactory: int TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<io.sentry.connection.OutputStreamConnection: void <init>(java.io.OutputStream)>($r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.OutputStreamConnection: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r0.<io.sentry.connection.OutputStreamConnection: void setMarshaller(io.sentry.marshaller.Marshaller)>($r5) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.connection.OutputStreamConnection: void setMarshaller(io.sentry.marshaller.Marshaller)>
VIRTUAL edge: $r5 = virtualinvoke r3.<io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)>(r4) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createStdOutConnection(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r4.<io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)>(r0) in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r2.<io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)>($r3, $i0) in <io.sentry.DefaultSentryClientFactory: io.sentry.buffer.Buffer getBuffer(io.sentry.dsn.Dsn)> ==> <io.sentry.buffer.DiskBuffer: void <init>(java.io.File,int)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.size", r0) in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50) in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("buffer.size", r0) in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50) in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>() in <io.sentry.DefaultSentryClientFactory: long getBufferFlushtime(io.sentry.dsn.Dsn)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getBufferedConnectionGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>() in <io.sentry.DefaultSentryClientFactory: long getBufferedConnectionShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)>
VIRTUAL edge: i1 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)>
VIRTUAL edge: i2 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)>
VIRTUAL edge: z0 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: l3 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r10.<java.util.concurrent.LinkedBlockingDeque: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <java.util.concurrent.LinkedBlockingDeque: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(i2) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <java.util.concurrent.LinkedBlockingDeque: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int,io.sentry.DefaultSentryClientFactory$1)>(i1, null) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int,io.sentry.DefaultSentryClientFactory$1)>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i0, 0L, $r5, r11, $r4, $r6) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
SPECIAL edge: specialinvoke $r8.<io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)>(r9, $r3, z0, l3) in <io.sentry.DefaultSentryClientFactory: io.sentry.connection.Connection createAsyncConnection(io.sentry.dsn.Dsn,io.sentry.connection.Connection)> ==> <io.sentry.connection.AsyncConnection: void <init>(io.sentry.connection.Connection,java.util.concurrent.ExecutorService,boolean,long)>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.threads", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r3) in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.threads", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.priority", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.priority", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.queuesize", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50) in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.queuesize", r0) in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50) in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.queue.overflow", r0) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r7) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.Arrays: java.lang.String toString(java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>(r1) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: boolean isNullOrEmpty(java.lang.String)>
STATIC edge: r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.queue.overflow", r0) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = <io.sentry.DefaultSentryClientFactory: java.util.Map REJECT_EXECUTION_HANDLERS> in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r2 = <io.sentry.DefaultSentryClientFactory: java.util.Map REJECT_EXECUTION_HANDLERS> in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.gracefulshutdown", r0) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.gracefulshutdown", r0) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.shutdowntimeout", r0) in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Long parseLong(java.lang.String,java.lang.Long)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("async.shutdowntimeout", r0) in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $l0 = <io.sentry.DefaultSentryClientFactory: long ASYNC_SHUTDOWN_TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $l0 = <io.sentry.DefaultSentryClientFactory: long ASYNC_SHUTDOWN_TIMEOUT_DEFAULT> in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("The \'extratags\' option is deprecated, please use the \'mdctags\' option instead.") in <io.sentry.DefaultSentryClientFactory: java.util.Set getMdcTags(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void warn(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getUncaughtHandlerEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>("No \'stacktrace.app.packages\' was configured, this option is highly recommended as it affects stacktrace grouping and display on Sentry. See documentation: https://docs.sentry.io/clients/java/config/#in-application-stack-frames") in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <org.slf4j.Logger: void warn(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r5) in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("") in <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: r6 = virtualinvoke r5.<io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>() in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <io.sentry.event.interfaces.SentryStackTraceElement: java.lang.String getModule()>
VIRTUAL edge: $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>(r4) in <io.sentry.marshaller.json.StackTraceInterfaceBinding: boolean isFrameInApp(io.sentry.event.interfaces.SentryStackTraceElement)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.UUID: java.lang.String toString()>() in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatId(java.util.UUID)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "") in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatId(java.util.UUID)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.sentry.event.Event$Level: java.lang.String name()>() in <io.sentry.marshaller.json.JsonMarshaller: java.lang.String formatLevel(io.sentry.event.Event$Level)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r9) in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.sentry.event.Sdk: java.lang.String getName()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.event.Sdk: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.sentry.event.Sdk: java.lang.String getVersion()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.event.Sdk: java.lang.String getVersion()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.sentry.event.Sdk: java.util.Set getIntegrations()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.event.Sdk: java.util.Set getIntegrations()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.sentry.event.Sdk: java.util.Set getIntegrations()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.event.Sdk: java.util.Set getIntegrations()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.sentry.event.Sdk: java.util.Set getIntegrations()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.event.Sdk: java.util.Set getIntegrations()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeSdk(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.Sdk)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeTags(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeStartObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.util.Date getTimestamp()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.util.Date getTimestamp()>
VIRTUAL edge: $r6 = virtualinvoke r4.<io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Type getType()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Type getType()>
VIRTUAL edge: $r25 = virtualinvoke r4.<io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Type getType()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Type getType()>
VIRTUAL edge: $r7 = virtualinvoke r4.<io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Level getLevel()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Level getLevel()>
VIRTUAL edge: $r23 = virtualinvoke r4.<io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Level getLevel()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: io.sentry.event.Breadcrumb$Level getLevel()>
VIRTUAL edge: $r8 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.lang.String getMessage()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.lang.String getMessage()>
VIRTUAL edge: $r22 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.lang.String getMessage()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.lang.String getCategory()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.lang.String getCategory()>
VIRTUAL edge: $r21 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.lang.String getCategory()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.lang.String getCategory()>
VIRTUAL edge: $r10 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.util.Map getData()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.util.Map getData()>
VIRTUAL edge: $r11 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.util.Map getData()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.util.Map getData()>
VIRTUAL edge: $r12 = virtualinvoke r4.<io.sentry.event.Breadcrumb: java.util.Map getData()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb: java.util.Map getData()>
VIRTUAL edge: $l0 = virtualinvoke $r5.<java.util.Date: long getTime()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<io.sentry.event.Breadcrumb$Type: java.lang.String getValue()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb$Type: java.lang.String getValue()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<io.sentry.event.Breadcrumb$Level: java.lang.String getValue()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.event.Breadcrumb$Level: java.lang.String getValue()>
INTERFACE edge: $z2 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeBreadcumbs(com.fasterxml.jackson.core.JsonGenerator,java.util.List)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeContexts(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r7) in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r8) in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r8) in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndObject()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeExtras(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r5) in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeEndArray()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeCollection(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.util.Collection)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.buffer.DiskBuffer$1: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.util.CircularFifoQueue$1: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
VIRTUAL edge: virtualinvoke r12.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r14) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeFieldName(java.lang.String)>
SPECIAL edge: $r15 = specialinvoke r7.<io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)>(r6) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.ExceptionInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.UserInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.MessageInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
INTERFACE edge: interfaceinvoke $r15.<io.sentry.marshaller.json.InterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>(r12, $r17) in <io.sentry.marshaller.json.JsonMarshaller: void writeInterfaces(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void writeInterface(com.fasterxml.jackson.core.JsonGenerator,io.sentry.event.interfaces.SentryInterface)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<io.sentry.event.Event$Level: int ordinal()>() in <io.sentry.marshaller.json.JsonMarshaller$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke $r20.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($b42) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(int)>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>($r3, $i5) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeObject(java.lang.Object,int)>
SPECIAL edge: specialinvoke r2.<io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>() in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()>
VIRTUAL edge: virtualinvoke $r18.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($s37) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(int)>
VIRTUAL edge: virtualinvoke $r16.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i32) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(int)>
VIRTUAL edge: virtualinvoke $r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l27) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(long)>
VIRTUAL edge: virtualinvoke $r12.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(float)>
VIRTUAL edge: virtualinvoke $r10.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>($d0) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeNumber(double)>
VIRTUAL edge: virtualinvoke $r7.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r8) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>($z8) in <io.sentry.marshaller.json.SentryJsonGenerator: void writeArray(java.lang.Object,int)> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeBoolean(boolean)>
VIRTUAL edge: virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>("...") in <io.sentry.marshaller.json.SentryJsonGenerator: void writeElided()> ==> <io.sentry.marshaller.json.SentryJsonGenerator: void writeString(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.jul.SentryHandler$DropSentryFilter: void <init>(io.sentry.jul.SentryHandler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r10 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: virtualinvoke r2.<java.io.File: boolean delete()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>($r3) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r34.<java.io.FileInputStream: void <init>(java.io.File)>($r33) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r34.<java.io.FileInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r34.<java.io.FileInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r34.<java.io.FileInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.FileInputStream: void close()>
SPECIAL edge: specialinvoke $r35.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r34) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.ObjectInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: r5 = virtualinvoke $r35.<java.io.ObjectInputStream: java.lang.Object readObject()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.ObjectInputStream: java.lang.Object readObject()>
VIRTUAL edge: virtualinvoke $r35.<java.io.ObjectInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r35.<java.io.ObjectInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r35.<java.io.ObjectInputStream: void close()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading Event file: ") in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r6) in <io.sentry.buffer.DiskBuffer: io.sentry.event.Event fileToEvent(java.io.File)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.event.EventBuilder$HostnameCache: void <init>(long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0) in <io.sentry.event.EventBuilder$HostnameCache: void <init>(long)> ==> <java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getProxyPort(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: i0 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: java.util.Collection getInAppFrames(io.sentry.dsn.Dsn)>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)>(r1) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)>
SPECIAL edge: specialinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void <init>(int)>(i0) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void <init>(int)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/StackTraceInterface;", $r4) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/ExceptionInterface;", $r7) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/MessageInterface;", $r8) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/UserInterface;", $r9) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/DebugMetaInterface;", $r10) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>(class "Lio/sentry/event/interfaces/HttpInterface;", $r11) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void addInterfaceBinding(java.lang.Class,io.sentry.marshaller.json.InterfaceBinding)>
VIRTUAL edge: virtualinvoke $r2.<io.sentry.marshaller.json.JsonMarshaller: void setCompression(boolean)>($z1) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.JsonMarshaller: void setCompression(boolean)>
SPECIAL edge: specialinvoke $r4.<io.sentry.marshaller.json.StackTraceInterfaceBinding: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<io.sentry.marshaller.json.StackTraceInterfaceBinding: void setRemoveCommonFramesWithEnclosing(boolean)>($z0) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void setRemoveCommonFramesWithEnclosing(boolean)>
VIRTUAL edge: virtualinvoke $r4.<io.sentry.marshaller.json.StackTraceInterfaceBinding: void setInAppFrames(java.util.Collection)>($r6) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.StackTraceInterfaceBinding: void setInAppFrames(java.util.Collection)>
SPECIAL edge: specialinvoke $r7.<io.sentry.marshaller.json.ExceptionInterfaceBinding: void <init>(io.sentry.marshaller.json.InterfaceBinding)>($r4) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.ExceptionInterfaceBinding: void <init>(io.sentry.marshaller.json.InterfaceBinding)>
SPECIAL edge: specialinvoke $r8.<io.sentry.marshaller.json.MessageInterfaceBinding: void <init>(int)>(i0) in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.MessageInterfaceBinding: void <init>(int)>
SPECIAL edge: specialinvoke $r9.<io.sentry.marshaller.json.UserInterfaceBinding: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.UserInterfaceBinding: void <init>()>
SPECIAL edge: specialinvoke $r10.<io.sentry.marshaller.json.DebugMetaInterfaceBinding: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.DebugMetaInterfaceBinding: void <init>()>
SPECIAL edge: specialinvoke $r11.<io.sentry.marshaller.json.HttpInterfaceBinding: void <init>()>() in <io.sentry.DefaultSentryClientFactory: io.sentry.marshaller.Marshaller createMarshaller(io.sentry.dsn.Dsn)> ==> <io.sentry.marshaller.json.HttpInterfaceBinding: void <init>()>
CLINIT edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("maxmessagelength", r0) in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>($r1, $r2) in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <io.sentry.util.Util: java.lang.Integer parseInteger(java.lang.String,java.lang.Integer)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000) in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("maxmessagelength", r0) in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000) in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("stacktrace.hidecommon", r0) in <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("stacktrace.hidecommon", r0) in <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.DefaultSentryClientFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("compression", r0) in <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>
CLINIT edge: $r2 = staticinvoke <io.sentry.config.Lookup: java.lang.String lookup(java.lang.String,io.sentry.dsn.Dsn)>("compression", r0) in <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.config.Lookup: void <clinit>()>
CLINIT edge: $r1 = <io.sentry.DefaultSentryClientFactory: java.lang.String FALSE> in <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.SentryClientFactory: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.sentry.dsn.Dsn: java.util.Set getProtocolSettings()>() in <io.sentry.DefaultSentryClientFactory: boolean getBypassSecurityEnabled(io.sentry.dsn.Dsn)> ==> <io.sentry.dsn.Dsn: java.util.Set getProtocolSettings()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("naive") in <io.sentry.DefaultSentryClientFactory: boolean getBypassSecurityEnabled(io.sentry.dsn.Dsn)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getBufferSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Runtime: int availableProcessors()>() in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <java.lang.Runtime: int availableProcessors()>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getAsyncThreads(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getAsyncPriority(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getAsyncQueueSize(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: r17 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.String: java.lang.String toLowerCase()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Set: java.lang.Object[] toArray()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RejectedExecutionHandler not found: \'") in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', valid choices are: ") in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15) in <io.sentry.DefaultSentryClientFactory: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler(io.sentry.dsn.Dsn)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getAsyncGracefulShutdownEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>() in <io.sentry.DefaultSentryClientFactory: long getAsyncShutdownTimeout(io.sentry.dsn.Dsn)> ==> <java.lang.Long: long longValue()>
SPECIAL edge: specialinvoke r0.<io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)>(i0) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int,io.sentry.DefaultSentryClientFactory$1)> ==> <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)>
CLINIT edge: r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.System: java.lang.SecurityManager getSecurityManager()>
CLINIT edge: $r6 = <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: java.util.concurrent.atomic.AtomicInteger POOL_NUMBER> in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <io.sentry.marshaller.json.JsonMarshaller: io.sentry.marshaller.json.InterfaceBinding getInterfaceBinding(io.sentry.event.interfaces.SentryInterface)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.sentry.DefaultSentryClientFactory: int getMaxMessageLength(io.sentry.dsn.Dsn)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getHideCommonFramesEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <io.sentry.DefaultSentryClientFactory: boolean getCompressionEnabled(io.sentry.dsn.Dsn)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
VIRTUAL edge: $r11 = virtualinvoke r2.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>
VIRTUAL edge: $r11 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sentry-pool-") in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-thread-") in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.sentry.DefaultSentryClientFactory$DaemonThreadFactory: void <init>(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
