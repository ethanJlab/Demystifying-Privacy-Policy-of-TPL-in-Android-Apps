FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("exec") in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("exec") in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r2 = <com.jcraft.jsch.Session: com.jcraft.jsch.Random random> in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r195) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: $r212 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("en") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r210 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r209) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r65) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: $r79 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r78 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r218 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r217 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r275 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r273, ",") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
STATIC edge: $r91 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r90 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r230 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r229 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r279 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r101) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r105 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r104 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r84 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r275 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r273, ",") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
STATIC edge: r63 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r272, ",") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
STATIC edge: r269 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r60) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $i31 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r267) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r119 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r58 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $l15 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r125 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r39 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r143 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r142) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r139 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r136 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r135) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r132 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r35 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r34, 0, $r33, 0, i44) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, r258, 0, $i4) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r162 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r257 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r177 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r176, $i42, i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
STATIC edge: $r180 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: staticinvoke <com.jcraft.jsch.Packet: void setRandom(com.jcraft.jsch.Random)>($r3) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Packet: void setRandom(com.jcraft.jsch.Random)>
STATIC edge: r251 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r188) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r195) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r210 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r209) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r65) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r78 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r217 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r275 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r273, ",") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r229 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r84 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r63 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r272, ",") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i31 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r267) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r136 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r135) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, r258, 0, $i4) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r177 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r176, $i42, i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Packet: void setRandom(com.jcraft.jsch.Random)>($r3) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>(r1) in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>(r1) in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>
CLINIT edge: $r23 = <com.jcraft.jsch.Session: com.jcraft.jsch.Random random> in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r66, 0, r75, 0, $i47) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r79 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>($i21, r1) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r29 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r20) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r19) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r48, $r47) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
STATIC edge: $r65 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r62 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r66, 0, r75, 0, $i47) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: r79 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>($i21, r1) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r26 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r19) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r37 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r62 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>(10L) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <java.lang.Thread: void sleep(long)>
STATIC edge: $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r31 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r75 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i81, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r74 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i80, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r64 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>
STATIC edge: r63 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r62) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r60) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r61 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i77, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r59 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i76, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r58 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i73, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r57 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i72, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r56 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i71, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r55 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i70, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r52 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i68, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: r46 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i66, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
STATIC edge: $l61 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r75 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i81, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r74 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i80, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r64 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r63 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r62) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r60) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r61 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i77, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r59 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i76, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r58 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i73, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r57 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i72, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r56 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i71, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r55 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i70, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r52 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i68, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r46 = staticinvoke <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>(i66, r0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $l61 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.Thread: void yield()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)>
STATIC edge: staticinvoke <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)>
STATIC edge: staticinvoke <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)>
STATIC edge: $r23 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>(r0, r1, i0, r2, i1, r3) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>(r0, r1, i0, r2, i1, r3) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
CLINIT edge: staticinvoke <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: java.lang.String[] getPortForwardingL()> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: java.lang.String[] getPortForwardingL()> ==> <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(r0, r1, i0, r2, i1, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(r0, r1, i0, r2, i1, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(r0, r1, i0, r2, i1, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])>(r0, r1, i0, r2, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])>(r0, r1, i0, r2, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])>(r0, r1, i0, r2, r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>(r0, i0) in <com.jcraft.jsch.Session: void delPortForwardingR(int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>(r0, i0) in <com.jcraft.jsch.Session: void delPortForwardingR(int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>(r0, i0) in <com.jcraft.jsch.Session: void delPortForwardingR(int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Host(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Host(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Host(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setPort(int)>(i0) in <com.jcraft.jsch.Session: void setX11Port(int)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setPort(int)>(i0) in <com.jcraft.jsch.Session: void setX11Port(int)> ==> <com.jcraft.jsch.ChannelX11: void setPort(int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setPort(int)>(i0) in <com.jcraft.jsch.Session: void setX11Port(int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Cookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Cookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setX11Cookie(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setPassword(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void setPassword(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, $i1) in <com.jcraft.jsch.Session: void setPassword(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, $i1) in <com.jcraft.jsch.Session: void setPassword(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: r7 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>(r2) in <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>(r2) in <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.Session: java.lang.String getServerVersion()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.Session: java.lang.String getServerVersion()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.Session: java.lang.String getClientVersion()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.Session: java.lang.String getClientVersion()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.Session: void setClientVersion(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.Session: void setClientVersion(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r4 = <com.jcraft.jsch.Session: byte[] keepalivemsg> in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
STATIC edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
STATIC edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r2, $i2, i1) in <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r2, $i2, i1) in <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, $i8, 4) in <com.jcraft.jsch.Buffer: void putInt(int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, $i8, 4) in <com.jcraft.jsch.Buffer: void putInt(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, $i13, 4) in <com.jcraft.jsch.Buffer: void putLong(long)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, $i26, 4) in <com.jcraft.jsch.Buffer: void putLong(long)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, $i13, 4) in <com.jcraft.jsch.Buffer: void putLong(long)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 1, $i7) in <com.jcraft.jsch.Buffer: byte[] getMPIntBits()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 1, $i7) in <com.jcraft.jsch.Buffer: byte[] getMPIntBits()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, $r1, 0, $i3) in <com.jcraft.jsch.Buffer: void shift()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, $r1, 0, $i3) in <com.jcraft.jsch.Buffer: void shift()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>(r0) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("signal") in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("signal") in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <java.lang.String: java.lang.String valueOf(int)>
CLINIT edge: $r13 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r28 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r45) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r27 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r44) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
CLINIT edge: $r20 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r27 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r44) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r23, $r4) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r23, $r4) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r37) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r37) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: $r9 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r10 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $c4 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $c4 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $c4 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: r22 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r22 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: r56 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r3, $r4) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r56 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r3, $r4) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r27 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r27 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r26, $r3) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r27 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r26, $r3) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r3 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r40 = new java.io.File in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r29 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r29 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r29 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: r24 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r23, $r3) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r24 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r23, $r3) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: r54 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r52) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r72 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r69, $r16) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: r70 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r68, $r24) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: z6 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>(r55, r71) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
STATIC edge: r71 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r70, "UTF-8") in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r70 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r68, $r25) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: z6 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r55, r68) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
STATIC edge: r15 = staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r14) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r61 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r54, $r60) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r55 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r59, $r5) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r59 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r53) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: r55 = staticinvoke <com.jcraft.jsch.Util: byte[] unquote(byte[])>(r58) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: byte[] unquote(byte[])>
STATIC edge: r56 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r51) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: r54 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r52) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r26, $r3) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r29, $r11) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r14) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r26, $r3) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: r24 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r24, $r5) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r23, $r3) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r24 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: r29 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r29, $r5) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r27, $r3) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r29 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r27, $r3) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r21, $r6) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r21, $r6) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r21, $r6) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r21, $r6) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r16, $r3) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r16, $r3) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r11, $r5) in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r11, $r5) in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r9, $r3) in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r9, $r3) in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
CLINIT edge: r47 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>($r34, $i8) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r48 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r24, $i7, 10000) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
STATIC edge: r47 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>($r34, $i8) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
STATIC edge: r45 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r26) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r13 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r48 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r24, $i7, 10000) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r47 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>($r34, $i8) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelX11: java.lang.String host> in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r1, $i0, 10000) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
CLINIT edge: $r13 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r1, $i0, 10000) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelX11: java.lang.String host> in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i12, r3, $i6, i14) in <com.jcraft.jsch.Channel$1: void write(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i12, r3, $i6, i14) in <com.jcraft.jsch.Channel$1: void write(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelExec: void setCommand(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelExec: void setCommand(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r3) in <com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r3 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() in <com.jcraft.jsch.JSch: void <init>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() in <com.jcraft.jsch.JSch: void <init>()> ==> <java.lang.System: java.util.Properties getProperties()>
CLINIT edge: $r7 = <com.jcraft.jsch.JSch: java.util.Hashtable config> in <com.jcraft.jsch.JSch: void <init>()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.Session in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r8 = new com.jcraft.jsch.KnownHosts in <com.jcraft.jsch.JSch: void setKnownHosts(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
CLINIT edge: $r8 = new com.jcraft.jsch.KnownHosts in <com.jcraft.jsch.JSch: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
CLINIT edge: $r3 = new com.jcraft.jsch.KnownHosts in <com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r3) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r3) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>(r0, null, r1) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])> ==> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>(r0, r1, r2) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>
STATIC edge: r4 = staticinvoke <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>(r0, r1, r2, r3) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[],byte[],byte[])> ==> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r5, 0, $i1) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r8) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r5) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r5, 0, $i1) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r8) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r5) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.JSch: java.util.Hashtable config> in <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.JSch: java.util.Hashtable config> in <com.jcraft.jsch.JSch: void setConfig(java.util.Hashtable)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r2 = <com.jcraft.jsch.JSch: java.util.Hashtable config> in <com.jcraft.jsch.JSch: void setConfig(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r0 = <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger DEVNULL> in <com.jcraft.jsch.JSch: void setLogger(com.jcraft.jsch.Logger)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger logger> = r0 in <com.jcraft.jsch.JSch: void setLogger(com.jcraft.jsch.Logger)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r3 = <com.jcraft.jsch.HostKey: byte[] sshdss> in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r3) in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r1) in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r1 = <com.jcraft.jsch.HostKey: byte[] sshrsa> in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r3) in <com.jcraft.jsch.HostKey: java.lang.String getType()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>($r2, 0, $i0) in <com.jcraft.jsch.HostKey: java.lang.String getKey()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r3) in <com.jcraft.jsch.HostKey: java.lang.String getKey()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>($r2, 0, $i0) in <com.jcraft.jsch.HostKey: java.lang.String getKey()> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("md5") in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>(r13, $r5) in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
STATIC edge: r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("md5") in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>(r13, $r5) in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r9 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r9 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>(r13, $r5) in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
STATIC edge: r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>(r13, $r5) in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>($r11, r2) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>($r11, r2) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
CLINIT edge: $r7 = new java.io.File in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r34 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r17 = newarray (com.jcraft.jsch.HostKey)[i4] in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r14, $r15) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z5 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r14, $r15) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
CLINIT edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-userauth") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r32 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r49) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r38 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r48) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r19 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("none") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r44 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r12) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r41 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r11 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r42 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-userauth") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r32 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r49) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r38 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r48) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.ChannelDirectTCPIP in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.ChannelDirectTCPIP in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r65, 0, r1, i0, i56) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r28 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r27) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>($r37, $r38, $l30, $i31, $r39) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
STATIC edge: $r39 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r36) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r35 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r33) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r32 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r31) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r41 = staticinvoke <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>($r40) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r44 = staticinvoke <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>($r43) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>($r25) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r24 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r23) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: int access$1200(com.jcraft.jsch.ChannelSftp,byte[],int,int)>($r20, $r22, 0, 4) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$1200(com.jcraft.jsch.ChannelSftp,byte[],int,int)>
STATIC edge: $r21 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r19) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r18 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r17) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r51 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r50) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: void access$1100(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int)>($r48, $r49, $i38) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void access$1100(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int)>
STATIC edge: $r49 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r47) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r87 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r85) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r84 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r83) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r14) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r7, $r8, $r9) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r6) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>($r59, $r60, $l41, i58, $r61) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
STATIC edge: $r61 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r58) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r94 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r93) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $i40 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$800(com.jcraft.jsch.ChannelSftp)>($r57) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$800(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r55 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r54) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r92 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r91) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $i6 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$800(com.jcraft.jsch.ChannelSftp)>($r5) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$800(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r63 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r62) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r70, i56, $r69, 0, $i51) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r65, 0, r1, i0, i56) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r84 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r83) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r84 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r83) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r84 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r83) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>($r9, $r8, $r7) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>($r4) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp)>($r2) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $i21 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r19) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: $i16 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r15) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $z3 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>($r12, $r11, $r10) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>($r25) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>($r16) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $i9 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r9) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>
STATIC edge: i3 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>($r7, $r6, $l2, r5, i23, i24) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>
STATIC edge: $i22 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r20) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>
STATIC edge: $i21 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r19) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>
CLINIT edge: i3 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>($r7, $r6, $l2, r5, i23, i24) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: i3 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>($r7, $r6, $l2, r5, i23, i24) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: i3 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>($r7, $r6, $l2, r5, i23, i24) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $i21 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r19) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $i21 = staticinvoke <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>($r19) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>($r2, null, $r1) in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>($r2, null, $r1) in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>($r2, null, $r1) in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>($r2, null, $r1) in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>($r4, $r3, $r2) in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>($r4, $r3, $r2) in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>($r4, $r3, $r2) in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>($r4, $r3, $r2) in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("sftp") in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("subsystem") in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("subsystem") in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("shell") in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("shell") in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("pty-req") in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("pty-req") in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.RequestX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.RequestX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.ChannelX11: byte[] cookie> = $r1 in <com.jcraft.jsch.RequestX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: byte[] cookie> = $r1 in <com.jcraft.jsch.RequestX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("MIT-MAGIC-COOKIE-1") in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("x11-req") in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r9 = staticinvoke <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("x11-req") in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("subsystem") in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("subsystem") in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("window-change") in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("window-change") in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("auth-agent-req@openssh.com") in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("auth-agent-req@openssh.com") in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("env") in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("env") in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()> ==> <java.lang.String: void <clinit>()>
STATIC edge: r5 = staticinvoke <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>("from remote:", r0, null, $r2) in <com.jcraft.jsch.LocalIdentityRepository: boolean add(byte[])> ==> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r0, r7) in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r0, r7) in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)>(r0, i0, 1024) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)>(r0, i0, 1024) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int)> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)>
CLINIT edge: $r2 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r0 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
FINALIZE edge: null in <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPair: void finalize()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r1) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $b14 = staticinvoke <com.jcraft.jsch.KeyPair: byte b2a(byte)>($b13) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPair: byte b2a(byte)>
STATIC edge: $b10 = staticinvoke <com.jcraft.jsch.KeyPair: byte b2a(byte)>($b9) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPair: byte b2a(byte)>
STATIC edge: r5 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r3, 0, $i0) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r1) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: $r8 = <com.jcraft.jsch.KeyPair: byte[] cr> in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r5 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r3, 0, $i0) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r7) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
CLINIT edge: $r5 = <com.jcraft.jsch.KeyPair: byte[] space> in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("---- END SSH2 PUBLIC KEY ----") in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r11) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("---- BEGIN SSH2 PUBLIC KEY ----") in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
CLINIT edge: $r5 = <com.jcraft.jsch.KeyPair: byte[] cr> in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>($r3, r2) in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>($r3, r2) in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, 0, $i1) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r1) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, 0, $i1) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r1) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r4 = new java.io.File in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>(r5, r1, r7) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>(r5, r1, r7) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r15 = staticinvoke <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r15) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r15) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: r19 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>(r2, r15, r14) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>
STATIC edge: r14 = staticinvoke <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)>(r17) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)>
STATIC edge: r15 = staticinvoke <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r15) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r15) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r19 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>(r2, r15, r14) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r63 = new java.lang.String in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r0, i209, $i6) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r0, i205, $i19) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i26, r0, i203, $i25) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r99 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r12) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r96) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: r79 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r96, 0, $i48) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r96, $i57, r96, $i56, $i55) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i197, r96, 0, $i46) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $b90 = staticinvoke <com.jcraft.jsch.KeyPair: byte a2b(byte)>($b88) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: byte a2b(byte)>
STATIC edge: $b86 = staticinvoke <com.jcraft.jsch.KeyPair: byte a2b(byte)>($b85) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: byte a2b(byte)>
STATIC edge: r95 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r36) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r36 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes128-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: $z4 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r30) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes128-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: r94 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r45) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r45 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes192-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: $z5 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r39) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
STATIC edge: $r39 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes192-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: r93 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r54) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r54 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: $z6 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r48) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
STATIC edge: $r48 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: r87 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])>(r8, r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])>
STATIC edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>
STATIC edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>
CLINIT edge: $r7 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r7 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r9 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r9 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r10 = new java.lang.String in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r0, i209, $i6) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r0, i205, $i19) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i26, r0, i203, $i25) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r99 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r12) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r96) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r79 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r96, 0, $i48) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i197, r96, 0, $i46) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $b86 = staticinvoke <com.jcraft.jsch.KeyPair: byte a2b(byte)>($b85) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $z4 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r30) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes128-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r39) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r39 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes192-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $z6 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r48) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r48 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r87 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])>(r8, r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: r85 = staticinvoke <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)>(r8, $r62) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPair: void dispose()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPair: void dispose()> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: $r5 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r4 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>(r3) in <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>
CLINIT edge: $r4 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>(r10) in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>
STATIC edge: r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r11 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r11 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r3 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r10) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r11 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r10) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r3 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPairRSA: void dispose()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPairRSA: void dispose()> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: $r7 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r4 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>(r3) in <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>
CLINIT edge: $r4 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>(r12) in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])>
STATIC edge: r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r13 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r13 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r3 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r9) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r9) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r3 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPairDSA: void dispose()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>($r1) in <com.jcraft.jsch.KeyPairDSA: void dispose()> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: i4 = <com.jcraft.jsch.ProxySOCKS4: int DEFAULTPORT> in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <com.jcraft.jsch.ProxySOCKS4: void <clinit>()>
STATIC edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r29, $i16, i1) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r54, i21, $i12) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r25 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r55 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r9) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r29, $i16, i1) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r54, i21, $i12) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r25 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i0 = <com.jcraft.jsch.ProxySOCKS4: int DEFAULTPORT> in <com.jcraft.jsch.ProxySOCKS4: int getDefaultPort()> ==> <com.jcraft.jsch.ProxySOCKS4: void <clinit>()>
CLINIT edge: $r35 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r32 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r31 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r38 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r19 = <com.jcraft.jsch.DHG14: byte[] p> in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $r19 = <com.jcraft.jsch.DHG14: byte[] p> in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.DHG14: void <clinit>()>
CLINIT edge: $r12 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r89 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r62 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r61 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r114 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r57) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r55, i129, r111, 0, i130) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r50, i123, r109, 0, i124) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r45, i117, r107, 0, i118) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, i111, r105, 0, i112) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r83 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r82 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r103 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r78) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r76, i106, r100, 0, i107) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r71, i100, r98, 0, i101) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r33, 4, i95) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
CLINIT edge: $r35 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r61 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r94 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, i111, r105, 0, i112) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r82 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r96 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r71, i100, r98, 0, i101) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r33, 4, i95) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: i4 = <com.jcraft.jsch.ProxySOCKS5: int DEFAULTPORT> in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <com.jcraft.jsch.ProxySOCKS5: void <clinit>()>
STATIC edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r42 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r41, $i27, i1) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r63, 0, r61, i44, i4) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r63 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r12) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r35, 0, r61, i37, $i24) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r35 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r34) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 0, r61, i35, $i20) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r29) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r42 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r41, $i27, i1) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r63, 0, r61, i44, i4) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r63 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r12) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 0, r61, i35, $i20) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r29) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i0 = <com.jcraft.jsch.ProxySOCKS5: int DEFAULTPORT> in <com.jcraft.jsch.ProxySOCKS5: int getDefaultPort()> ==> <com.jcraft.jsch.ProxySOCKS5: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r2) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r52 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r49) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r35 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("gssapi-with-mic") in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r34 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r86 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r27) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r85 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r84) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r83, $r71) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("gssapi-with-mic") in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r2) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r11 = <com.jcraft.jsch.UserAuthGSSAPIWithMIC: byte[][] supported_oid> in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <clinit>()>
STATIC edge: r3 = staticinvoke <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSManager getInstance()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSManager getInstance()>
STATIC edge: $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r4) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
CLINIT edge: $r0 = <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String useSubjectCredsOnly> in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>("javax.security.auth.useSubjectCredsOnly", "true") in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>("javax.security.auth.useSubjectCredsOnly", "true") in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>("javax.security.auth.useSubjectCredsOnly", "false") in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r7 = <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String useSubjectCredsOnly> in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r3 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1") in <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, 0, $i13) in <com.jcraft.jsch.jcraft.HMAC: void init(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, $r4, 0, $i4) in <com.jcraft.jsch.jcraft.HMAC: void init(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, $r2, 0, $i3) in <com.jcraft.jsch.jcraft.HMAC: void init(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, 0, $i13) in <com.jcraft.jsch.jcraft.HMAC: void init(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, $r2, 0, $i3) in <com.jcraft.jsch.jcraft.HMAC: void init(byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r3 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jcraft.HMACMD5: void <init>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5") in <com.jcraft.jsch.jcraft.HMACMD5: void <init>()> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r20, 0, r14, 0, $i12) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r20, i13, i14) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r20, 0, r14, 0, $i12) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r16 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r20, i13, i14) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r14, 0, i16) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r24, i0, i16) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, r29, i0, i16) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, r29, 0, i0) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, $r26, i16, $i19) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r14, 0, i16) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r20 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r24, i0, i16) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, r29, 0, i0) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, $r26, i16, $i19) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r35 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r32 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r31 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r38 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r30 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r19 = <com.jcraft.jsch.DHG1: byte[] p> in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $r19 = <com.jcraft.jsch.DHG1: byte[] p> in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.DHG1: void <clinit>()>
CLINIT edge: $r12 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r89 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r62 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r61 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r114 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r57) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r55, i129, r111, 0, i130) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r50, i123, r109, 0, i124) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r45, i117, r107, 0, i118) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, i111, r105, 0, i112) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r83 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r82 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r103 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r78) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r76, i106, r100, 0, i107) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r71, i100, r98, 0, i101) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r33, 4, i95) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
CLINIT edge: $r35 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r61 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r94 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, i111, r105, 0, i112) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r82 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r96 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r71, i100, r98, 0, i101) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r33, 4, i95) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: $r25 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r89) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r42) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: $r49 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("password") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r47 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r42 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r41) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r40 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r86) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: r85 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r84) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("password") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r77 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r79) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r36 = newarray (java.lang.String)[1] in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r80 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r77 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r79) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r78 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r36 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r91) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r42 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r90) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 5, r23, $i17, $i16) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r86, 0, r23, 4, i24) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r20 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r19) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r16 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("publickey") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r77) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: r77 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r85) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r84 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r83) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r65 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r64) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r61 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("publickey") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r59 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r78 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r86, 0, r23, 4, i24) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r39 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r36 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r25 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r42 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r40 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r25 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $i0 = <com.jcraft.jsch.DHGEX: int min> in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $i0 = <com.jcraft.jsch.DHGEX: int min> in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.DHGEX: void <clinit>()>
CLINIT edge: $r12 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r120 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r71 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r70 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r143 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r64) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r62, i133, r140, 0, i134) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r57, i127, r139, 0, i128) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r52, i121, r137, 0, i122) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r47, i115, r136, 0, i116) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r92 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r91 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: r134 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r87) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r85, i110, r131, 0, i111) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r80, i104, r129, 0, i105) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r41 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r40, 4, i99) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r118 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r117 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r116 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: $r42 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r70 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r125 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r47, i115, r136, 0, i116) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r91 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r127 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r80, i104, r129, 0, i105) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r41 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>($r40, 4, i99) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i1 = <com.jcraft.jsch.DHGEX: int min> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $i1 = <com.jcraft.jsch.DHGEX: int min> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.DHGEX: void <clinit>()>
CLINIT edge: $r98 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r116 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r74 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r9) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r44 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r43) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r49 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r48) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r30) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r82 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r28) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r81 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r26) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r59 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r80) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r79 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r78) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r16 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("keyboard-interactive") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-connection") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r74 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r9) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: r32 = newarray (java.lang.String)[i2] in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA") in <com.jcraft.jsch.jce.SignatureRSA: void init()> ==> <java.security.Signature: java.security.Signature getInstance(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA") in <com.jcraft.jsch.jce.SignatureRSA: void init()> ==> <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i39, r1, 0, i40) in <com.jcraft.jsch.jce.SignatureRSA: boolean verify(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i39, r1, 0, i40) in <com.jcraft.jsch.jce.SignatureRSA: boolean verify(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i3) in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RC4") in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i3) in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r15, 0, $i4) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("DESede") in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
STATIC edge: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r16, 0, $i3) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r15, 0, $i4) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r16, 0, $i3) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withDSA") in <com.jcraft.jsch.jce.SignatureDSA: void init()> ==> <java.security.Signature: java.security.Signature getInstance(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DSA") in <com.jcraft.jsch.jce.SignatureDSA: void init()> ==> <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i11, r3, 0, $i1) in <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, $b21, r5, $i22, $i24) in <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $b16, r5, $i17, $i19) in <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i14, r4, 0, $i4) in <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i11, r3, 0, $i1) in <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i72, r7, 0, i73) in <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 20, r8, $i30, 20) in <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r8, $i18, 20) in <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i72, r7, 0, i73) in <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r8, $i18, 20) in <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i3) in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RC4") in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i3) in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, 0, $i3) in <com.jcraft.jsch.jce.HMAC: void init(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r3) in <com.jcraft.jsch.jce.HMAC: void init(byte[])> ==> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, 0, $i3) in <com.jcraft.jsch.jce.HMAC: void init(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r5 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("DH") in <com.jcraft.jsch.jce.DH: void init()> ==> <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
STATIC edge: $r2 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("DH") in <com.jcraft.jsch.jce.DH: void init()> ==> <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>
CLINIT edge: $r14 = new java.math.BigInteger in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <java.math.BigInteger: void <clinit>()>
STATIC edge: r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DH") in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.DH: void setP(byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.DH: void setG(byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r1 = new java.math.BigInteger in <com.jcraft.jsch.jce.DH: void setF(byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r5, 0, $i2) in <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RC4") in <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r5, 0, $i2) in <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r4 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jce.SHA1: void init()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1") in <com.jcraft.jsch.jce.SHA1: void init()> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, i2, i0) in <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, i2, i0) in <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("RSA") in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i0, 12) in <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("DSA") in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r4 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.jce.MD5: void init()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5") in <com.jcraft.jsch.jce.MD5: void init()> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r15, 0, $i4) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("DESede") in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
STATIC edge: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r16, 0, $i3) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r15, 0, $i4) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r16, 0, $i3) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r13, 0, $i4) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r14, 0, $i3) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: i4 = <com.jcraft.jsch.ProxyHTTP: int DEFAULTPORT> in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <com.jcraft.jsch.ProxyHTTP: void <clinit>()>
STATIC edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r49 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r48, $i8, i1) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r69 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\r\n") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r46 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\r\n") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r43 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("Proxy-Authorization: Basic ") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r67 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>(r66, 0, $i7) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
STATIC edge: r66 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r41) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r18 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r17) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r49 = staticinvoke <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>($r48, $i8, i1) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
CLINIT edge: i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r17) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i0 = <com.jcraft.jsch.ProxyHTTP: int DEFAULTPORT> in <com.jcraft.jsch.ProxyHTTP: int getDefaultPort()> ==> <com.jcraft.jsch.ProxyHTTP: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.Packet: com.jcraft.jsch.Random random> = null in <com.jcraft.jsch.Packet: void <clinit>()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, "UTF-8") in <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, "UTF-8") in <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=") in <com.jcraft.jsch.Util: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("") in <com.jcraft.jsch.Util: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=") in <com.jcraft.jsch.Util: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r1 = newarray (java.lang.String)[16] in <com.jcraft.jsch.Util: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("keepalive@jcraft.com") in <com.jcraft.jsch.Session: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("keepalive@jcraft.com") in <com.jcraft.jsch.Session: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.Session: byte[] keepalivemsg> = $r0 in <com.jcraft.jsch.Session: void <clinit>()> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger logger> in <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r1, i6, $i2) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r1, i6, $i5) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: r6 = newarray (java.lang.String)[$i3] in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, 0, $i0, "UTF-8") in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, 0, $i0, "UTF-8") in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
CLINIT edge: <com.jcraft.jsch.Packet: com.jcraft.jsch.Random random> = r0 in <com.jcraft.jsch.Packet: void setRandom(com.jcraft.jsch.Random)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.JSch: java.util.Hashtable config> = $r0 in <com.jcraft.jsch.JSch: void <clinit>()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.Channel: int index> = 0 in <com.jcraft.jsch.Channel: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r9 = new com.jcraft.jsch.ChannelSession in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.ChannelSftp in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.ChannelSftp in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.ChannelSftp in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $r3 = new com.jcraft.jsch.ChannelForwardedTCPIP in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r3 = new com.jcraft.jsch.ChannelForwardedTCPIP in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
CLINIT edge: $r4 = new com.jcraft.jsch.ChannelDirectTCPIP in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r4 = new com.jcraft.jsch.ChannelDirectTCPIP in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()>
CLINIT edge: $r6 = new com.jcraft.jsch.ChannelX11 in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r6 = new com.jcraft.jsch.ChannelX11 in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r9 = new com.jcraft.jsch.ChannelSession in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.Channel: java.util.Vector pool> in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_hex_pool> in <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_hex_pool> in <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>(r3, $i2) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.PortWatcher: java.util.Vector pool> in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.Channel: java.util.Vector pool> in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r2 = <com.jcraft.jsch.Channel: java.util.Vector pool> in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: java.lang.String host> = "127.0.0.1" in <com.jcraft.jsch.ChannelX11: void <clinit>()> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: java.lang.String host> = "127.0.0.1" in <com.jcraft.jsch.ChannelX11: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> = $r0 in <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> = $r0 in <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.PortWatcher: java.util.Vector pool> = $r0 in <com.jcraft.jsch.PortWatcher: void <clinit>()> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("0.0.0.0") in <com.jcraft.jsch.PortWatcher: void <clinit>()> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>
CLINIT edge: r2 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, r1, i0) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>
CLINIT edge: $r2 = <com.jcraft.jsch.PortWatcher: java.util.Vector pool> in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
CLINIT edge: r24 = newarray (java.lang.String)[$i1] in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>(r4, i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
CLINIT edge: $r7 = new java.lang.Integer in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>(r4, i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
CLINIT edge: $r7 = new java.lang.Integer in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, null, i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, null, i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>(r0, null, i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: java.lang.String host> = r0 in <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: java.lang.String host> = r0 in <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: int port> = i0 in <com.jcraft.jsch.ChannelX11: void setPort(int)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: int port> = i0 in <com.jcraft.jsch.ChannelX11: void setPort(int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $i8 = staticinvoke <com.jcraft.jsch.ChannelX11: int revtable(byte)>($b6) in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: int revtable(byte)>
STATIC edge: $i2 = staticinvoke <com.jcraft.jsch.ChannelX11: int revtable(byte)>($b1) in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: int revtable(byte)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.ChannelX11: byte[] cookie_hex> = $r1 in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelX11: byte[] cookie_hex> = $r1 in <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.Channel: java.util.Vector pool> in <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, 0, $i0, r1) in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, 0, $i0, r1) in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r2) in <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.Util: byte[] unquote(byte[])>(r1) in <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] unquote(byte[])>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r0) in <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("session") in <com.jcraft.jsch.ChannelSession: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("session") in <com.jcraft.jsch.ChannelSession: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.ChannelSession: byte[] _session> = $r0 in <com.jcraft.jsch.ChannelSession: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelSession: byte[] _session> = $r0 in <com.jcraft.jsch.ChannelSession: void <clinit>()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r0 = <java.io.File: java.lang.String separator> in <com.jcraft.jsch.ChannelSftp: void <clinit>()> ==> <java.io.File: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> = $r0 in <com.jcraft.jsch.ChannelSftp: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> = $r0 in <com.jcraft.jsch.ChannelSftp: void <clinit>()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> = $r0 in <com.jcraft.jsch.ChannelSftp: void <clinit>()> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)>(r0, 0, r1, 0) in <com.jcraft.jsch.Util: boolean glob(byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)>(r0, 0, r1, 0) in <com.jcraft.jsch.Util: boolean glob(byte[],byte[])> ==> <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)>
CLINIT edge: $r3 = newarray (java.lang.String)[$i14] in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r8) in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r5) in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r5) in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i6, r0, i8, $i5) in <com.jcraft.jsch.Util: byte[] unquote(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i7) in <com.jcraft.jsch.Util: byte[] unquote(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i6, r0, i8, $i5) in <com.jcraft.jsch.Util: byte[] unquote(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i7) in <com.jcraft.jsch.Util: byte[] unquote(byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.KnownHosts: byte[] space> = $r0 in <com.jcraft.jsch.KnownHosts: void <clinit>()> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\n") in <com.jcraft.jsch.KnownHosts: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\n") in <com.jcraft.jsch.KnownHosts: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>(r0, r1, r2) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>(r0, r1, r2) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>(r0, r1, r2) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>(r0, r1, r2) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-dss") in <com.jcraft.jsch.HostKey: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-rsa") in <com.jcraft.jsch.HostKey: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-dss") in <com.jcraft.jsch.HostKey: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.HostKey: byte[] sshdss> = $r0 in <com.jcraft.jsch.HostKey: void <clinit>()> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
CLINIT edge: $r8 = <com.jcraft.jsch.Util: byte[] b64> in <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i53) in <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i53) in <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r3 = <com.jcraft.jsch.Util: byte[] b64> in <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r6 = <com.jcraft.jsch.Util: byte[] b64> in <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = <com.jcraft.jsch.Util: java.lang.String[] chars> in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("direct-tcpip") in <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("direct-tcpip") in <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.ChannelDirectTCPIP: byte[] _type> = $r0 in <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ChannelDirectTCPIP: byte[] _type> = $r0 in <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_hex_pool> in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: r6 = <com.jcraft.jsch.Session: com.jcraft.jsch.Random random> in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_hex_pool> in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\n") in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(" ") in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("DEK-Info: DES-EDE3-CBC,") in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("Proc-Type: 4,ENCRYPTED") in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("\n") in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r5 = newarray (java.lang.String)[4] in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.KeyPair: byte[] cr> = $r0 in <com.jcraft.jsch.KeyPair: void <clinit>()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----BEGIN DSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-dss") in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----END DSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----BEGIN DSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.KeyPairDSA: byte[] begin> = $r0 in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.KeyPairDSA: byte[] begin> = $r0 in <com.jcraft.jsch.KeyPairDSA: void <clinit>()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----BEGIN RSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("ssh-rsa") in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----END RSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("-----BEGIN RSA PRIVATE KEY-----") in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: <com.jcraft.jsch.KeyPairRSA: byte[] begin> = $r0 in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.KeyPairRSA: byte[] begin> = $r0 in <com.jcraft.jsch.KeyPairRSA: void <clinit>()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r0 = new java.io.File in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $b4 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b3) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i42) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $b38 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b36) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
STATIC edge: $b33 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b31) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
STATIC edge: $b23 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b21) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
STATIC edge: $b18 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b16) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
STATIC edge: $b8 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b6) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
STATIC edge: $b4 = staticinvoke <com.jcraft.jsch.Util: byte val(byte)>($b3) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte val(byte)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i42) in <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>($r0, $r3) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
STATIC edge: r45 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r22) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r22 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: $z7 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r20) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
STATIC edge: $r20 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: r37 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r34, 0, $i1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: r36 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r35, 0, $i0) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>($r0, $r3) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>
STATIC edge: r35 = staticinvoke <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)>($r0, i12) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)>
STATIC edge: i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>($r0, $r3) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>
STATIC edge: r34 = staticinvoke <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)>($r0, i11) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)>
STATIC edge: i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>($r0, $r3) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)>
CLINIT edge: $z7 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r20) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r20 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("aes256-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r15 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r31 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: r36 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>(r35, 0, $i0) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r7 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r10 = new java.lang.String in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r7 = new com.jcraft.jsch.KeyPairDSA in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r11 = new java.lang.String in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r5 = new com.jcraft.jsch.KeyPairRSA in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ProxySOCKS4: int DEFAULTPORT> = 1080 in <com.jcraft.jsch.ProxySOCKS4: void <clinit>()> ==> <com.jcraft.jsch.ProxySOCKS4: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.KeyExchange: java.lang.String kex> = "diffie-hellman-group1-sha1" in <com.jcraft.jsch.KeyExchange: void <clinit>()> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.DHG14: byte[] g> = $r0 in <com.jcraft.jsch.DHG14: void <clinit>()> ==> <com.jcraft.jsch.DHG14: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.DHG14: byte[] g> = $r0 in <com.jcraft.jsch.DHG14: void <clinit>()> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, i0, i1, "UTF-8") in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>(r0, i0, i1, "UTF-8") in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
CLINIT edge: <com.jcraft.jsch.ProxySOCKS5: int DEFAULTPORT> = 1080 in <com.jcraft.jsch.ProxySOCKS5: void <clinit>()> ==> <com.jcraft.jsch.ProxySOCKS5: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.UserAuthGSSAPIWithMIC: byte[][] supported_oid> = $r0 in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <clinit>()> ==> <com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)>("javax.security.auth.useSubjectCredsOnly") in <com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)>("javax.security.auth.useSubjectCredsOnly") in <com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>(r0, r1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>(r0, r1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)> ==> <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
CLINIT edge: <com.jcraft.jsch.DHG1: byte[] g> = $r0 in <com.jcraft.jsch.DHG1: void <clinit>()> ==> <com.jcraft.jsch.DHG1: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.DHG1: byte[] g> = $r0 in <com.jcraft.jsch.DHG1: void <clinit>()> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.DHGEX: int min> = 1024 in <com.jcraft.jsch.DHGEX: void <clinit>()> ==> <com.jcraft.jsch.DHGEX: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.DHGEX: int min> = 1024 in <com.jcraft.jsch.DHGEX: void <clinit>()> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: <com.jcraft.jsch.ProxyHTTP: int DEFAULTPORT> = 80 in <com.jcraft.jsch.ProxyHTTP: void <clinit>()> ==> <com.jcraft.jsch.ProxyHTTP: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r5 = new java.lang.String in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <com.jcraft.jsch.PortWatcher: java.util.Vector pool> in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: void <clinit>()>
STATIC edge: r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r0) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r19) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("cancel-tcpip-forward") in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("cancel-tcpip-forward") in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r4 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: byte[] table> in <com.jcraft.jsch.ChannelX11: int revtable(byte)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.ChannelX11: byte[] table> in <com.jcraft.jsch.ChannelX11: int revtable(byte)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r1, $i8, r0, $i7) in <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r1, i1, r0, i2) in <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r1, $i8, r0, $i7) in <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r1, i1, r0, i2) in <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.Util: byte[] b64> in <com.jcraft.jsch.Util: byte val(byte)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r5 = new java.lang.String in <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = new java.lang.String in <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i18, r3, 0, $i16) in <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i18, r2, $i11, $i10) in <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, $i8) in <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i18, r3, 0, $i16) in <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, $i8) in <com.jcraft.jsch.KeyPair: byte[] parseLines(com.jcraft.jsch.Buffer,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $i38 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b37) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $i15 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b14) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i13 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b12) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i18 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b17) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i21 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b20) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r0, i41, r1, i42) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
STATIC edge: $i25 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b24) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r0, $i28, r1, $i30) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
STATIC edge: $i29 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b27) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i26 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>(b46) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i32 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b31) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r0, i41, r1, i42) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
STATIC edge: $i40 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b39) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
STATIC edge: $i38 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b37) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
CLINIT edge: $i13 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b12) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i18 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b17) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i21 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b20) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r0, i41, r1, i42) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i25 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>($b24) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $i26 = staticinvoke <com.jcraft.jsch.Util: int skipUTF8Char(byte)>(b46) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>(r0, i41, r1, i42) in <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <com.jcraft.jsch.JSchException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.JSchException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestExec: boolean waitForReply()>() in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestExec: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void checkFreeSize(int)>($i3) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void checkFreeSize(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>(10L) in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <java.lang.Thread: void sleep(long)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i6) in <com.jcraft.jsch.Buffer: void checkFreeSize(int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i6) in <com.jcraft.jsch.Buffer: void checkFreeSize(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void connect(int)>($i0) in <com.jcraft.jsch.Session: void connect()> ==> <com.jcraft.jsch.Session: void connect(int)>
SPECIAL edge: specialinvoke $r192.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is already connected") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.IO: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void <init>()>
VIRTUAL edge: $r188 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("random") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void send_kexinit()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void send_kexinit()>
VIRTUAL edge: $r37 = virtualinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r36) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
SPECIAL edge: r262 = specialinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>($r40) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r264 = virtualinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r263) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)>($r48, $i17, r262) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void send_newkeys()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void send_newkeys()>
VIRTUAL edge: $r50 = virtualinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r49) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>($r59, r262) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>
VIRTUAL edge: r267 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("MaxAuthTries") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r243 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("MaxAuthTries") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("userauth.none") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: r272 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("PreferredAuthentications") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r89 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>($r88) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r101 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>($r100) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r213) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void disconnect()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Session: void disconnect()>
VIRTUAL edge: $r189 = virtualinvoke r251.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r250 = virtualinvoke $r248.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r250 = virtualinvoke $r248.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r250 = virtualinvoke $r248.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r250 = virtualinvoke $r248.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r249.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r250, $r248) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r181.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r182 = virtualinvoke $r181.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connecting to ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r184 = virtualinvoke $r182.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r183) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r185 = virtualinvoke $r184.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" port ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r186 = virtualinvoke $r185.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i43) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r187 = virtualinvoke $r186.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r180.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r187) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: r253 = virtualinvoke $r178.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: r254 = virtualinvoke $r179.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r173.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke $r174.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>(r253) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r175.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>(r254) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
INTERFACE edge: interfaceinvoke $r9.<com.jcraft.jsch.Proxy: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>($r8, $r7, $i1, i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>
INTERFACE edge: interfaceinvoke $r9.<com.jcraft.jsch.Proxy: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>($r8, $r7, $i1, i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>
INTERFACE edge: interfaceinvoke $r9.<com.jcraft.jsch.Proxy: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>($r8, $r7, $i1, i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>
INTERFACE edge: $r12 = interfaceinvoke $r10.<com.jcraft.jsch.Proxy: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS4: java.io.InputStream getInputStream()>
INTERFACE edge: $r12 = interfaceinvoke $r10.<com.jcraft.jsch.Proxy: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxyHTTP: java.io.InputStream getInputStream()>
INTERFACE edge: $r12 = interfaceinvoke $r10.<com.jcraft.jsch.Proxy: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS5: java.io.InputStream getInputStream()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r12) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
INTERFACE edge: $r15 = interfaceinvoke $r13.<com.jcraft.jsch.Proxy: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS4: java.io.OutputStream getOutputStream()>
INTERFACE edge: $r15 = interfaceinvoke $r13.<com.jcraft.jsch.Proxy: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxyHTTP: java.io.OutputStream getOutputStream()>
INTERFACE edge: $r15 = interfaceinvoke $r13.<com.jcraft.jsch.Proxy: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS5: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r15) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
INTERFACE edge: $r17 = interfaceinvoke $r16.<com.jcraft.jsch.Proxy: java.net.Socket getSocket()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS4: java.net.Socket getSocket()>
INTERFACE edge: $r17 = interfaceinvoke $r16.<com.jcraft.jsch.Proxy: java.net.Socket getSocket()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxyHTTP: java.net.Socket getSocket()>
INTERFACE edge: $r17 = interfaceinvoke $r16.<com.jcraft.jsch.Proxy: java.net.Socket getSocket()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.ProxySOCKS5: java.net.Socket getSocket()>
VIRTUAL edge: virtualinvoke $r164.<java.net.Socket: void setSoTimeout(int)>(i0) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.Socket: void setSoTimeout(int)>
INTERFACE edge: $z16 = interfaceinvoke $r257.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r162.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "Connection established") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.JSch: void addSession(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch: void addSession(com.jcraft.jsch.Session)>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.IO: void put(byte[],int,int)>(r258, 0, $i7) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: void put(byte[],int,int)>
VIRTUAL edge: i45 = virtualinvoke $r159.<com.jcraft.jsch.IO: int getByte()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.IO: int getByte()>
SPECIAL edge: specialinvoke $r158.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("connection is closed by foreign host") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r261.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("invalid server\'s version string") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r35.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r133.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Remote version string: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r137 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r136) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r138 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r132.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r138) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r140.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r141 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Local version string: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r144 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r143) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r145 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r139.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r145) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $b13 = virtualinvoke $r38.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
SPECIAL edge: specialinvoke $r127.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid protocol: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $b32 = virtualinvoke $r129.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: $r130 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b32) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r126.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r131) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r39.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r125.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_KEXINIT received") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $i47 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG1: int getState()>
VIRTUAL edge: $i47 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG14: int getState()>
VIRTUAL edge: $i47 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHGEX: int getState()>
VIRTUAL edge: z17 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>($r47) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)>
VIRTUAL edge: z17 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>($r47) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)>
VIRTUAL edge: z17 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>($r47) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $i16 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG14: int getState()>
VIRTUAL edge: $i16 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHGEX: int getState()>
VIRTUAL edge: $i16 = virtualinvoke r262.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.DHG1: int getState()>
VIRTUAL edge: $b48 = virtualinvoke $r265.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
SPECIAL edge: specialinvoke $r121.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r122 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("verify: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z17) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r124 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r120.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r124) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r42.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid protocol(kex): ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $b14 = virtualinvoke $r44.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b14) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r41.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r46) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $b18 = virtualinvoke $r51.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
INTERFACE edge: $z4 = interfaceinvoke $r58.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r119.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_NEWKEYS received") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid protocol(newkyes): ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $b19 = virtualinvoke $r55.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b19) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r52.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r57) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r241.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r242 = virtualinvoke $r241.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MaxAuthTries: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r244 = virtualinvoke $r242.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r243) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r245 = virtualinvoke $r244.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r240.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r245, $r239) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r61 = virtualinvoke r269.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r238 = virtualinvoke $r236.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r238 = virtualinvoke $r236.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r238 = virtualinvoke $r236.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r238 = virtualinvoke $r236.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r237.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r238, $r236) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: z19 = virtualinvoke r270.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r270.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r270.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r270.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r270.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: r274 = virtualinvoke $r118.<com.jcraft.jsch.UserAuthNone: java.lang.String getMethods()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthNone: java.lang.String getMethods()>
VIRTUAL edge: r273 = virtualinvoke r274.<java.lang.String: java.lang.String toLowerCase()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z10 = virtualinvoke $r117.<java.lang.String: boolean equals(java.lang.Object)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r84.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r110.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r277) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r113 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r112) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r277 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r114.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r277) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r277 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r104.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, r277) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r106.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Next authentication method: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r105.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r109) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r85.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("userauth.") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r97.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("userauth.") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r102 = virtualinvoke r279.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $z15 = interfaceinvoke $r229.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(2) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r231.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r232 = virtualinvoke $r231.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to load ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r233 = virtualinvoke $r232.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r234 = virtualinvoke $r233.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" method") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r235 = virtualinvoke $r234.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r230.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(2, $r235) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: z19 = virtualinvoke r278.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)>
INTERFACE edge: $z9 = interfaceinvoke $r90.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r92.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authentication succeeded (") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r276) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r91.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r96) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: r273 = virtualinvoke $r226.<com.jcraft.jsch.JSchPartialAuthException: java.lang.String getMethods()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchPartialAuthException: java.lang.String getMethods()>
VIRTUAL edge: $z14 = virtualinvoke r281.<java.lang.String: boolean equals(java.lang.Object)>(r273) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z13 = interfaceinvoke $r217.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(2) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r219.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r220 = virtualinvoke $r219.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("an exception during authentication\n") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r221 = virtualinvoke $r216.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r221 = virtualinvoke $r216.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r221 = virtualinvoke $r216.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r221 = virtualinvoke $r216.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r222 = virtualinvoke $r220.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r221) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r223 = virtualinvoke $r222.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r218.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(2, $r223) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: $z7 = interfaceinvoke $r78.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r80.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Login trials exceeds ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i24) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r79.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r83) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r77.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("Auth cancel") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r76.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("Auth fail") in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r64.<java.net.Socket: void setSoTimeout(int)>($i20) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.Socket: void setSoTimeout(int)>
SPECIAL edge: specialinvoke $r66.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r67.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r69 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connect thread ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r71 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" session") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r68.<java.lang.Thread: void setName(java.lang.String)>($r73) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r75.<java.lang.Thread: void setDaemon(boolean)>($z6) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r74.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r74.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r205.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r206.<com.jcraft.jsch.Buffer: void putByte(byte)>(1) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r207.<com.jcraft.jsch.Buffer: void putInt(int)>(3) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: $r209 = virtualinvoke $r204.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r209 = virtualinvoke $r204.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r209 = virtualinvoke $r204.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r209 = virtualinvoke $r204.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r208.<com.jcraft.jsch.Buffer: void putString(byte[])>($r210) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r211.<com.jcraft.jsch.Buffer: void putString(byte[])>($r212) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r198.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r199 = virtualinvoke $r198.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Session.connect: ") in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r200 = virtualinvoke $r199.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r204) in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r201 = virtualinvoke $r200.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void connect(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r197.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r201) in <com.jcraft.jsch.Session: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
CLINIT edge: r32 = staticinvoke <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>(r32, r2) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r27 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r23 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r22) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r21 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r20) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r19 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r18) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r16) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r14) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r12) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r11 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r33) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r32) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r34) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>(r34, r3) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>
STATIC edge: r33 = staticinvoke <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>(r33, r2) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>
STATIC edge: r32 = staticinvoke <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>(r32, r2) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>
CLINIT edge: $r26 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r34) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r38 = <com.jcraft.jsch.Session: com.jcraft.jsch.Random random> in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: $r37 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r34 = staticinvoke <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>(r34, r3) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i6, $r4, 0, $i5) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r29 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r12) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])>($r7, $r6) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i6, $r4, 0, $i5) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r8 = staticinvoke <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])>($r7, $r6) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyExchange: void <clinit>()>
CLINIT edge: $r10 = new com.jcraft.jsch.HostKey in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r25 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r24 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: $r14 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r24 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
CLINIT edge: r0 = newarray (java.lang.String)[10] in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r21 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r37 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r33, i14, $i5) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: r36 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r34, i12, $i2) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r42 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r41) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r38 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r49 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r48) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r45 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: r36 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r34, i12, $i2) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r42 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r41) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r49 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r48) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void send_kexinit()>() in <com.jcraft.jsch.Session: void rekey()> ==> <com.jcraft.jsch.Session: void send_kexinit()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is down") in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>(r4) in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.Channel: void init()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelShell: void init()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSubsystem: void init()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelExec: void init()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void init()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void init()>
INTERFACE edge: $r36 = interfaceinvoke $r34.<com.jcraft.jsch.Compression: byte[] compress(byte[],int,int[])>($r33, 5, $r32) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.Packet: void padding(int)>($i5) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Packet: void padding(int)>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.Packet: void padding(int)>(8) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Packet: void padding(int)>
INTERFACE edge: interfaceinvoke $r28.<com.jcraft.jsch.Random: void fill(byte[],int,int)>($r27, $i7, b10) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r12.<com.jcraft.jsch.MAC: void update(int)>($i2) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(int)>
INTERFACE edge: interfaceinvoke $r12.<com.jcraft.jsch.MAC: void update(int)>($i2) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMAC: void update(int)>
INTERFACE edge: interfaceinvoke $r16.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r15, 0, $i3) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r16.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r15, 0, $i3) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r19, $i4) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.CipherNone: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r11.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r41, 0, $i1, r41, 0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.Buffer: void skip(int)>($i0) in <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Buffer: void skip(int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, 4) in <com.jcraft.jsch.Packet: void padding(int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, 4) in <com.jcraft.jsch.Packet: void padding(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r11 = <com.jcraft.jsch.Packet: com.jcraft.jsch.Random random> in <com.jcraft.jsch.Packet: void padding(int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: $b18 = virtualinvoke r0.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i62 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r19 = virtualinvoke r0.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r20 = virtualinvoke r0.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i63 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: $i21 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i22 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: virtualinvoke $r70.<com.jcraft.jsch.IO: void getByte(byte[],int,int)>($r71, $i49, $i50) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.CipherNone: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r69.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r68, 0, $i48, $r67, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>(r0, $r7, $r6, i54, 262144) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>(r0, $r64, $r63, i54, $i44) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>(r0, $r51, $r50, i54, $i37) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void initDeflater(java.lang.String)>(r80) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void initDeflater(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void initInflater(java.lang.String)>(r81) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void initInflater(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad packet length ") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: r76 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $z2 = interfaceinvoke $r62.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(4) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r65.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(4, r76) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.jcraft.jsch.IO: void getByte(byte[],int,int)>($r53, $i38, i13) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.CipherNone: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r58.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>($r57, $i42, i13, $r56, $i41) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r39.<com.jcraft.jsch.MAC: void update(int)>($i34) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.HMAC: void update(int)>
INTERFACE edge: interfaceinvoke $r39.<com.jcraft.jsch.MAC: void update(int)>($i34) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(int)>
INTERFACE edge: interfaceinvoke $r41.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r40, 0, $i35) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r41.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r40, 0, $i35) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke $r43.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r42, 0) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)>
VIRTUAL edge: virtualinvoke $r46.<com.jcraft.jsch.IO: void getByte(byte[],int,int)>($r45, 0, $i36) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
SPECIAL edge: specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>("MAC Error") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: r78 = interfaceinvoke $r36.<com.jcraft.jsch.Compression: byte[] uncompress(byte[],int,int[])>($r35, 5, $r34) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])>
VIRTUAL edge: virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>("fail in inflater") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SSH_MSG_DISCONNECT: ") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i62) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r31) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r13.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received SSH_MSG_UNIMPLEMENTED for ") in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i63) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r18) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r79.<com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>($i22) in <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>
CLINIT edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Session: int getTimeout()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Session: int getTimeout()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>(r1) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("timeout in wating for rekeying process.") in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: b3 = virtualinvoke $r2.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r1) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: r43 = virtualinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void sendKeepAliveMsg()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void sendKeepAliveMsg()>
SPECIAL edge: r44 = specialinvoke r0.<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void send_newkeys()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void send_newkeys()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>(r43, r44) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>(r64) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void disconnect()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session: void disconnect()>
VIRTUAL edge: $b0 = virtualinvoke r43.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i66 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r47 = virtualinvoke r43.<com.jcraft.jsch.Buffer: byte[] getString(int[],int[])>(r4, r5) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte[] getString(int[],int[])>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putByte(byte)>(93) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i40) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i68 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r53 = virtualinvoke r43.<com.jcraft.jsch.Buffer: byte[] getString(int[],int[])>(r4, r5) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte[] getString(int[],int[])>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putByte(byte)>(93) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i24) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i27) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i70 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i47 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i71 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i72 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i73 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i74 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: l75 = virtualinvoke r43.<com.jcraft.jsch.Buffer: long getUInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: long getUInt()>
VIRTUAL edge: i53 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i76 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i50 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i77 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r60 = virtualinvoke r43.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $i7 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i79 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putByte(byte)>(b78) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i8) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: r62 = virtualinvoke r43.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putByte(byte)>(92) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: $i56 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>($i56) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putInt(int)>(1) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putString(byte[])>($r13) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i80 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: i81 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $i59 = virtualinvoke r43.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke r43.<com.jcraft.jsch.Buffer: void putByte(byte)>(82) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: $i60 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHG14: int getState()>
VIRTUAL edge: $i60 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHGEX: int getState()>
VIRTUAL edge: $i60 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: int getState()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHG1: int getState()>
VIRTUAL edge: z14 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)>
VIRTUAL edge: z14 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)>
VIRTUAL edge: z14 = virtualinvoke r44.<com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("verify: ") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z14) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r26) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void write(byte[],int,int)>(r47, $i34, $i33) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void write(byte[],int,int)>(r47, $i34, $i33) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void write(byte[],int,int)>(r47, $i34, $i33) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void setLocalWindowSize(int)>($i36) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: $i40 = virtualinvoke r46.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: virtualinvoke r46.<com.jcraft.jsch.Channel: void setLocalWindowSize(int)>($i44) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r52.<com.jcraft.jsch.Channel: void write_ext(byte[],int,int)>(r53, $i18, $i17) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void write_ext(byte[],int,int)>
VIRTUAL edge: virtualinvoke r52.<com.jcraft.jsch.Channel: void setLocalWindowSize(int)>($i20) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: $i24 = virtualinvoke r52.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: virtualinvoke r52.<com.jcraft.jsch.Channel: void setLocalWindowSize(int)>($i28) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r55.<com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>($i47) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>
VIRTUAL edge: virtualinvoke r56.<com.jcraft.jsch.Channel: void eof_remote()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void eof_remote()>
VIRTUAL edge: virtualinvoke r56.<com.jcraft.jsch.Channel: void eof_remote()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelAgentForwarding: void eof_remote()>
VIRTUAL edge: virtualinvoke r57.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: virtualinvoke r57.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
VIRTUAL edge: virtualinvoke r58.<com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>(l75) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>
VIRTUAL edge: virtualinvoke r58.<com.jcraft.jsch.Channel: void setRemotePacketSize(int)>(i53) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setRemotePacketSize(int)>
VIRTUAL edge: virtualinvoke r58.<com.jcraft.jsch.Channel: void setRecipient(int)>(i74) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setRecipient(int)>
VIRTUAL edge: virtualinvoke r59.<com.jcraft.jsch.Channel: void setExitStatus(int)>(i50) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setExitStatus(int)>
VIRTUAL edge: virtualinvoke r59.<com.jcraft.jsch.Channel: void setRecipient(int)>(0) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setRecipient(int)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("exit-status") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r61.<com.jcraft.jsch.Channel: void setExitStatus(int)>(i79) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void setExitStatus(int)>
VIRTUAL edge: $i8 = virtualinvoke r61.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)>(r43) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Channel: void init()>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelShell: void init()>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelSubsystem: void init()>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelExec: void init()>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void init()>
VIRTUAL edge: virtualinvoke r64.<com.jcraft.jsch.Channel: void init()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.ChannelSftp: void init()>
SPECIAL edge: specialinvoke $r65.<java.lang.Thread: void <init>(java.lang.Runnable)>(r64) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r65.<java.lang.Thread: void setName(java.lang.String)>($r73) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r65.<java.lang.Thread: void setDaemon(boolean)>($z4) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r65.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r65.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke $r67.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Channel ") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r63) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r72 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r71) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r77 = virtualinvoke $r15.<com.jcraft.jsch.Session$GlobalRequestReply: java.lang.Thread getThread()>() in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session$GlobalRequestReply: java.lang.Thread getThread()>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Session$GlobalRequestReply: void setReply(int)>($b82) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void setReply(int)>
VIRTUAL edge: virtualinvoke r77.<java.lang.Thread: void interrupt()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown SSH message type ") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i65) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r21) in <com.jcraft.jsch.Session: void run()> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: $z9 = interfaceinvoke $r30.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r32.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught an exception, leaving main loop due to ") in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>() in <com.jcraft.jsch.Session: void run()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>() in <com.jcraft.jsch.Session: void run()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>() in <com.jcraft.jsch.Session: void run()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34) in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r31.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r36) in <com.jcraft.jsch.Session: void run()> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r19, $i17, r2, 0, i34) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r19, $i21, i34) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.ChannelX11: boolean equals(byte[],byte[])>(r2, r20) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelX11: boolean equals(byte[],byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r19, $i17, r2, 0, i34) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r3 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_pool> in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r3 = <com.jcraft.jsch.ChannelX11: java.util.Hashtable faked_cookie_pool> in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelX11: void <clinit>()>
CLINIT edge: $r63 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: r41 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r40) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r82, $r34) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r60, 0, r72, 0, $i16) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>(r82, $r34) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r50 = <com.jcraft.jsch.Util: byte[] empty> in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r60, 0, r72, 0, $i16) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r4 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
CLINIT edge: $r4 = <com.jcraft.jsch.ChannelForwardedTCPIP: java.util.Vector pool> in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Disconnecting from ") in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26) in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" port ") in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0) in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r23.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r30) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r22.<java.lang.Thread: void interrupt()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: virtualinvoke $r21.<java.io.InputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke $r21.<java.io.InputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r21.<java.io.InputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r21.<java.io.InputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r19.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.net.Socket: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <java.net.Socket: void close()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Proxy: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ProxySOCKS4: void close()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Proxy: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ProxyHTTP: void close()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Proxy: void close()>() in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.ProxySOCKS5: void close()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.JSch: boolean removeSession(com.jcraft.jsch.Session)>(r0) in <com.jcraft.jsch.Session: void disconnect()> ==> <com.jcraft.jsch.JSch: boolean removeSession(com.jcraft.jsch.Session)>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int)>("127.0.0.1", i0, r1, i1) in <com.jcraft.jsch.Session: int setPortForwardingL(int,java.lang.String,int)> ==> <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int)>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>(r1, i0, r2, i1, null) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int)> ==> <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
SPECIAL edge: specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>(r4) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void setName(java.lang.String)>($r10) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void setDaemon(boolean)>($z1) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r5.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortWatcher Thread for ") in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2) in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)>("127.0.0.1", i0) in <com.jcraft.jsch.Session: void delPortForwardingL(int)> ==> <com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(null, i0, r1, i1, $r2) in <com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(r1, i0, r2, i1, $r3) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>(null, i0, r1, i1, r2) in <com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>(r1, i0) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>
CLINIT edge: $r5 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>(1000L) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.Thread: void sleep(long)>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r8) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r11 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("tcpip-forward") in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r8 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r7) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
CLINIT edge: $r11 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("tcpip-forward") in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r8 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r7) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r8 = staticinvoke <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>(r7) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>(null, i0, r1, null) in <com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String)> ==> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>(null, i0, r1, r2) in <com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>(r1, i0) in <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)>(r1) in <com.jcraft.jsch.Session: void setConfig(java.util.Properties)> ==> <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)>
SPECIAL edge: specialinvoke $r14.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r4.<java.util.Hashtable: java.util.Enumeration keys()>() in <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.util.Enumeration keys()>
VIRTUAL edge: $r10 = virtualinvoke r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r8) in <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r8) in <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r12) in <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.Session: void setConfig(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5) in <com.jcraft.jsch.Session: void setConfig(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("invalid timeout value") in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(i0) in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.net.Socket: void setSoTimeout(int)>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4) in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r7) in <com.jcraft.jsch.Session: void setTimeout(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(2) in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void sendIgnore()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(80) in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r4) in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(1) in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Session: void sendKeepAliveMsg()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void setTimeout(int)>(i0) in <com.jcraft.jsch.Session: void setServerAliveInterval(int)> ==> <com.jcraft.jsch.Session: void setTimeout(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void connect(int)>(0) in <com.jcraft.jsch.Channel: void connect()> ==> <com.jcraft.jsch.Channel: void connect(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void sendChannelOpen()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.Channel: void sendChannelOpen()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.Channel: void start()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelShell: void start()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelSubsystem: void start()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelExec: void start()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelSftp: void start()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void run()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.Channel: void run()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelX11: void run()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelSession: void run()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelAgentForwarding: void run()>
THREAD edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void start()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void run()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel: void connect(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r1) in <com.jcraft.jsch.Channel: void connect(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>(r1, 0) in <com.jcraft.jsch.Channel: void setInputStream(java.io.InputStream)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>(r1, z0) in <com.jcraft.jsch.Channel: void setInputStream(java.io.InputStream,boolean)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>(r1, 0) in <com.jcraft.jsch.Channel: void setOutputStream(java.io.OutputStream)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>(r1, z0) in <com.jcraft.jsch.Channel: void setOutputStream(java.io.OutputStream,boolean)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>(r1, 0) in <com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream)> ==> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>(r1, z0) in <com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream,boolean)> ==> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>(r1, 32768) in <com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>(r1, $r0) in <com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> ==> <com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>($r3, 0) in <com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>(r1, 32768) in <com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>(r1, $r0) in <com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> ==> <com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>($r3, 0) in <com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> ==> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Channel$1: void <init>(com.jcraft.jsch.Channel,com.jcraft.jsch.Channel)>(r0, r0) in <com.jcraft.jsch.Channel: java.io.OutputStream getOutputStream()> ==> <com.jcraft.jsch.Channel$1: void <init>(com.jcraft.jsch.Channel,com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void close()>() in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.Channel: void close()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.IO: void close()>() in <com.jcraft.jsch.Channel: void disconnect()> ==> <com.jcraft.jsch.IO: void close()>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.jcraft.jsch.Session: boolean isConnected()>() in <com.jcraft.jsch.Channel: boolean isConnected()> ==> <com.jcraft.jsch.Session: boolean isConnected()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.RequestSignal: void <init>()>() in <com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> ==> <com.jcraft.jsch.RequestSignal: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.RequestSignal: void setSignal(java.lang.String)>(r2) in <com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> ==> <com.jcraft.jsch.RequestSignal: void setSignal(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>($r4, r3) in <com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> ==> <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is not available") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Buffer: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Buffer: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Buffer: void <init>(int)>(20480) in <com.jcraft.jsch.Buffer: void <init>()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.Buffer: void putByte(byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putString(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.Buffer: void putString(byte[])> ==> <com.jcraft.jsch.Buffer: void putString(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>(i0) in <com.jcraft.jsch.Buffer: void putString(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>(r1, i1, i0) in <com.jcraft.jsch.Buffer: void putString(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void putInt(int)>(i3) in <com.jcraft.jsch.Buffer: void putMPInt(byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.Buffer: void putMPInt(byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void putInt(int)>(i2) in <com.jcraft.jsch.Buffer: void putMPInt(byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r0) in <com.jcraft.jsch.Buffer: void putMPInt(byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: long getLong()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: long getLong()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i4 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Buffer: int getInt()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getShort()>() in <com.jcraft.jsch.Buffer: int getInt()> ==> <com.jcraft.jsch.Buffer: int getShort()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: long getUInt()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: long getUInt()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i6 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: long getUInt()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i9 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: long getUInt()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.Buffer: void getByte(byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, r1, i0, i1) in <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, r1, i0, i1) in <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: byte[] getMPInt()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r1, 0, i0) in <com.jcraft.jsch.Buffer: byte[] getMPInt()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: byte[] getMPIntBits()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r2, 0, i2) in <com.jcraft.jsch.Buffer: byte[] getMPIntBits()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: byte[] getString()> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r1, 0, i0) in <com.jcraft.jsch.Buffer: byte[] getString()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.IO: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.PipedOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r6.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.IO: void out_close()>() in <com.jcraft.jsch.IO: void close()> ==> <com.jcraft.jsch.IO: void out_close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void close()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void sendOpenConfirmation()>() in <com.jcraft.jsch.ChannelAgentForwarding: void run()> ==> <com.jcraft.jsch.Channel: void sendOpenConfirmation()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void disconnect()>() in <com.jcraft.jsch.ChannelAgentForwarding: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
VIRTUAL edge: r16 = virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void sendChannelOpen()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Channel: void sendChannelOpen()>
VIRTUAL edge: $z0 = virtualinvoke r16.<com.jcraft.jsch.Session: boolean isConnected()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Session: boolean isConnected()>
VIRTUAL edge: $r7 = virtualinvoke r16.<com.jcraft.jsch.Session: java.lang.String getHost()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.Session: java.lang.String getHost()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is down") in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DirectTCPIP thread ") in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void setName(java.lang.String)>($r9) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.Thread: void setDaemon(boolean)>($z2) in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r10.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.IO: void close()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void connect()> ==> <com.jcraft.jsch.IO: void close()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void sendChannelOpen()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void sendChannelOpen()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: boolean isConnected()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void eof()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void disconnect()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(int)>($i0) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putInt(int)>(i5) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void skip(int)>(i5) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r1) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: i5 = virtualinvoke $r12.<java.io.InputStream: int read(byte[],int,int)>($r11, 14, $i3) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i5 = virtualinvoke $r12.<java.io.InputStream: int read(byte[],int,int)>($r11, 14, $i3) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i5 = virtualinvoke $r12.<java.io.InputStream: int read(byte[],int,int)>($r11, 14, $i3) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i5 = virtualinvoke $r12.<java.io.InputStream: int read(byte[],int,int)>($r11, 14, $i3) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke r4.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r2, r0, i5) in <com.jcraft.jsch.ChannelDirectTCPIP: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $l25 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>(10L) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <java.lang.Thread: void sleep(long)>
STATIC edge: $l25 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <java.lang.System: long currentTimeMillis()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>(r1) in <com.jcraft.jsch.ChannelDirectTCPIP: void setInputStream(java.io.InputStream)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>(r1) in <com.jcraft.jsch.ChannelDirectTCPIP: void setOutputStream(java.io.OutputStream)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestSignal: boolean waitForReply()>() in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSignal: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>(r6, i0) in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setBulkRequests: ") in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be greater than 0.") in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r5) in <com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>() in <com.jcraft.jsch.ChannelSftp: int getBulkRequests()> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSession: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <com.jcraft.jsch.ChannelSession: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void setLocalWindowSizeMax(int)>(2097152) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSizeMax(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void setLocalWindowSize(int)>(2097152) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void setLocalPacketSize(int)>(32768) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalPacketSize(int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>(r0, 16) in <com.jcraft.jsch.ChannelSftp: void <init>()> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelSession: byte[] _session> in <com.jcraft.jsch.ChannelSession: void <init>()> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelSession: byte[] _session> in <com.jcraft.jsch.ChannelSession: void <init>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.io.PipedOutputStream: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.io.PipedOutputStream: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r0) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>(r1, $r0, $i0) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r3) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
SPECIAL edge: specialinvoke $r34.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("channel is down") in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.RequestSftp: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.RequestSftp: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>($r11, r1) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $r11 = virtualinvoke r1.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void sendINIT()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.ChannelSftp: void sendINIT()>
SPECIAL edge: r43 = specialinvoke r1.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r19, $r18) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r23, i9) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Buffer: void <init>(int)>($i1) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r14) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.Buffer: void <init>(int)>($i2) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r17) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r1) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received message is too long: ") in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i9) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r33) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: r44 = virtualinvoke $r24.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r45 = virtualinvoke $r25.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(".") in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.io.File: java.lang.String getCanonicalPath()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.io.File: java.lang.String getCanonicalPath()>
VIRTUAL edge: $r39 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void start()> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r38.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r39, $r35) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r36.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r37) in <com.jcraft.jsch.ChannelSftp: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void disconnect()>() in <com.jcraft.jsch.ChannelSftp: void quit()> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void disconnect()>() in <com.jcraft.jsch.ChannelSftp: void exit()> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
SPECIAL edge: r7 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>(r6) in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>() in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke $r3.<java.io.File: java.lang.String getCanonicalPath()>() in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <java.io.File: java.lang.String getCanonicalPath()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(2, "No such directory") in <com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r0 = new java.io.File in <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)> ==> <java.io.File: void <clinit>()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r21 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r20) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r22 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r21) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: r23 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>(r23) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void setCwd(java.lang.String)>($r5) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void setCwd(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: int getFlags()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: int getFlags()>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: boolean isDir()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t change directory: ") in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r15) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t change directory: ") in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r10) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r16) in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r9) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r15 = staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r5) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, null, 0) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, null, i0) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, r3, 0) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r36 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>(r34) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
SPECIAL edge: r37 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r35) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r38 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r37) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: $z3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>(r37) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
SPECIAL edge: z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>(r39) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
SPECIAL edge: r40 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)>(r36) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)>
SPECIAL edge: r43 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r42) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>($r45, r42, r8, i0) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: i9 = virtualinvoke r38.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r23 = virtualinvoke r38.<java.util.Vector: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r38.<java.util.Vector: java.lang.Object elementAt(int)>(0) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r24.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, r37) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r22.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r23) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i10 = virtualinvoke r40.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke r40.<java.util.Vector: java.lang.Object elementAt(int)>(i11) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z2 = virtualinvoke r39.<java.lang.String: boolean endsWith(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke r39.<java.lang.String: int length()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r39 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>(java.lang.String)>(r39) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "Copying multiple files, but the destination is missing or a file.") in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i12 = virtualinvoke r7.<java.lang.String: int lastIndexOf(int)>($c4) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: i8 = virtualinvoke r7.<java.lang.String: int lastIndexOf(int)>(47) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r16 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i5) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: virtualinvoke r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r42 = virtualinvoke r41.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r41.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>($i6, $i7) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
VIRTUAL edge: $i7 = virtualinvoke r42.<java.lang.String: int length()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: l13 = virtualinvoke r43.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
SPECIAL edge: specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: l14 = virtualinvoke $r10.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to resume for ") in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r42) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r15) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r45.<java.io.FileInputStream: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileInputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r45.<java.io.FileInputStream: void close()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r44.<java.io.FileInputStream: void close()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: $r29 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r29 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r29 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r29 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r28.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, $r29, $r25) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r26.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r27) in <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $r52 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r62 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r60, $r23) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: z5 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>(r55, r61) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
STATIC edge: r61 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r62, "UTF-8") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: r62 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r60, $r24) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r54, $r6) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: $r45 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r3) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: r54 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r53) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: $r52 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
CLINIT edge: r54 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r53) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r8 = staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r7) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r2, "UTF-8") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>(r4, $r14) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>($r13, "UTF-8") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>(r27) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r27, "UTF-8") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i5, r4, 0, $i4) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r27, 0, i17) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r26 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: $r25 = staticinvoke <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r2, "UTF-8") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
CLINIT edge: $r10 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $r10 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $r10 = <com.jcraft.jsch.ChannelSftp: java.lang.String file_separator> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $r5 = new java.io.File in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i5, r4, 0, $i4) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r27, 0, i17) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $c6 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $c6 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $c6 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $z1 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z1 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $z1 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $c8 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $c8 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $c8 = <com.jcraft.jsch.ChannelSftp: char file_separatorc> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $z3 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z3 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $z3 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $z4 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: $z4 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
CLINIT edge: $z4 = <com.jcraft.jsch.ChannelSftp: boolean fs_is_bs> in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, null, 0) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, null, i0) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, r3, 0) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r22 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r23 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r6, r22, r5, i1) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
SPECIAL edge: $z3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r23.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r8 = virtualinvoke r23.<java.util.Vector: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r23.<java.util.Vector: java.lang.Object elementAt(int)>(0) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r8) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is a directory") in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r21) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, $r14, $r10) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r12) in <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r57 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>(r56) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>(r56) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>(r56) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>
SPECIAL edge: r60 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r6, $r5) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r7, i1) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r38, i34) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: $z4 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>($r15, r60) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: $i47 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>(r61, l35, r62, 0, i43) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>
SPECIAL edge: $z3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>(null, r60) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>(r61, r60) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
VIRTUAL edge: l32 = virtualinvoke r57.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
VIRTUAL edge: l33 = virtualinvoke r13.<java.io.InputStream: long skip(long)>(l32) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileInputStream: long skip(long)>
VIRTUAL edge: l33 = virtualinvoke r13.<java.io.InputStream: long skip(long)>(l32) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: i42 = virtualinvoke r13.<java.io.InputStream: int read(byte[],int,int)>(r62, i40, i41) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i42 = virtualinvoke r13.<java.io.InputStream: int read(byte[],int,int)>(r62, i40, i41) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i42 = virtualinvoke r13.<java.io.InputStream: int read(byte[],int,int)>(r62, i40, i41) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i42 = virtualinvoke r13.<java.io.InputStream: int read(byte[],int,int)>(r62, i40, i41) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r45.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to resume for ") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r44.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r48) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r40.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid type=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r39.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r43) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i34 = virtualinvoke $r37.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r61 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i7 = virtualinvoke $r12.<com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ack error: startid=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" seq=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" _ackid=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i16) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r34) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ack error: startid=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" seq=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" _ackid=") in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i16) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r25) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r53 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r53 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r53 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r52.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, $r53, $r49) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r50.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r51) in <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $r5 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r3, "UTF-8") in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>(r3, "UTF-8") in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, $r2, 0) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, $r2, i0) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)>(r1, r2, i0, 0L) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r25 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r24) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r26 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r25) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
SPECIAL edge: r28 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>(r27) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>(r27) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>(r27) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>
SPECIAL edge: r31 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r5, $r4) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r6, i1) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r12, i5) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is a directory") in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r18) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: l4 = virtualinvoke r28.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i5 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r32 = virtualinvoke $r7.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r33.<com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)>(r0, r32, r8, r9) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r19) in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, null, 0) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>(r1, r2, r3, 0) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r46 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r43) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r47 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>(r44) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
SPECIAL edge: r48 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r46) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: r8 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>(r7, r51, r10, i0, $l1) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
VIRTUAL edge: i12 = virtualinvoke r48.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke r48.<java.util.Vector: java.lang.Object elementAt(int)>(i13) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r35.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(2, "No such file") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r47) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z3 = virtualinvoke r47.<java.lang.String: boolean endsWith(java.lang.String)>($r29) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $i8 = virtualinvoke r47.<java.lang.String: int length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r31.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r47 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuffer: void <init>(java.lang.String)>(r47) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r28.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "Copying multiple files, but destination is missing or a file.") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r8.<com.jcraft.jsch.SftpATTRS: boolean isDir()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
VIRTUAL edge: l15 = virtualinvoke r8.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
VIRTUAL edge: $l2 = virtualinvoke r8.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("not supported to get directory ") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r23.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r27) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i14 = virtualinvoke r7.<java.lang.String: int lastIndexOf(int)>(47) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r19 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i7) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: virtualinvoke r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r45 = virtualinvoke r49.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r49.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>($i8, $i9) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
VIRTUAL edge: $i9 = virtualinvoke r45.<java.lang.String: int length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r45) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: l4 = virtualinvoke $r9.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
VIRTUAL edge: $l3 = virtualinvoke $r9.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
VIRTUAL edge: z7 = virtualinvoke $r9.<java.io.File: boolean exists()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: boolean exists()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to resume for ") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r45) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r18) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.lang.String)>(r45) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r45, 1) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>(r45) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r12.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
VIRTUAL edge: virtualinvoke r51.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r51.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.FileOutputStream: void close()>
SPECIAL edge: specialinvoke $r40.<java.io.File: void <init>(java.lang.String)>(r45) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r40.<java.io.File: boolean exists()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $l10 = virtualinvoke $r40.<java.io.File: long length()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: long length()>
VIRTUAL edge: virtualinvoke $r40.<java.io.File: boolean delete()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r38.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r36) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r37.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, $r2) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, $r2) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>(r1, r2, null, 0, 0L) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>(r1, r2, r3, 0, 0L) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r10 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r9) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>(r11, r4, r3, i0, l1) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
VIRTUAL edge: $l2 = virtualinvoke r12.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r5) in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>(r1, null, 0L) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>(r1, r2, 0L) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>(r1, null, 0L) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>(r1, r2, 0L) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> ==> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r22 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r21) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r23 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>(r24) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>(r24) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>
SPECIAL edge: r26 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r7, $r6) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r8, i0) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r14, i4) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
VIRTUAL edge: $l3 = virtualinvoke r4.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i4 = virtualinvoke $r13.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r27 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>() in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])>(r0, l2, r5, r27) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])>
SPECIAL edge: specialinvoke $r19.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r17) in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.ChannelSftp$3: void <init>(com.jcraft.jsch.ChannelSftp,java.util.Vector)>(r3, $r0) in <com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$3: void <init>(com.jcraft.jsch.ChannelSftp,java.util.Vector)>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)>(r5, $r2) in <com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r51 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r50) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>(r53, r4) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
SPECIAL edge: r57 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r56) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>($r61) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>
SPECIAL edge: r65 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r64, $r62) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r66, i11) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r43, i13) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>(r7) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>
SPECIAL edge: r65 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r8, r65) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r38, i15) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r40, i17) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r11, 0, 4) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: i22 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r36, $i7, $i20) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>(r7, r65) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke $r3.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r51.<java.lang.String: int lastIndexOf(int)>(47) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: r52 = virtualinvoke r51.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r53 = virtualinvoke r51.<java.lang.String: java.lang.String substring(int)>($i1) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $z1 = virtualinvoke r57.<com.jcraft.jsch.SftpATTRS: boolean isDir()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
SPECIAL edge: specialinvoke $r62.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r44.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i13 = virtualinvoke $r42.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r41.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i17 = virtualinvoke $r39.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: i19 = virtualinvoke $r12.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r27.<com.jcraft.jsch.Buffer: void shift()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: void shift()>
VIRTUAL edge: r68 = virtualinvoke $r67.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r69 = virtualinvoke $r26.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r15.<com.jcraft.jsch.SftpATTRS: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpATTRS: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r70) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r72 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)>(r0, r70, r72, r15) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)>
INTERFACE edge: i14 = interfaceinvoke r17.<com.jcraft.jsch.ChannelSftp$LsEntrySelector: int select(com.jcraft.jsch.ChannelSftp$LsEntry)>($r18) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.ChannelSftp$3: int select(com.jcraft.jsch.ChannelSftp$LsEntry)>
SPECIAL edge: specialinvoke $r48.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r46) in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r47.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, "UTF-8") in <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r0, "UTF-8") in <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r19.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(8, "The remote sshd is too old to support symlink operation.") in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r25 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r24) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r26 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r25) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendREADLINK(byte[])>($r4) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendREADLINK(byte[])>
SPECIAL edge: r28 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r6, $r5) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r7, i1) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r9, i6) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i4 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r29 = virtualinvoke $r13.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i6 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r22.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r20) in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(8, "The remote sshd is too old to support symlink operation.") in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r21 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r19) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r22 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r20) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r23 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r21) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>(r22) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendSYMLINK(byte[],byte[])>($r4, $r6) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendSYMLINK(byte[],byte[])>
SPECIAL edge: r26 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r8, $r7) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r9, i1) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r11, i3) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, r22) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i3 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r15) in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(8, "The remote sshd is too old to support rename operation.") in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r25 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r23) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r26 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r24) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r27 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r25) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: r28 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>(r26) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendRENAME(byte[],byte[])>($r4, $r6) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendRENAME(byte[],byte[])>
SPECIAL edge: r31 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r8, $r7) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r9, i2) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r11, i4) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
VIRTUAL edge: i1 = virtualinvoke r28.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r17 = virtualinvoke r28.<java.util.Vector: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r28.<java.util.Vector: java.lang.Object elementAt(int)>(0) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r17) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, r26) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i4 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r19) in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r18 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r17) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r19 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r18) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendREMOVE(byte[])>($r7) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendREMOVE(byte[])>
SPECIAL edge: r20 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r8, r20) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r9, i1) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r11, i3) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
VIRTUAL edge: i0 = virtualinvoke r19.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i4) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i3 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r13) in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r13) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>(r13, r5) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
VIRTUAL edge: i0 = virtualinvoke r12.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r12.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>(0) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>($i2, i1) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r6) in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r13) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>(r13, r5) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
VIRTUAL edge: i0 = virtualinvoke r12.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r12.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>(0) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>(i1, $i2) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r6) in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r13) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>(r13, r5) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
VIRTUAL edge: i0 = virtualinvoke r12.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r12.<java.util.Vector: java.lang.Object elementAt(int)>(i2) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>(0) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setPERMISSIONS(int)>(i1) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: void setPERMISSIONS(int)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r6) in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r13) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>(r13, r5) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
VIRTUAL edge: i0 = virtualinvoke r12.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r12.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>(0) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
VIRTUAL edge: $i1 = virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: int getATime()>() in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.SftpATTRS: int getATime()>
VIRTUAL edge: virtualinvoke r5.<com.jcraft.jsch.SftpATTRS: void setACMODTIME(int,int)>($i1, i2) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.SftpATTRS: void setACMODTIME(int,int)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r6) in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r18 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r17) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r19 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r18) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendRMDIR(byte[])>($r7) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendRMDIR(byte[])>
SPECIAL edge: r20 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r8, r20) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r9, i1) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r11, i3) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
VIRTUAL edge: i0 = virtualinvoke r19.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i4) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i3 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r13) in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r16 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r15) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)>($r4, null) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)>
SPECIAL edge: r18 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r6, $r5) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r7, i0) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r9, i2) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r11) in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r10 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r9) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r4) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r10 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r9) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r4) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r17 = staticinvoke <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>($r7) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r10) in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r12 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r11) in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>(r13, r5) in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
VIRTUAL edge: i0 = virtualinvoke r12.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r12.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r6) in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String pwd()> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>("") in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r7) in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSession: void disconnect()>() in <com.jcraft.jsch.ChannelSftp: void disconnect()> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isConnected()>() in <com.jcraft.jsch.ChannelSftp: int getServerVersion()> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "The channel is not connected.") in <com.jcraft.jsch.ChannelSftp: int getServerVersion()> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: int getServerVersion()>() in <com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: int getServerVersion()>
VIRTUAL edge: $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8") in <com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8") in <com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "The encoding can not be changed for this sftp server.") in <com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8") in <com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String getExtension(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String getExtension(java.lang.String)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
SPECIAL edge: r9 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>($r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r5) in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke r45.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r29.<java.io.PipedOutputStream: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.io.PipedOutputStream: void <init>()>
SPECIAL edge: specialinvoke $r30.<com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>(r0, $r29, 32768) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
VIRTUAL edge: virtualinvoke $r31.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>($r30, 0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
VIRTUAL edge: $r33 = virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: java.io.InputStream getInputStream()>
VIRTUAL edge: $r34 = virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void sendOpenConfirmation()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void sendOpenConfirmation()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void sendOpenFailure(int)>(1) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void sendOpenFailure(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void disconnect()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: r52 = virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void eof()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void disconnect()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
SPECIAL edge: specialinvoke $r39.<java.lang.Thread: void <init>(java.lang.Runnable)>($r40) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r39.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r4.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r7) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r10) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Buffer: void <init>(int)>($i2) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putInt(int)>($i6) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putInt(int)>(i9) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void skip(int)>(i9) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r12) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: i9 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, 14, $i5) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i9 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, 14, $i5) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i9 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, 14, $i5) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i9 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, 14, $i5) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke r52.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r13, r0, i9) in <com.jcraft.jsch.ChannelForwardedTCPIP: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
CLINIT edge: $r1 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("open failed") in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("open failed") in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.IO: void <init>()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.IO: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r7) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r10) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void sendOpenConfirmation()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void sendOpenConfirmation()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void sendOpenFailure(int)>(1) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void sendOpenFailure(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void disconnect()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void eof()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: $r23 = virtualinvoke r0.<com.jcraft.jsch.ChannelX11: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void disconnect()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Channel: void disconnect()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Buffer: void <init>(int)>($i1) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putInt(int)>($i5) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putInt(int)>(i6) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void skip(int)>(i6) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r12) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: i6 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>($r21, 14, $i4) in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>($r21, 14, $i4) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>($r21, 14, $i4) in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>($r21, 14, $i4) in <com.jcraft.jsch.ChannelX11: void run()> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r23.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r13, r0, i6) in <com.jcraft.jsch.ChannelX11: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel$1: void write(byte[],int,int)>($r2, 0, 1) in <com.jcraft.jsch.Channel$1: void write(int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel$1: void init()>() in <com.jcraft.jsch.Channel$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void init()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel$1: void flush()>() in <com.jcraft.jsch.Channel$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void flush()>
SPECIAL edge: specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Already closed") in <com.jcraft.jsch.Channel$1: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
CLINIT edge: $r3 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel$1: void init()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Already closed") in <com.jcraft.jsch.Channel$1: void flush()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void skip(int)>($i3) in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r13, $r12, i4) in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel$1: void close()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Channel$1: void flush()> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r17) in <com.jcraft.jsch.Channel$1: void flush()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel$1: void init()>() in <com.jcraft.jsch.Channel$1: void close()> ==> <com.jcraft.jsch.Channel$1: void init()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel$1: void flush()>() in <com.jcraft.jsch.Channel$1: void close()> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Channel: void eof()>() in <com.jcraft.jsch.Channel$1: void close()> ==> <com.jcraft.jsch.Channel: void eof()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSession: void <init>()>() in <com.jcraft.jsch.ChannelExec: void <init>()> ==> <com.jcraft.jsch.ChannelSession: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelExec: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelExec: void sendRequests()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.ChannelSession: void sendRequests()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.RequestExec: void <init>(byte[])>($r3) in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.RequestExec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>("ChannelExec", $r15) in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("ChannelExec") in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0) in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exec thread ") in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getHost()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <com.jcraft.jsch.Session: java.lang.String getHost()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Thread: void setName(java.lang.String)>($r12) in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r14.<java.lang.Thread: void setDaemon(boolean)>($z1) in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r13.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r13.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelExec: void start()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelExec: void setExtOutputStream(java.io.OutputStream)>(r1) in <com.jcraft.jsch.ChannelExec: void setErrStream(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelExec: void setExtOutputStream(java.io.OutputStream,boolean)>(r1, z0) in <com.jcraft.jsch.ChannelExec: void setErrStream(java.io.OutputStream,boolean)> ==> <com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream,boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelExec: java.io.InputStream getExtInputStream()>() in <com.jcraft.jsch.ChannelExec: java.io.InputStream getErrStream()> ==> <com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelShell: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelShell: void sendRequests()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.ChannelSession: void sendRequests()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.RequestShell: void <init>()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.RequestShell: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>("ChannelShell", $r14) in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("ChannelShell") in <com.jcraft.jsch.ChannelShell: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0) in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Shell for ") in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.Thread: void setName(java.lang.String)>($r11) in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<java.lang.Thread: void setDaemon(boolean)>($z1) in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r12.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelShell: void start()> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSession: void <init>()>() in <com.jcraft.jsch.ChannelSubsystem: void <init>()> ==> <com.jcraft.jsch.ChannelSession: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelSubsystem: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.RequestX11: void <init>()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestX11: void <init>()>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r16.<com.jcraft.jsch.RequestPtyReq: void <init>()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestPtyReq: void <init>()>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.RequestSubsystem: void <init>()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestSubsystem: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)>(r1, r0, $r3, $z2) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>("ChannelSubsystem", $r18) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r19.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("ChannelSubsystem") in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Subsystem for ") in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.Thread: void setName(java.lang.String)>($r13) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r15.<java.lang.Thread: void setDaemon(boolean)>($z4) in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: virtualinvoke $r14.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r14.<java.lang.Thread: void start()>() in <com.jcraft.jsch.ChannelSubsystem: void start()> ==> <java.lang.Thread: void run()>
CLINIT edge: $r1 = <com.jcraft.jsch.Util: byte[] empty> in <com.jcraft.jsch.RequestPtyReq: void <init>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSubsystem: void setExtOutputStream(java.io.OutputStream)>(r1) in <com.jcraft.jsch.ChannelSubsystem: void setErrStream(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelSubsystem: java.io.InputStream getExtInputStream()>() in <com.jcraft.jsch.ChannelSubsystem: java.io.InputStream getErrStream()> ==> <com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()>
VIRTUAL edge: virtualinvoke $r2.<java.io.PipedOutputStream: void close()>() in <com.jcraft.jsch.Channel$PassiveInputStream: void close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Channel$MyPipedInputStream: int available()>() in <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()> ==> <java.io.PipedInputStream: int available()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel$MyPipedInputStream: int read()>() in <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()> ==> <java.io.PipedInputStream: int read()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])>($r2, $r4) in <com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])>
SPECIAL edge: $r3 = specialinvoke r0.<com.jcraft.jsch.ChannelSession: java.util.Hashtable getEnv()>() in <com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])> ==> <com.jcraft.jsch.ChannelSession: java.util.Hashtable getEnv()>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5) in <com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>($r1, i0, i1, i2, i3) in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.jcraft.jsch.ChannelSession: boolean isConnected()>() in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.RequestWindowChange: void <init>()>() in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.RequestWindowChange: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.RequestWindowChange: void setSize(int,int,int,int)>(i0, i1, i2, i3) in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.RequestWindowChange: void setSize(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>($r3, r0) in <com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> ==> <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>(r1, 80, 24, 640, 480) in <com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(int)>($i0) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>(i6) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void skip(int)>(i6) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.jcraft.jsch.ChannelSession: boolean isConnected()>() in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.ChannelSession: void eof()>() in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: $r15 = virtualinvoke r1.<com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: i6 = virtualinvoke $r14.<java.io.InputStream: int read(byte[],int,int)>($r13, 14, $i3) in <com.jcraft.jsch.ChannelSession: void run()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r14.<java.io.InputStream: int read(byte[],int,int)>($r13, 14, $i3) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r14.<java.io.InputStream: int read(byte[],int,int)>($r13, 14, $i3) in <com.jcraft.jsch.ChannelSession: void run()> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i6 = virtualinvoke $r14.<java.io.InputStream: int read(byte[],int,int)>($r13, 14, $i3) in <com.jcraft.jsch.ChannelSession: void run()> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r3, r1, i6) in <com.jcraft.jsch.ChannelSession: void run()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r20.<java.lang.Object: void notifyAll()>() in <com.jcraft.jsch.ChannelSession: void run()> ==> <java.lang.Object: void notifyAll()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.JSch: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.LocalIdentityRepository: void <init>(com.jcraft.jsch.JSch)>(r0) in <com.jcraft.jsch.JSch: void <init>()> ==> <com.jcraft.jsch.LocalIdentityRepository: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Properties: java.lang.Object get(java.lang.Object)>("os.name") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("Mac OS X") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-sha1", "com.jcraft.jsch.jcraft.HMACSHA1") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-md5", "com.jcraft.jsch.jcraft.HMACMD5") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-md5-96", "com.jcraft.jsch.jcraft.HMACMD596") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-sha1-96", "com.jcraft.jsch.jcraft.HMACSHA196") in <com.jcraft.jsch.JSch: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)>(r1, r2, 22) in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("username must not be null.") in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("host must not be null.") in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)>(r3) in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Session: void setUserName(java.lang.String)>(r0) in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void setUserName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Session: void setHost(java.lang.String)>(r1) in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Session: void setPort(int)>(i0) in <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void setPort(int)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("SSH-2.0-JSCH-0.1.49") in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("SSH-2.0-JSCH-0.1.49") in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r8 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Packet: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>(r0) in <com.jcraft.jsch.JSch: void setKnownHosts(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)>(r6) in <com.jcraft.jsch.JSch: void setKnownHosts(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>(r0) in <com.jcraft.jsch.JSch: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>(r6) in <com.jcraft.jsch.JSch: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, r25, 0, $i5) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>($r9, 0, $i8) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r27) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, r25, 0, $i5) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r27) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r14 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>(r24, 0, i15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>(r0) in <com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()> ==> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>(r1, $r2) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String)> ==> <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>(r2, r3) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>(r2, r3) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])> ==> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>(r3, r4) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>(r4, r5) in <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>(r5) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.LocalIdentityRepository: void add(com.jcraft.jsch.Identity)>(r3) in <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> ==> <com.jcraft.jsch.LocalIdentityRepository: void add(com.jcraft.jsch.Identity)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.jcraft.jsch.IdentityRepository: java.util.Vector getIdentities()>() in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.jcraft.jsch.Identity: java.lang.String getName()>() in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getName()>
INTERFACE edge: $r9 = interfaceinvoke r5.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7) in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<com.jcraft.jsch.IdentityRepository: boolean remove(byte[])>($r9) in <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> ==> <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.JSch: void removeIdentity(com.jcraft.jsch.Identity)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: interfaceinvoke $r2.<com.jcraft.jsch.IdentityRepository: boolean remove(byte[])>($r3) in <com.jcraft.jsch.JSch: void removeIdentity(com.jcraft.jsch.Identity)> ==> <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r8) in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <java.util.Vector: void addElement(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.jcraft.jsch.IdentityRepository: java.util.Vector getIdentities()>() in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.util.Vector: int size()>() in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.jcraft.jsch.Identity: java.lang.String getName()>() in <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r1.<com.jcraft.jsch.IdentityRepository: void removeAll()>() in <com.jcraft.jsch.JSch: void removeAllIdentity()> ==> <com.jcraft.jsch.LocalIdentityRepository: void removeAll()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.util.Hashtable: java.util.Enumeration keys()>() in <com.jcraft.jsch.JSch: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.util.Enumeration keys()>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6) in <com.jcraft.jsch.JSch: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6) in <com.jcraft.jsch.JSch: void setConfig(java.util.Hashtable)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r10) in <com.jcraft.jsch.JSch: void setConfig(java.util.Hashtable)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1) in <com.jcraft.jsch.JSch: void setConfig(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>(r1, 0, r2) in <com.jcraft.jsch.HostKey: void <init>(java.lang.String,byte[])> ==> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("invalid key type") in <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getFingerPrint: ") in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7) in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12) in <com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.KeyExchange: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("md5") in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getFingerPrint: ") in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7) in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12) in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.jcraft.jsch.KeyExchange: byte[] getHostKey()>() in <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.KeyExchange: byte[] getHostKey()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.JSchException: void <init>()>() in <com.jcraft.jsch.JSchPartialAuthException: void <init>()> ==> <com.jcraft.jsch.JSchException: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: i0 = specialinvoke r1.<com.jcraft.jsch.KnownHosts: int getType(byte[])>(r2) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts: int getType(byte[])>
VIRTUAL edge: $i4 = virtualinvoke r1.<com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])>($r6, r2) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i7) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z1 = virtualinvoke r10.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r0) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r10.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r0) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[") in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("]:") in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("]:") in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i3) in <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> ==> <java.lang.String: java.lang.String substring(int,int)>
CLINIT edge: r2 = staticinvoke <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>($r1) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>($r8, r7) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
STATIC edge: r6 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>($r1) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>
CLINIT edge: $r10 = <java.lang.System: java.io.PrintStream out> in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r6 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.HostKey: java.lang.String getHost()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z3 = virtualinvoke r40.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r1) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r40.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r1) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>(r0) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: r43 = virtualinvoke r3.<com.jcraft.jsch.KnownHosts: java.lang.String getKnownHostsRepositoryID()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <com.jcraft.jsch.KnownHosts: java.lang.String getKnownHostsRepositoryID()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>(r43) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r43) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: r45 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: java.io.File getParentFile()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r43) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist.\n") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Are you sure you want to create it?") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z1 = virtualinvoke r45.<java.io.File: boolean exists()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r45.<java.io.File: boolean mkdirs()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The parent directory ") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r45) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist.\n") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Are you sure you want to create it?") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r45) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has not been created.") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r45) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has been succesfully created.\nPlease check its access permission.") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r33.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("sync known_hosts: ") in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r31) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r37) in <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)>(null, null) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey()> ==> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.util.Vector: java.lang.Object elementAt(int)>(i5) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z2 = virtualinvoke r16.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r8) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r16.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r8) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke r16.<com.jcraft.jsch.HostKey: java.lang.String getType()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.HostKey: java.lang.String getType()>
VIRTUAL edge: $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r9) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i7) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r7.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r8) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r7.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r8) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r7.<com.jcraft.jsch.HostKey: java.lang.String getType()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.HostKey: java.lang.String getType()>
VIRTUAL edge: $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r9) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])>(r1, r2, null) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z3 = virtualinvoke r6.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r6.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke r6.<com.jcraft.jsch.HostKey: java.lang.String getType()>() in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.HostKey: java.lang.String getType()>
VIRTUAL edge: r8 = virtualinvoke r6.<com.jcraft.jsch.HostKey: java.lang.String getHost()>() in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
VIRTUAL edge: $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r12) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r7) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isHashed()>() in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isHashed()>
VIRTUAL edge: virtualinvoke $r9.<java.util.Vector: boolean removeElement(java.lang.Object)>(r6) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
SPECIAL edge: $r10 = specialinvoke r0.<com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)>(r8, r7) in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KnownHosts: void sync()>() in <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts: void sync()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.UserAuth: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>() in <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getUserName()>() in <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: java.lang.String getUserName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.jcraft.jsch.Packet: com.jcraft.jsch.Buffer getBuffer()>() in <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: com.jcraft.jsch.Buffer getBuffer()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(5) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r6) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r9 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r8) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r20) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r46 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r45) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r42.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_SERVICE_REQUEST sent") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: b0 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
INTERFACE edge: $z2 = interfaceinvoke $r11.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r41.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_SERVICE_ACCEPT received") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>(r44) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Buffer: void putString(byte[])>($r17) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void putString(byte[])>($r19) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $b1 = virtualinvoke $r47.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r33.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r34.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r35.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r48 = virtualinvoke $r36.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r37.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r27.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r49 = virtualinvoke $r30.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r31.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("USERAUTH fail (") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")") in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r26) in <com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke $r2.<java.net.ServerSocket: java.net.Socket accept()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.ServerSocket: java.net.Socket accept()>
VIRTUAL edge: virtualinvoke r12.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
VIRTUAL edge: r3 = virtualinvoke r12.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: r4 = virtualinvoke r12.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: $r9 = virtualinvoke r12.<java.net.Socket: java.net.InetAddress getInetAddress()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.Socket: java.net.InetAddress getInetAddress()>
VIRTUAL edge: $i1 = virtualinvoke r12.<java.net.Socket: int getPort()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.Socket: int getPort()>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void init()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void init()>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setInputStream(java.io.InputStream)>(r3) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setOutputStream(java.io.OutputStream)>(r4) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setHost(java.lang.String)>($r8) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setPort(int)>($i0) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setPort(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setOrgIPAddress(java.lang.String)>($r10) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setOrgIPAddress(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void setOrgPort(int)>($i1) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void setOrgPort(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.ChannelDirectTCPIP: void connect()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void connect()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>($r5) in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.net.InetAddress: java.lang.String getHostAddress()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <java.net.InetAddress: java.lang.String getHostAddress()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.PortWatcher: void delete()>() in <com.jcraft.jsch.PortWatcher: void run()> ==> <com.jcraft.jsch.PortWatcher: void delete()>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelDirectTCPIP: byte[] _type> in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <clinit>()>
CLINIT edge: $r1 = <com.jcraft.jsch.ChannelDirectTCPIP: byte[] _type> in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.net.Socket: void <init>(java.lang.String,int)>($r3, $i0) in <com.jcraft.jsch.Util$1: void run()> ==> <java.net.Socket: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.net.Socket: boolean isConnected()>() in <com.jcraft.jsch.Util$1: void run()> ==> <java.net.Socket: boolean isConnected()>
VIRTUAL edge: virtualinvoke $r15.<java.net.Socket: void close()>() in <com.jcraft.jsch.Util$1: void run()> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0) in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.jcraft.jsch.SftpException: java.lang.String getMessage()>() in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.SftpException: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(10) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(100) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(108) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(114) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(119) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(115) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(114) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(119) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(115) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(114) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(119) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r13 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.jcraft.jsch.SftpATTRS: boolean isDir()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.jcraft.jsch.SftpATTRS: boolean isLink()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> ==> <com.jcraft.jsch.SftpATTRS: boolean isLink()>
SPECIAL edge: specialinvoke $r0.<java.text.SimpleDateFormat: void <init>()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String getAtimeString()> ==> <java.text.SimpleDateFormat: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r2) in <com.jcraft.jsch.SftpATTRS: java.lang.String getAtimeString()> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
SPECIAL edge: specialinvoke $r2.<java.util.Date: void <init>(long)>($l1) in <com.jcraft.jsch.SftpATTRS: java.lang.String getAtimeString()> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<java.util.Date: void <init>(long)>($l2) in <com.jcraft.jsch.SftpATTRS: java.lang.String getMtimeString()> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.util.Date: java.lang.String toString()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String getMtimeString()> ==> <java.util.Date: java.lang.String toString()>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(32768) in <com.jcraft.jsch.SftpATTRS: boolean isReg()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(16384) in <com.jcraft.jsch.SftpATTRS: boolean isDir()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(8192) in <com.jcraft.jsch.SftpATTRS: boolean isChr()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(24576) in <com.jcraft.jsch.SftpATTRS: boolean isBlk()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(4096) in <com.jcraft.jsch.SftpATTRS: boolean isFifo()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(40960) in <com.jcraft.jsch.SftpATTRS: boolean isLink()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.SftpATTRS: boolean isType(int)>(49152) in <com.jcraft.jsch.SftpATTRS: boolean isSock()> ==> <com.jcraft.jsch.SftpATTRS: boolean isType(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2) in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.jcraft.jsch.SftpATTRS: int getUId()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <com.jcraft.jsch.SftpATTRS: int getUId()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.jcraft.jsch.SftpATTRS: int getGId()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <com.jcraft.jsch.SftpATTRS: int getGId()>
VIRTUAL edge: $l2 = virtualinvoke r1.<com.jcraft.jsch.SftpATTRS: long getSize()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <com.jcraft.jsch.SftpATTRS: long getSize()>
VIRTUAL edge: $r11 = virtualinvoke r1.<com.jcraft.jsch.SftpATTRS: java.lang.String getMtimeString()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <com.jcraft.jsch.SftpATTRS: java.lang.String getMtimeString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0) in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1) in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l2) in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.SftpATTRS: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.jcraft.jsch.ChannelSftp$LsEntry: java.lang.String getFilename()>() in <com.jcraft.jsch.ChannelSftp$LsEntry: int compareTo(java.lang.Object)> ==> <com.jcraft.jsch.ChannelSftp$LsEntry: java.lang.String getFilename()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5) in <com.jcraft.jsch.ChannelSftp$LsEntry: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>("a decendent of LsEntry must be given.") in <com.jcraft.jsch.ChannelSftp$LsEntry: int compareTo(java.lang.Object)> ==> <java.lang.ClassCastException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1) in <com.jcraft.jsch.ChannelSftp$3: int select(com.jcraft.jsch.ChannelSftp$LsEntry)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>($r1, 0, 1) in <com.jcraft.jsch.ChannelSftp$2: int read()> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[])> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r71.<java.lang.NullPointerException: void <init>()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.NullPointerException: void <init>()>
SPECIAL edge: specialinvoke $r90.<java.lang.IndexOutOfBoundsException: void <init>()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: void close()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: long skip(long)>($l54) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: void close()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$2: void close()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: $i57 = virtualinvoke $r92.<com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>
VIRTUAL edge: $i59 = virtualinvoke $r94.<com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>
SPECIAL edge: specialinvoke $r89.<java.io.IOException: void <init>(java.lang.String)>("error") in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: r95 = virtualinvoke $r15.<com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>($i8) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>
VIRTUAL edge: virtualinvoke $r84.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>($r86, $r87) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r76.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ") in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r78 = virtualinvoke $r74.<com.jcraft.jsch.SftpException: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r79 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r78) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r75.<java.io.IOException: void <init>(java.lang.String)>($r80) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.io.IOException: void <init>(java.lang.String)>("error") in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: i63 = virtualinvoke $r51.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>("error") in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: i64 = virtualinvoke $r24.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i16 = virtualinvoke $r26.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i66) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i16 = virtualinvoke $r26.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i66) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i16 = virtualinvoke $r26.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i66) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i16 = virtualinvoke $r26.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i66) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: i37 = virtualinvoke $r44.<java.io.InputStream: int read(byte[],int,int)>($r45, i68, i69) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i37 = virtualinvoke $r44.<java.io.InputStream: int read(byte[],int,int)>($r45, i68, i69) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i37 = virtualinvoke $r44.<java.io.InputStream: int read(byte[],int,int)>($r45, i68, i69) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i37 = virtualinvoke $r44.<java.io.InputStream: int read(byte[],int,int)>($r45, i68, i69) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r41.<java.io.InputStream: long skip(long)>($l35) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.FileInputStream: long skip(long)>
VIRTUAL edge: virtualinvoke $r41.<java.io.InputStream: long skip(long)>($l35) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>($r34, $r35) in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r73.<java.io.IOException: void <init>(java.lang.String)>("error") in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $i21 = virtualinvoke $r28.<com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>() in <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
CLINIT edge: r9 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r2, r1, r9) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelSftp: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.ChannelSftp: void access$600(com.jcraft.jsch.ChannelSftp,long)>($r4, $l3) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelSftp: void access$600(com.jcraft.jsch.ChannelSftp,long)>
STATIC edge: r9 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r2, r1, r9) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
CLINIT edge: r9 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r2, r1, r9) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void <clinit>()>
CLINIT edge: r9 = staticinvoke <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r2, r1, r9) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelSession: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>($r5, $r6) in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("error") in <com.jcraft.jsch.ChannelSftp$2: void close()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[])> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
SPECIAL edge: specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("stream already closed") in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $i20 = virtualinvoke $r17.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.FileInputStream: int available()>
VIRTUAL edge: $i20 = virtualinvoke $r17.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.InputStream: int available()>
VIRTUAL edge: $i20 = virtualinvoke $r17.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.PipedInputStream: int available()>
VIRTUAL edge: $i25 = virtualinvoke $r26.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.FileInputStream: int available()>
VIRTUAL edge: $i25 = virtualinvoke $r26.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.InputStream: int available()>
VIRTUAL edge: $i25 = virtualinvoke $r26.<java.io.InputStream: int available()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.PipedInputStream: int available()>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$1: void close()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("canceled") in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r23) in <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>($r2, 0, 1) in <com.jcraft.jsch.ChannelSftp$1: void write(int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("stream already closed") in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<com.jcraft.jsch.SftpException: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7) in <com.jcraft.jsch.ChannelSftp$1: void flush()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$1: void flush()>() in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r8) in <com.jcraft.jsch.ChannelSftp$1: void close()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestSftp: boolean waitForReply()>() in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSftp: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestShell: boolean waitForReply()>() in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestShell: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestPtyReq: boolean waitForReply()>() in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestPtyReq: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i5) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestX11: boolean waitForReply()>() in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestX11: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestSubsystem: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSubsystem: void setReply(boolean)>(z0) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)> ==> <com.jcraft.jsch.Request: void setReply(boolean)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r2, r3) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)> ==> <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestSubsystem: boolean waitForReply()>() in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSubsystem: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestWindowChange: boolean waitForReply()>() in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestWindowChange: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i5) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestAgentForwarding: void setReply(boolean)>(0) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void setReply(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestAgentForwarding: boolean waitForReply()>() in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestAgentForwarding: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r2) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.RequestEnv: boolean waitForReply()>() in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: boolean waitForReply()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestEnv: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(98) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>($b1) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.jcraft.jsch.KeyPair: boolean decrypt(byte[])>(r1) in <com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> ==> <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.jcraft.jsch.KeyPair: byte[] getSignature(byte[])>(r1) in <com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.jcraft.jsch.KeyPair: byte[] getSignature(byte[])>(r1) in <com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented") in <com.jcraft.jsch.IdentityFile: boolean decrypt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.jcraft.jsch.KeyPair: byte[] getKeyTypeName()>() in <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getKeyTypeName()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.jcraft.jsch.KeyPair: byte[] getKeyTypeName()>() in <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getKeyTypeName()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r3) in <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()> ==> <java.lang.String: void <init>(byte[])>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getKeyTypeName()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] sshdss> in <com.jcraft.jsch.KeyPairDSA: byte[] getKeyTypeName()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getKeyTypeName()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] sshrsa> in <com.jcraft.jsch.KeyPairRSA: byte[] getKeyTypeName()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.jcraft.jsch.KeyPair: boolean isEncrypted()>() in <com.jcraft.jsch.IdentityFile: boolean isEncrypted()> ==> <com.jcraft.jsch.KeyPair: boolean isEncrypted()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.IdentityFile: void clear()> ==> <com.jcraft.jsch.KeyPairDSA: void dispose()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.IdentityFile: void clear()> ==> <com.jcraft.jsch.KeyPair: void dispose()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.IdentityFile: void clear()> ==> <com.jcraft.jsch.KeyPairRSA: void dispose()>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r5) in <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>(r1) in <com.jcraft.jsch.LocalIdentityRepository: void add(com.jcraft.jsch.Identity)> ==> <java.util.Vector: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1) in <com.jcraft.jsch.LocalIdentityRepository: void add(com.jcraft.jsch.Identity)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r5) in <com.jcraft.jsch.LocalIdentityRepository: boolean add(byte[])> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: r7 = interfaceinvoke r6.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: interfaceinvoke r6.<com.jcraft.jsch.Identity: void clear()>() in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <com.jcraft.jsch.IdentityFile: void clear()>
VIRTUAL edge: virtualinvoke $r8.<java.util.Vector: boolean removeElement(java.lang.Object)>(r6) in <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Vector: int size()>() in <com.jcraft.jsch.LocalIdentityRepository: void removeAll()> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.LocalIdentityRepository: void removeAll()> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: interfaceinvoke r6.<com.jcraft.jsch.Identity: void clear()>() in <com.jcraft.jsch.LocalIdentityRepository: void removeAll()> ==> <com.jcraft.jsch.IdentityFile: void clear()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void removeAllElements()>() in <com.jcraft.jsch.LocalIdentityRepository: void removeAll()> ==> <java.util.Vector: void removeAllElements()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyPair: void generate(int)>(i1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairDSA: void generate(int)>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyPair: void generate(int)>(i1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> ==> <com.jcraft.jsch.KeyPairRSA: void generate(int)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("keypairgen.dsa") in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("keypairgen.dsa") in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("keypairgen.rsa") in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("keypairgen.rsa") in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPrivateKey()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPrivateKey()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()>
SPECIAL edge: r3 = specialinvoke r0.<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])>(r1, r2) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getBegin()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getBegin()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getBegin()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getBegin()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getEnd()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getEnd()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getEnd()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getEnd()>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r7) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r7) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r8) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r8) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel$1: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PipedOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel$1: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PipedOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(int)>($b14) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r19) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r19) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r20) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r20) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, 64) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[],int,int)>(r5, i16, $i4) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r10) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r11) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r11) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r13, 0, $i6) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r10) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r13, 0, $i6) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r10) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] begin> in <com.jcraft.jsch.KeyPairDSA: byte[] getBegin()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] begin> in <com.jcraft.jsch.KeyPairDSA: byte[] getBegin()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] begin> in <com.jcraft.jsch.KeyPairRSA: byte[] getBegin()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] begin> in <com.jcraft.jsch.KeyPairRSA: byte[] getBegin()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] end> in <com.jcraft.jsch.KeyPairDSA: byte[] getEnd()> ==> <com.jcraft.jsch.KeyPairDSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairDSA: byte[] end> in <com.jcraft.jsch.KeyPairDSA: byte[] getEnd()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] end> in <com.jcraft.jsch.KeyPairRSA: byte[] getEnd()> ==> <com.jcraft.jsch.KeyPairRSA: void <clinit>()>
CLINIT edge: $r0 = <com.jcraft.jsch.KeyPairRSA: byte[] end> in <com.jcraft.jsch.KeyPairRSA: byte[] getEnd()> ==> <com.jcraft.jsch.KeyPair: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getKeyTypeName()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getKeyTypeName()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getKeyTypeName()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getKeyTypeName()>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r8) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r8) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r9) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r9) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
SPECIAL edge: specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.KeyPair: void writePublicKey(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)>($r0, r4) in <com.jcraft.jsch.KeyPair: void writePublicKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i5, i6) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r14) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r14) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Comment: \"") in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"") in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)>($r0, r4) in <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.lang.String)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)>($r0) in <com.jcraft.jsch.KeyPair: void writePrivateKey(java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)>
SPECIAL edge: $r5 = specialinvoke r0.<com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>() in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("md5") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("md5") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.KeyPair: void setPassphrase(byte[])>($r2) in <com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void setPassphrase(byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.KeyPair: void setPassphrase(byte[])>($r3) in <com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> ==> <com.jcraft.jsch.KeyPair: void setPassphrase(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.jcraft.jsch.KeyPair: boolean decrypt(byte[])>($r2) in <com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> ==> <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])>
SPECIAL edge: r4 = specialinvoke r0.<com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])>($r3, r1, $r2) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r4) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r4) in <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r8) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r8) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
CLINIT edge: $r24 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i90, $r11, 0, i91) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i85, $r9, 0, i86) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i80, $r7, 0, i81) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i75, $r5, 0, i76) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i70, $r3, 0, i71) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r13 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i70, $r3, 0, i71) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r31 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i124, $r17, 0, i125) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i119, $r15, 0, i120) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i114, $r13, 0, i115) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i109, $r11, 0, i110) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i104, $r9, 0, i105) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i99, $r7, 0, i100) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i94, $r5, 0, i95) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i89, $r3, 0, i90) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r19 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i89, $r3, 0, i90) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".pub") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r7) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r13 = virtualinvoke $r23.<java.io.IOException: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r13 = virtualinvoke $r23.<java.io.IOException: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".pub") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r24.<java.io.IOException: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r24.<java.io.IOException: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r62.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r62.<com.jcraft.jsch.Buffer: void skip(int)>($i178) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: $r64 = virtualinvoke $r62.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r62.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void rewind()>
SPECIAL edge: specialinvoke $r63.<java.lang.String: void <init>(byte[])>($r64) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: $z7 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r66.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("privatekey: invalid key ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke $r68.<java.lang.String: void <init>(byte[],int,int)>(r1, 4, 7) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: void <init>(byte[],int,int)>
VIRTUAL edge: $r69 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r65.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r70) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid privatekey: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r57.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r61) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r89.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid privatekey: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r88.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r92) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r55 = virtualinvoke r93.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i141 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i125 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i109 = interfaceinvoke r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
SPECIAL edge: specialinvoke $r50.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("privatekey: aes256-cbc is not available ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r49.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r53) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke r94.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r41.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("privatekey: aes192-cbc is not available ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r40.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r44) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke r95.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r32.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("privatekey: aes128-cbc is not available ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r31.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r35) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid privatekey: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r25.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r29) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid privatekey: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r22) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r79) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i41 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getOffSet()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getOffSet()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r100) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i38 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getOffSet()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: int getOffSet()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r101) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>("3des-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unknown privatekey format: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r17) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.String: void <init>(byte[],int,int)>(r0, i211, $i4) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.String: void <init>(byte[],int,int)>
VIRTUAL edge: $r75 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r75 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r75 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r75 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r73 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r73 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r73 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r73 = virtualinvoke $r71.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r74.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r75, $r71) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r72.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r73) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>(r8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>(r8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>
VIRTUAL edge: $z0 = virtualinvoke r104.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r79) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])>
VIRTUAL edge: $z0 = virtualinvoke r104.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r79) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid privatekey: ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r6) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.KeyPair: void finalize()> ==> <com.jcraft.jsch.KeyPairDSA: void dispose()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.KeyPair: void finalize()> ==> <com.jcraft.jsch.KeyPair: void dispose()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.KeyPair: void finalize()> ==> <com.jcraft.jsch.KeyPairRSA: void dispose()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>(r1, null, null, null) in <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>(r1) in <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])> ==> <java.math.BigInteger: int bitLength()>
SPECIAL edge: r1 = specialinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r3 = virtualinvoke r15.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: void init()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureRSA: void init()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: void setPrvKey(byte[],byte[])>($r7, $r6) in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: void update(byte[])>(r8) in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureRSA: void update(byte[])>
INTERFACE edge: r9 = interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: byte[] sign()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureRSA: byte[] sign()>
VIRTUAL edge: $r3 = virtualinvoke r16.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: void init()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.jce.SignatureRSA: void init()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>($r17, $r18) in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.Buffer: void <init>(byte[])>($r10) in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r14 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: boolean isEncrypted()>() in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPair: boolean isEncrypted()>
SPECIAL edge: $r7 = specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getCArray()>() in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("key is encrypted.") in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r3) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r4) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r6) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r11) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r12, 0, $i1) in <com.jcraft.jsch.KeyPairRSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
CLINIT edge: $r3 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()> ==> <java.math.BigInteger: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.KeyPairRSA: void dispose()> ==> <com.jcraft.jsch.KeyPair: void dispose()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>(r1, null, null, null, null, null) in <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>(r1) in <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>
SPECIAL edge: specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: int bitLength()>
SPECIAL edge: r1 = specialinvoke r0.<com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> ==> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r3 = virtualinvoke r17.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: void init()>() in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureDSA: void init()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])>($r9, $r8, $r7, $r6) in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: void update(byte[])>(r10) in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureDSA: void update(byte[])>
INTERFACE edge: r11 = interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: byte[] sign()>() in <com.jcraft.jsch.KeyPairDSA: byte[] getSignature(byte[])> ==> <com.jcraft.jsch.jce.SignatureDSA: byte[] sign()>
VIRTUAL edge: $r3 = virtualinvoke r18.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: void init()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.jce.SignatureDSA: void init()>
INTERFACE edge: interfaceinvoke r5.<com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>($r19, $r20, $r21, $r22) in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.Buffer: void <init>(byte[])>($r10) in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r14 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r15 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r16 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.Signature getVerifier()> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: boolean isEncrypted()>() in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.KeyPair: boolean isEncrypted()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("key is encrypted.") in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r3) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r4) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r6) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>(r11, 0, $i1) in <com.jcraft.jsch.KeyPairDSA: byte[] forSSHAgent()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPair: void dispose()>() in <com.jcraft.jsch.KeyPairDSA: void dispose()> ==> <com.jcraft.jsch.KeyPair: void dispose()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i3) in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r28.<java.net.Socket: void setSoTimeout(int)>(i1) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setSoTimeout(int)>
VIRTUAL edge: virtualinvoke $r8.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
VIRTUAL edge: r56 = virtualinvoke r55.<java.net.InetAddress: byte[] getAddress()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.InetAddress: byte[] getAddress()>
SPECIAL edge: specialinvoke $r63.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r50 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS4: ") in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r51 = virtualinvoke $r72.<java.net.UnknownHostException: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r64.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r53, $r47) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $i12 = virtualinvoke $r26.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i13 = virtualinvoke $r27.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>(r54, 0, i24) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: i27 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>(r54, i26, $i11) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i27 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>(r54, i26, $i11) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i27 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>(r54, i26, $i11) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i27 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>(r54, i26, $i11) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r65.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("ProxySOCKS4: stream is closed") in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r66.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS4: server returns VN ") in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b10) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r67.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r21) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r12.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r68.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS4: server returns CD ") in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b9) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: r59 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r69.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r59) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r44.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r70.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS4: ") in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r42.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r42.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r42.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r39 = virtualinvoke $r42.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r71.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r41) in <com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS4: void close()> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyExchange: void <init>()>() in <com.jcraft.jsch.DHG14: void <init>()> ==> <com.jcraft.jsch.KeyExchange: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("sha-1") in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("dh") in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r29) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r7 = virtualinvoke r36.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void init()>
VIRTUAL edge: virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.Object)>($r34) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r13) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r15 = virtualinvoke r38.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r18.<com.jcraft.jsch.DH: void init()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void init()>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.DH: void setP(byte[])>($r19) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void setP(byte[])>
INTERFACE edge: interfaceinvoke $r22.<com.jcraft.jsch.DH: void setG(byte[])>($r21) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void setG(byte[])>
INTERFACE edge: $r24 = interfaceinvoke $r23.<com.jcraft.jsch.DH: byte[] getE()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: byte[] getE()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Buffer: void putByte(byte)>(30) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r27) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
INTERFACE edge: $z0 = interfaceinvoke $r30.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r31.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_KEXDH_INIT sent") in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: interfaceinvoke $r32.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "expecting SSH_MSG_KEXDH_REPLY") in <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i94 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r97 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getMPInt()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r88.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type: must be 31 ") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i94) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r89.<java.io.PrintStream: void println(java.lang.String)>($r92) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.jcraft.jsch.DH: void setF(byte[])>(r97) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: void setF(byte[])>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.jcraft.jsch.DH: byte[] getK()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: byte[] getK()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putString(byte[])>($r12) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putString(byte[])>($r16) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r18) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r97) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r21) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: $i1 = virtualinvoke $r23.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r24) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
INTERFACE edge: interfaceinvoke $r26.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r24, 0, $i2) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r26.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r24, 0, $i2) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r28 = interfaceinvoke $r27.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r28 = interfaceinvoke $r27.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r78 = virtualinvoke $r77.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r79 = virtualinvoke r103.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void init()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void init()>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>(r98, r100) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void update(byte[])>($r81) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void update(byte[])>
INTERFACE edge: z4 = interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r96.<java.io.PrintStream: void println(java.lang.Object)>($r95) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r82.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r84.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_rsa_verify: signature ") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z4) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r83.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r87) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke r114.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void init()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void init()>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>(r111, r105, r107, r109) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void update(byte[])>($r60) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void update(byte[])>
INTERFACE edge: z4 = interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.Object)>($r93) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r61.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r63.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_dss_verify: signature ") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z4) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r62.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r66) in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>("unknown alg") in <com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.CipherNone: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i3) in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxySOCKS5: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r40.<java.net.Socket: void setSoTimeout(int)>(i1) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setSoTimeout(int)>
VIRTUAL edge: virtualinvoke $r8.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i32) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r10, r61, 2) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r39, r61, 2) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r14, r61, 4) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r18, r61, 6) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r16, r61, 1) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r17, r61, $i16) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>($r15, r61, 18) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
VIRTUAL edge: $i18 = virtualinvoke $r28.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i20 = virtualinvoke $r31.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i21 = virtualinvoke $r32.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i22 = virtualinvoke $r33.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i24 = virtualinvoke $r36.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i25 = virtualinvoke $r37.<java.lang.String: int length()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r38.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i38) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r25.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r26.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("fail in SOCKS5 proxy") in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>(r61, 0, i47) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r19.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS5: server returns ") in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b17) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r24) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r56.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r48.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxySOCKS5: ") in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r54.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r50 = virtualinvoke $r54.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r50 = virtualinvoke $r54.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r50 = virtualinvoke $r54.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r67 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>(r67, $r54) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r52.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r67) in <com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxySOCKS5: void close()> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: void <init>()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <init>()> ==> <com.jcraft.jsch.UserAuth: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putString(byte[])>(r3) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r75.<com.jcraft.jsch.Buffer: void putString(byte[])>($r74) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r14) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r81 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r80) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r27 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r79) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r69) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r54 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r53) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r64 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r63) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r61 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r60) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r33 = virtualinvoke r1.<com.jcraft.jsch.Session: byte[] getSessionId()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: byte[] getSessionId()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r41) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r43 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r42) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $b11 = virtualinvoke $r82.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r23.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r24.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r83 = virtualinvoke $r25.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r84 = virtualinvoke $r18.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r28 = virtualinvoke r86.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r87.<com.jcraft.jsch.GSSContext: void create(java.lang.String,java.lang.String)>($r31, $r30) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke r87.<com.jcraft.jsch.GSSContext: boolean isEstablished()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: boolean isEstablished()>
INTERFACE edge: r88 = interfaceinvoke r87.<com.jcraft.jsch.GSSContext: byte[] init(byte[],int,int)>(r88, 0, $i6) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)>
INTERFACE edge: $z0 = interfaceinvoke r87.<com.jcraft.jsch.GSSContext: boolean isEstablished()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: boolean isEstablished()>
INTERFACE edge: r37 = interfaceinvoke r87.<com.jcraft.jsch.GSSContext: byte[] getMIC(byte[],int,int)>($r36, 0, $i3) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] getMIC(byte[],int,int)>
INTERFACE edge: interfaceinvoke r87.<com.jcraft.jsch.GSSContext: void dispose()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jgss.GSSContextKrb5: void dispose()>
VIRTUAL edge: virtualinvoke $r66.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r67.<com.jcraft.jsch.Buffer: void putByte(byte)>(61) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r68.<com.jcraft.jsch.Buffer: void putString(byte[])>(r88) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $b7 = virtualinvoke $r55.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: $b9 = virtualinvoke $r65.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: $b8 = virtualinvoke $r62.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r56.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r57.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r58.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r88 = virtualinvoke $r59.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r32.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void putString(byte[])>($r33) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void putString(byte[])>(r3) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void putString(byte[])>($r34) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void putString(byte[])>($r35) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $i3 = virtualinvoke $r32.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r38.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r39.<com.jcraft.jsch.Buffer: void putByte(byte)>(66) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r40.<com.jcraft.jsch.Buffer: void putString(byte[])>(r37) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $b4 = virtualinvoke $r44.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r45.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r46.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r47.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r49 = virtualinvoke $r48.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i5 = virtualinvoke $r50.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke $r51.<com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>($r52) in <com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<org.ietf.jgss.Oid: void <init>(java.lang.String)>("1.2.840.113554.1.2.2") in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.Oid: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r27.<org.ietf.jgss.Oid: void <init>(java.lang.String)>("1.2.840.113554.1.2.2.1") in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.Oid: void <init>(java.lang.String)>
VIRTUAL edge: r23 = virtualinvoke $r5.<java.net.InetAddress: java.lang.String getCanonicalHostName()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.net.InetAddress: java.lang.String getCanonicalHostName()>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("host/") in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r24 = virtualinvoke r3.<org.ietf.jgss.GSSManager: org.ietf.jgss.GSSName createName(java.lang.String,org.ietf.jgss.Oid)>($r9, $r27) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSName createName(java.lang.String,org.ietf.jgss.Oid)>
VIRTUAL edge: $r11 = virtualinvoke r3.<org.ietf.jgss.GSSManager: org.ietf.jgss.GSSContext createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)>(r24, $r26, null, 0) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSContext createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)>
INTERFACE edge: interfaceinvoke $r12.<org.ietf.jgss.GSSContext: void requestMutualAuth(boolean)>(1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSContext: void requestMutualAuth(boolean)>
INTERFACE edge: interfaceinvoke $r13.<org.ietf.jgss.GSSContext: void requestConf(boolean)>(1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSContext: void requestConf(boolean)>
INTERFACE edge: interfaceinvoke $r14.<org.ietf.jgss.GSSContext: void requestInteg(boolean)>(1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSContext: void requestInteg(boolean)>
INTERFACE edge: interfaceinvoke $r15.<org.ietf.jgss.GSSContext: void requestCredDeleg(boolean)>(1) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSContext: void requestCredDeleg(boolean)>
INTERFACE edge: interfaceinvoke $r16.<org.ietf.jgss.GSSContext: void requestAnonymity(boolean)>(0) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSContext: void requestAnonymity(boolean)>
VIRTUAL edge: $r19 = virtualinvoke $r30.<org.ietf.jgss.GSSException: java.lang.String toString()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <org.ietf.jgss.GSSException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r19) in <com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
INTERFACE edge: r14 = interfaceinvoke $r3.<org.ietf.jgss.GSSContext: byte[] initSecContext(byte[],int,int)>(r2, 0, i0) in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <org.ietf.jgss.GSSContext: byte[] initSecContext(byte[],int,int)>
VIRTUAL edge: $r13 = virtualinvoke $r19.<org.ietf.jgss.GSSException: java.lang.String toString()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <org.ietf.jgss.GSSException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r13) in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r20.<java.lang.SecurityException: java.lang.String toString()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r10) in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.ietf.jgss.MessageProp: void <init>(int,boolean)>(0, 1) in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] getMIC(byte[],int,int)> ==> <org.ietf.jgss.MessageProp: void <init>(int,boolean)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<org.ietf.jgss.GSSContext: byte[] getMIC(byte[],int,int,org.ietf.jgss.MessageProp)>(r2, i0, i1, $r0) in <com.jcraft.jsch.jgss.GSSContextKrb5: byte[] getMIC(byte[],int,int)> ==> <org.ietf.jgss.GSSContext: byte[] getMIC(byte[],int,int,org.ietf.jgss.MessageProp)>
INTERFACE edge: interfaceinvoke $r1.<org.ietf.jgss.GSSContext: void dispose()>() in <com.jcraft.jsch.jgss.GSSContextKrb5: void dispose()> ==> <org.ietf.jgss.GSSContext: void dispose()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMACSHA1: void <init>()>() in <com.jcraft.jsch.jcraft.HMACSHA196: void <init>()> ==> <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMACSHA1: void doFinal(byte[],int)>($r1, 0) in <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMAC: void <init>()>() in <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> ==> <com.jcraft.jsch.jcraft.HMAC: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jcraft.HMACSHA1: void setH(java.security.MessageDigest)>(r4) in <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> ==> <com.jcraft.jsch.jcraft.HMAC: void setH(java.security.MessageDigest)>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>($r1) in <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> ==> <java.io.PrintStream: void println(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>($r5, 0, 4) in <com.jcraft.jsch.jcraft.HMAC: void update(int)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMACMD5: void <init>()>() in <com.jcraft.jsch.jcraft.HMACMD596: void <init>()> ==> <com.jcraft.jsch.jcraft.HMACMD5: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMACMD5: void doFinal(byte[],int)>($r1, 0) in <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jcraft.HMAC: void <init>()>() in <com.jcraft.jsch.jcraft.HMACMD5: void <init>()> ==> <com.jcraft.jsch.jcraft.HMAC: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jcraft.HMACMD5: void setH(java.security.MessageDigest)>(r4) in <com.jcraft.jsch.jcraft.HMACMD5: void <init>()> ==> <com.jcraft.jsch.jcraft.HMAC: void setH(java.security.MessageDigest)>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>($r1) in <com.jcraft.jsch.jcraft.HMACMD5: void <init>()> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jcraft.Compression: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jzlib.ZStream: void <init>()>() in <com.jcraft.jsch.jcraft.Compression: void <init>()> ==> <com.jcraft.jzlib.ZStream: void <init>()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("compress: deflate returnd ") in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19) in <com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("uncompress: inflate returnd ") in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23) in <com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyExchange: void <init>()>() in <com.jcraft.jsch.DHG1: void <init>()> ==> <com.jcraft.jsch.KeyExchange: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("sha-1") in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("dh") in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r29) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r7 = virtualinvoke r36.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void init()>
VIRTUAL edge: virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.Object)>($r34) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r13) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r15 = virtualinvoke r38.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r18.<com.jcraft.jsch.DH: void init()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void init()>
INTERFACE edge: interfaceinvoke $r20.<com.jcraft.jsch.DH: void setP(byte[])>($r19) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void setP(byte[])>
INTERFACE edge: interfaceinvoke $r22.<com.jcraft.jsch.DH: void setG(byte[])>($r21) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void setG(byte[])>
INTERFACE edge: $r24 = interfaceinvoke $r23.<com.jcraft.jsch.DH: byte[] getE()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: byte[] getE()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Buffer: void putByte(byte)>(30) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r27) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
INTERFACE edge: $z0 = interfaceinvoke $r30.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r31.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_KEXDH_INIT sent") in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: interfaceinvoke $r32.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "expecting SSH_MSG_KEXDH_REPLY") in <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i94 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r97 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getMPInt()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r88.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type: must be 31 ") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i94) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r89.<java.io.PrintStream: void println(java.lang.String)>($r92) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.jcraft.jsch.DH: void setF(byte[])>(r97) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: void setF(byte[])>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.jcraft.jsch.DH: byte[] getK()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: byte[] getK()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putString(byte[])>($r12) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putString(byte[])>($r16) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r18) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r97) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r21) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: $i1 = virtualinvoke $r23.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r24) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
INTERFACE edge: interfaceinvoke $r26.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r24, 0, $i2) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r26.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r24, 0, $i2) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r28 = interfaceinvoke $r27.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r28 = interfaceinvoke $r27.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r78 = virtualinvoke $r77.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r79 = virtualinvoke r103.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void init()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void init()>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>(r98, r100) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])>
INTERFACE edge: interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: void update(byte[])>($r81) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void update(byte[])>
INTERFACE edge: z4 = interfaceinvoke r102.<com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r96.<java.io.PrintStream: void println(java.lang.Object)>($r95) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r82.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r84.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_rsa_verify: signature ") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z4) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r83.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r87) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke r114.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void init()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void init()>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>(r111, r105, r107, r109) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
INTERFACE edge: interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: void update(byte[])>($r60) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void update(byte[])>
INTERFACE edge: z4 = interfaceinvoke r113.<com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.Object)>($r93) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r61.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r63.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_dss_verify: signature ") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z4) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r62.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r66) in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>("unknown alg") in <com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r78 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r71.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r78) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: r78 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r63.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r65 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Password for ") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r78) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r70.<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>("password") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r69.<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>("password") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putString(byte[])>(r80) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putString(byte[])>($r13) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.Buffer: void putString(byte[])>($r15) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r16.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putString(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r18) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r82 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r81) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r53) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $b7 = virtualinvoke $r83.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r55.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r56.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r57.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r84 = virtualinvoke $r58.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r59.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r27.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r86 = virtualinvoke $r29.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r30.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r54.<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>("password") in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r43.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r44.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r45.<com.jcraft.jsch.Buffer: void putString(byte[])>(r80) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r46.<com.jcraft.jsch.Buffer: void putString(byte[])>($r47) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r48.<com.jcraft.jsch.Buffer: void putString(byte[])>($r49) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r50.<com.jcraft.jsch.Buffer: void putByte(byte)>(1) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r51.<com.jcraft.jsch.Buffer: void putString(byte[])>(r77) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r52.<com.jcraft.jsch.Buffer: void putString(byte[])>(r42) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r21.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r89 = virtualinvoke $r22.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i8 = virtualinvoke $r23.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke $r24.<com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>($r25) in <com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.IdentityRepository getIdentityRepository()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.IdentityRepository getIdentityRepository()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r67) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r81 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r80) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: r86 = virtualinvoke r1.<com.jcraft.jsch.Session: byte[] getSessionId()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: byte[] getSessionId()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r29) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r88 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r87) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.jcraft.jsch.IdentityRepository: java.util.Vector getIdentities()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()>
VIRTUAL edge: $i0 = virtualinvoke r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i1 = virtualinvoke r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i20) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: r79 = interfaceinvoke r9.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: $r64 = interfaceinvoke r9.<com.jcraft.jsch.Identity: java.lang.String getAlgName()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()>
INTERFACE edge: $z4 = interfaceinvoke r9.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: $z2 = interfaceinvoke r9.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: $r50 = interfaceinvoke r9.<com.jcraft.jsch.Identity: java.lang.String getName()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getName()>
INTERFACE edge: $z5 = interfaceinvoke r9.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: $z0 = interfaceinvoke r9.<com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>(r77) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])>
INTERFACE edge: $z1 = interfaceinvoke r9.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: r79 = interfaceinvoke r9.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: $r19 = interfaceinvoke r9.<com.jcraft.jsch.Identity: java.lang.String getAlgName()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getAlgName()>
INTERFACE edge: r27 = interfaceinvoke r9.<com.jcraft.jsch.Identity: byte[] getSignature(byte[])>(r23) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])>
VIRTUAL edge: virtualinvoke $r55.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r56.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r57.<com.jcraft.jsch.Buffer: void putString(byte[])>(r78) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r58.<com.jcraft.jsch.Buffer: void putString(byte[])>($r59) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r60.<com.jcraft.jsch.Buffer: void putString(byte[])>($r61) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r62.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r63.<com.jcraft.jsch.Buffer: void putString(byte[])>($r65) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r66.<com.jcraft.jsch.Buffer: void putString(byte[])>(r79) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $b21 = virtualinvoke $r82.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r68.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r69.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r70.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r83 = virtualinvoke $r71.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r72.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r54.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("USERAUTH fail") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r47.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Passphrase for ") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>("publickey") in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putString(byte[])>(r78) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>($r16) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putByte(byte)>(1) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void putString(byte[])>($r20) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r21.<com.jcraft.jsch.Buffer: void putString(byte[])>(r79) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: void putString(byte[])>(r27) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $b25 = virtualinvoke $r89.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r37.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r38.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r39.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r90 = virtualinvoke $r40.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r41.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r30.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r31.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r91 = virtualinvoke $r33.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i27 = virtualinvoke $r34.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke $r35.<com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>($r36) in <com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyExchange: void <init>()>() in <com.jcraft.jsch.DHGEX: void <init>()> ==> <com.jcraft.jsch.KeyExchange: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("sha-1") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("dh") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r24) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r7 = virtualinvoke r40.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke $r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void init()>
VIRTUAL edge: virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.Object)>($r38) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r13) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $r15 = virtualinvoke r42.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r18.<com.jcraft.jsch.DH: void init()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.DH: void init()>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putByte(byte)>(34) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r21.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r23.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r25.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r27.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SSH_MSG_KEX_DH_GEX_REQUEST(") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") sent") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r26.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r35) in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: interfaceinvoke $r36.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "expecting SSH_MSG_KEX_DH_GEX_GROUP") in <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i97 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r102 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getMPInt()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
VIRTUAL edge: $r103 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getMPInt()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i98 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r128 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getMPInt()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r119.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r121 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type: must be SSH_MSG_KEX_DH_GEX_GROUP ") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r122 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i97) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r120.<java.io.PrintStream: void println(java.lang.String)>($r123) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
INTERFACE edge: interfaceinvoke $r105.<com.jcraft.jsch.DH: void setP(byte[])>($r104) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: void setP(byte[])>
INTERFACE edge: interfaceinvoke $r107.<com.jcraft.jsch.DH: void setG(byte[])>($r106) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: void setG(byte[])>
INTERFACE edge: $r109 = interfaceinvoke $r108.<com.jcraft.jsch.DH: byte[] getE()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: byte[] getE()>
VIRTUAL edge: virtualinvoke $r110.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r111.<com.jcraft.jsch.Buffer: void putByte(byte)>(32) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r113.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r112) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r115.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r114) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
INTERFACE edge: $z4 = interfaceinvoke $r116.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r117.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_KEX_DH_GEX_INIT sent") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: interfaceinvoke $r118.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "expecting SSH_MSG_KEX_DH_GEX_REPLY") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r97.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r99 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type: must be SSH_MSG_KEX_DH_GEX_REPLY ") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i98) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r98.<java.io.PrintStream: void println(java.lang.String)>($r101) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.jcraft.jsch.DH: void setF(byte[])>(r128) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: void setF(byte[])>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.jcraft.jsch.DH: byte[] getK()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.DH: byte[] getK()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putString(byte[])>($r12) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putString(byte[])>($r16) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r21) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r24.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r23) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r25) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r27.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r128) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>($r28) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: $i4 = virtualinvoke $r30.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r32.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r31) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
INTERFACE edge: interfaceinvoke $r33.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r31, 0, $i5) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r33.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r31, 0, $i5) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r35 = interfaceinvoke $r34.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: $z0 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.rsa") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r88 = virtualinvoke r134.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r133.<com.jcraft.jsch.SignatureRSA: void init()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void init()>
INTERFACE edge: interfaceinvoke r133.<com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>(r129, r131) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])>
INTERFACE edge: interfaceinvoke r133.<com.jcraft.jsch.SignatureRSA: void update(byte[])>($r90) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: void update(byte[])>
INTERFACE edge: z5 = interfaceinvoke r133.<com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureRSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r127.<java.io.PrintStream: void println(java.lang.Object)>($r126) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r91.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r93.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_rsa_verify: signature ") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z5) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r92.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r96) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $r64 = virtualinvoke $r63.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("signature.dss") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke r143.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r142.<com.jcraft.jsch.SignatureDSA: void init()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void init()>
INTERFACE edge: interfaceinvoke r142.<com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>(r140, $r68, r137, $r67) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
INTERFACE edge: interfaceinvoke r142.<com.jcraft.jsch.SignatureDSA: void update(byte[])>($r69) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: void update(byte[])>
INTERFACE edge: z5 = interfaceinvoke r142.<com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>(r3) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.jce.SignatureDSA: boolean verify(byte[])>
VIRTUAL edge: virtualinvoke $r125.<java.io.PrintStream: void println(java.lang.Object)>($r124) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r70.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r72.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ssh_dss_verify: signature ") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z5) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
VIRTUAL edge: $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r71.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r75) in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>("unknown alg") in <com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r72 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r67.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r72) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: r72 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putByte(byte)>(50) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void putString(byte[])>(r74) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putString(byte[])>($r14) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putString(byte[])>($r16) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void putString(byte[])>($r17) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putString(byte[])>($r19) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r21) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $r76 = virtualinvoke r1.<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>($r75) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r88) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $b17 = virtualinvoke $r77.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
VIRTUAL edge: virtualinvoke $r60.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r61.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r62.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r78 = virtualinvoke $r63.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r64.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r52.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r53.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r54.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r80 = virtualinvoke $r55.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i18 = virtualinvoke $r56.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke $r58.<com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>($r59) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r23.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: virtualinvoke $r24.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i2 = virtualinvoke $r31.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $r48 = virtualinvoke $r47.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $i10 = virtualinvoke $r50.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.String: java.lang.String toLowerCase()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i9 = virtualinvoke $r46.<java.lang.String: int indexOf(java.lang.String)>("password:") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke r81.<java.lang.String: int length()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i7 = virtualinvoke r82.<java.lang.String: int length()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r86.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r87.<com.jcraft.jsch.Buffer: void putByte(byte)>(61) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r38.<com.jcraft.jsch.Buffer: void putInt(int)>(i2) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r40.<com.jcraft.jsch.Buffer: void putString(byte[])>($r39) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r37.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r34.<com.jcraft.jsch.Buffer: void putInt(int)>(i2) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r35) in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r57.<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>("keyboard-interactive") in <com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.SignatureRSA: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>(r4) in <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r1, $r3) in <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])> ==> <java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r0) in <com.jcraft.jsch.jce.SignatureRSA: void setPubKey(byte[],byte[])> ==> <java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>(r4) in <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r1, $r3) in <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])> ==> <java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0) in <com.jcraft.jsch.jce.SignatureRSA: void setPrvKey(byte[],byte[])> ==> <java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.ARCFOUR256: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r9, "RC4") in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>($b4, $r2) in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key)>
VIRTUAL edge: virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r4, 0, 1, r4, 0) in <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.TripleDESCTR: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DESede/CTR/") in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>(r13) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
VIRTUAL edge: r9 = virtualinvoke r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke $r10.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r14) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, r9, $r10) in <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.SignatureDSA: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>(r4) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>(r6) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>(r8) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r1, $r3, $r5, $r7) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r0) in <com.jcraft.jsch.jce.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])> ==> <java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>(r4) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>(r6) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>(r8) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r1, $r3, $r5, $r7) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0) in <com.jcraft.jsch.jce.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])> ==> <java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.ARCFOUR128: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r9, "RC4") in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>($b4, $r2) in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key)>
VIRTUAL edge: virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r4, 0, 1, r4, 0) in <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMACSHA1: void <init>()>() in <com.jcraft.jsch.jce.HMACSHA196: void <init>()> ==> <com.jcraft.jsch.jce.HMACSHA1: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMACSHA1: void doFinal(byte[],int)>($r1, 0) in <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMAC: void <init>()>() in <com.jcraft.jsch.jce.HMACSHA1: void <init>()> ==> <com.jcraft.jsch.jce.HMAC: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r6, $r2) in <com.jcraft.jsch.jce.HMAC: void init(byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r1) in <com.jcraft.jsch.jce.HMAC: void init(byte[])> ==> <javax.crypto.Mac: void init(java.security.Key)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>($r5, 0, 4) in <com.jcraft.jsch.jce.HMAC: void update(int)> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<javax.crypto.Mac: void update(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)> ==> <javax.crypto.Mac: void update(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<javax.crypto.Mac: void doFinal(byte[],int)>(r1, i0) in <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)> ==> <javax.crypto.Mac: void doFinal(byte[],int)>
VIRTUAL edge: virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r3) in <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.DH: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r4) in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: $r11 = virtualinvoke r9.<java.security.KeyPair: java.security.PrivateKey getPrivate()>() in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <java.security.KeyPair: java.security.PrivateKey getPrivate()>
VIRTUAL edge: $r12 = virtualinvoke r9.<java.security.KeyPair: java.security.PublicKey getPublic()>() in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <java.security.KeyPair: java.security.PublicKey getPublic()>
VIRTUAL edge: $r14 = virtualinvoke r9.<java.security.KeyPair: java.security.PublicKey getPublic()>() in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <java.security.KeyPair: java.security.PublicKey getPublic()>
VIRTUAL edge: virtualinvoke $r10.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r11) in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <javax.crypto.KeyAgreement: void init(java.security.Key)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.DH: byte[] getE()> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r4.<javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r6, $r5) in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
VIRTUAL edge: r9 = virtualinvoke r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4) in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
VIRTUAL edge: virtualinvoke $r10.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>(r9, 1) in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>
VIRTUAL edge: r13 = virtualinvoke $r12.<javax.crypto.KeyAgreement: byte[] generateSecret()>() in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <javax.crypto.KeyAgreement: byte[] generateSecret()>
SPECIAL edge: specialinvoke $r14.<java.math.BigInteger: void <init>(byte[])>(r13) in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.DH: byte[] getK()> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.DH: void setP(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jce.DH: void setP(java.math.BigInteger)>($r1) in <com.jcraft.jsch.jce.DH: void setP(byte[])> ==> <com.jcraft.jsch.jce.DH: void setP(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.DH: void setG(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jce.DH: void setG(java.math.BigInteger)>($r1) in <com.jcraft.jsch.jce.DH: void setG(byte[])> ==> <com.jcraft.jsch.jce.DH: void setG(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>(r2) in <com.jcraft.jsch.jce.DH: void setF(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.jce.DH: void setF(java.math.BigInteger)>($r1) in <com.jcraft.jsch.jce.DH: void setF(byte[])> ==> <com.jcraft.jsch.jce.DH: void setF(java.math.BigInteger)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES192CBC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CBC/") in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.ARCFOUR: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, "RC4") in <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>($b3, $r3) in <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.SHA1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>($r2) in <com.jcraft.jsch.jce.SHA1: void init()> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.Random: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.security.SecureRandom: void <init>()>() in <com.jcraft.jsch.jce.Random: void <init>()> ==> <java.security.SecureRandom: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r2) in <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)> ==> <java.security.SecureRandom: void nextBytes(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.security.SecureRandom: void <init>()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.security.SecureRandom: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.security.KeyPair: java.security.PublicKey getPublic()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.security.KeyPair: java.security.PublicKey getPublic()>
VIRTUAL edge: r4 = virtualinvoke r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.security.KeyPair: java.security.PrivateKey getPrivate()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMACMD5: void <init>()>() in <com.jcraft.jsch.jce.HMACMD596: void <init>()> ==> <com.jcraft.jsch.jce.HMACMD5: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMACMD5: void doFinal(byte[],int)>($r1, 0) in <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMAC: void <init>()>() in <com.jcraft.jsch.jce.HMACMD5: void <init>()> ==> <com.jcraft.jsch.jce.HMAC: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.BlowfishCBC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "Blowfish") in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Blowfish/CBC/") in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMAC: void <init>()>() in <com.jcraft.jsch.jce.HMACSHA512: void <init>()> ==> <com.jcraft.jsch.jce.HMAC: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES128CBC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CBC/") in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.jce.HMAC: void <init>()>() in <com.jcraft.jsch.jce.HMACSHA256: void <init>()> ==> <com.jcraft.jsch.jce.HMAC: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.security.SecureRandom: void <init>()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.security.SecureRandom: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.security.KeyPair: java.security.PublicKey getPublic()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.security.KeyPair: java.security.PublicKey getPublic()>
VIRTUAL edge: r4 = virtualinvoke r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.security.KeyPair: java.security.PrivateKey getPrivate()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES192CTR: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CTR/") in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.MD5: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>($r2) in <com.jcraft.jsch.jce.MD5: void init()> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES256CBC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CBC/") in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES128CTR: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CTR/") in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.TripleDESCBC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DESede/CBC/") in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>(r13) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
VIRTUAL edge: r9 = virtualinvoke r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
SPECIAL edge: specialinvoke $r10.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r14) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, r9, $r10) in <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.AES256CTR: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, "AES") in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AES/CTR/") in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoPadding") in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r12) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b5, $r1, $r8) in <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> ==> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
VIRTUAL edge: virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2) in <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)> ==> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i3) in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.net.Socket: java.io.InputStream getInputStream()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.InputStream getInputStream()>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.net.Socket: java.io.OutputStream getOutputStream()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke $r47.<java.net.Socket: void setSoTimeout(int)>(i1) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setSoTimeout(int)>
VIRTUAL edge: virtualinvoke $r8.<java.net.Socket: void setTcpNoDelay(boolean)>(1) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CONNECT ") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" HTTP/1.0\r\n") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
SPECIAL edge: specialinvoke $r35.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r42.<java.io.OutputStream: void write(byte[])>($r43) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r42.<java.io.OutputStream: void write(byte[])>($r43) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke $r44.<java.io.OutputStream: void write(byte[])>(r67) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r44.<java.io.OutputStream: void write(byte[])>(r67) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke $r45.<java.io.OutputStream: void write(byte[])>($r46) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r45.<java.io.OutputStream: void write(byte[])>($r46) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke $r68.<java.io.OutputStream: void write(byte[])>($r69) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r68.<java.io.OutputStream: void write(byte[])>($r69) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r70.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
SPECIAL edge: specialinvoke $r71.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: r20 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: i9 = virtualinvoke $r31.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r31.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: i9 = virtualinvoke $r31.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r32.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r32.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: i9 = virtualinvoke $r32.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedInputStream: int read()>
SPECIAL edge: specialinvoke $r30.<java.io.IOException: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.IOException: void <init>()>
VIRTUAL edge: i9 = virtualinvoke r20.<java.lang.String: int indexOf(int)>(32) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: i11 = virtualinvoke r20.<java.lang.String: int indexOf(int,int)>(32, $i3) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $r21 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>($i4, i11) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r73 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int)>($i5) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("proxy error: ") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r73) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r29) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: i9 = virtualinvoke $r23.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r23.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: i9 = virtualinvoke $r23.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r24.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i9 = virtualinvoke $r24.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: i9 = virtualinvoke $r24.<java.io.InputStream: int read()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.PipedInputStream: int read()>
SPECIAL edge: specialinvoke $r22.<java.io.IOException: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.io.IOException: void <init>()>
VIRTUAL edge: virtualinvoke $r63.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProxyHTTP: ") in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r61.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r57 = virtualinvoke $r61.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r57 = virtualinvoke $r61.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r57 = virtualinvoke $r61.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r78 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r60.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>(r78, $r61) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r59.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r78) in <com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.InputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.net.Socket: void close()>() in <com.jcraft.jsch.ProxyHTTP: void close()> ==> <java.net.Socket: void close()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r10) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r5) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i7) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r4, i6) in <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String,int)>
SPECIAL edge: specialinvoke $r17.<java.net.Socket: void <init>(java.lang.String,int)>(r0, i1) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.net.Socket: void <init>(java.lang.String,int)>
VIRTUAL edge: r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>(r24, $r19) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r24) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.Util$1: void <init>(java.net.Socket[],java.lang.String,int,java.lang.Exception[])>(r1, r0, i1, r2) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.Util$1: void <init>(java.net.Socket[],java.lang.String,int,java.lang.Exception[])>
SPECIAL edge: specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Thread: void setName(java.lang.String)>($r8) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r3.<java.lang.Thread: void start()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Thread: void join(long)>($l2) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void join(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Thread: void interrupt()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opening Socket ") in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r16.<java.net.Socket: boolean isConnected()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.net.Socket: boolean isConnected()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("socket is not established") in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r29 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r29 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: r29 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: r29 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: r29 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r29) in <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("kex", "diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("server_host_key", "ssh-rsa,ssh-dss") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("cipher.s2c", "aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("cipher.c2s", "aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac.s2c", "hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac.c2s", "hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("compression.s2c", "none") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("compression.c2s", "none") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r17.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lang.s2c", "") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lang.c2s", "") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("compression_level", "6") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r23.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("diffie-hellman-group-exchange-sha1", "com.jcraft.jsch.DHGEX") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r25.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("diffie-hellman-group1-sha1", "com.jcraft.jsch.DHG1") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r27.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("diffie-hellman-group14-sha1", "com.jcraft.jsch.DHG14") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r29.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("dh", "com.jcraft.jsch.jce.DH") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r31.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("3des-cbc", "com.jcraft.jsch.jce.TripleDESCBC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r33.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("blowfish-cbc", "com.jcraft.jsch.jce.BlowfishCBC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r35.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-sha1", "com.jcraft.jsch.jce.HMACSHA1") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r37.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-sha1-96", "com.jcraft.jsch.jce.HMACSHA196") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r39.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-sha2-256", "com.jcraft.jsch.jce.HMACSHA256") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r41.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-md5", "com.jcraft.jsch.jce.HMACMD5") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r43.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("hmac-md5-96", "com.jcraft.jsch.jce.HMACMD596") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r45.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha-1", "com.jcraft.jsch.jce.SHA1") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r47.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "com.jcraft.jsch.jce.MD5") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r49.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("signature.dss", "com.jcraft.jsch.jce.SignatureDSA") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r51.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("signature.rsa", "com.jcraft.jsch.jce.SignatureRSA") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r53.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("keypairgen.dsa", "com.jcraft.jsch.jce.KeyPairGenDSA") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r55.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("keypairgen.rsa", "com.jcraft.jsch.jce.KeyPairGenRSA") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r57.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("random", "com.jcraft.jsch.jce.Random") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r59.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("none", "com.jcraft.jsch.CipherNone") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r61.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes128-cbc", "com.jcraft.jsch.jce.AES128CBC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r63.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes192-cbc", "com.jcraft.jsch.jce.AES192CBC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r65.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes256-cbc", "com.jcraft.jsch.jce.AES256CBC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r67.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes128-ctr", "com.jcraft.jsch.jce.AES128CTR") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r69.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes192-ctr", "com.jcraft.jsch.jce.AES192CTR") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r71.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("aes256-ctr", "com.jcraft.jsch.jce.AES256CTR") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r73.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("3des-ctr", "com.jcraft.jsch.jce.TripleDESCTR") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r75.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("arcfour", "com.jcraft.jsch.jce.ARCFOUR") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r77.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("arcfour128", "com.jcraft.jsch.jce.ARCFOUR128") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r79.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("arcfour256", "com.jcraft.jsch.jce.ARCFOUR256") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r81.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("userauth.none", "com.jcraft.jsch.UserAuthNone") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r83.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("userauth.password", "com.jcraft.jsch.UserAuthPassword") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r85.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("userauth.keyboard-interactive", "com.jcraft.jsch.UserAuthKeyboardInteractive") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r87.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("userauth.publickey", "com.jcraft.jsch.UserAuthPublicKey") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r89.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("userauth.gssapi-with-mic", "com.jcraft.jsch.UserAuthGSSAPIWithMIC") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r91.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("gssapi-with-mic.krb5", "com.jcraft.jsch.jgss.GSSContextKrb5") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r93.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("zlib", "com.jcraft.jsch.jcraft.Compression") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r95.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("zlib@openssh.com", "com.jcraft.jsch.jcraft.Compression") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r97.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("StrictHostKeyChecking", "ask") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r99.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("HashKnownHosts", "no") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r101.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("PreferredAuthentications", "gssapi-with-mic,publickey,keyboard-interactive,password") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r103.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("CheckCiphers", "aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r105.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("CheckKexes", "diffie-hellman-group14-sha1") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r107.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MaxAuthTries", "6") in <com.jcraft.jsch.JSch: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r109.<com.jcraft.jsch.JSch$1: void <init>()>() in <com.jcraft.jsch.JSch: void <clinit>()> ==> <com.jcraft.jsch.JSch$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.Channel: void <clinit>()> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("session") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("shell") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("exec") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("x11") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("auth-agent@openssh.com") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("direct-tcpip") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("forwarded-tcpip") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("sftp") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("subsystem") in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.ChannelSession: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSession: void <init>()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.ChannelShell: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelShell: void <init>()>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.ChannelExec: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelExec: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.ChannelX11: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelX11: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelAgentForwarding: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelAgentForwarding: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.ChannelSftp: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.ChannelSubsystem: void <init>()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> ==> <com.jcraft.jsch.ChannelSubsystem: void <init>()>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("x11") in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("x11") in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("auth-agent@openssh.com") in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("auth-agent@openssh.com") in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i6) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i4 = virtualinvoke $r10.<java.lang.Integer: int intValue()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i4) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke r13.<com.jcraft.jsch.PortWatcher: void delete()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.PortWatcher: void delete()>
VIRTUAL edge: virtualinvoke $r5.<java.util.Vector: boolean removeElement(java.lang.Object)>(r14) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Vector: int size()>() in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i4) in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Channel: void disconnect()>() in <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.ChannelSftp: void disconnect()>
SPECIAL edge: specialinvoke $r0.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.ChannelX11: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.ChannelX11: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void <clinit>()> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.PortWatcher: void <clinit>()> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingL: local port ") in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is already registered.") in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r15) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>(r0, r1, i0, r4, i1, r5) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
VIRTUAL edge: virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r3) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.util.Vector: void addElement(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r3) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingL: local port ") in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not registered.") in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r11) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.PortWatcher: void delete()>() in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.PortWatcher: void delete()>
VIRTUAL edge: virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2) in <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r20) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i6) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i5) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4) in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingR: remote port ") in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is already registered.") in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r17) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.Integer: void <init>(int)>
SPECIAL edge: specialinvoke $r9.<java.lang.Integer: void <init>(int)>(i1) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.lang.Integer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>(r6) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> ==> <java.util.Vector: void addElement(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingR: remote port ") in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is already registered.") in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r16) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>(r6) in <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2) in <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1) in <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.SftpATTRS: void <init>()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.SftpATTRS: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $l23 = virtualinvoke r2.<com.jcraft.jsch.Buffer: long getLong()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: long getLong()>
VIRTUAL edge: $i21 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i22 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i20 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i19 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i18 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i13 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $r8 = virtualinvoke r2.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.IdentityFile: void <init>(com.jcraft.jsch.JSch,java.lang.String,com.jcraft.jsch.KeyPair)>(r0, r1, r3) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.IdentityFile: void <init>(com.jcraft.jsch.JSch,java.lang.String,com.jcraft.jsch.KeyPair)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.IdentityFile: void <init>(com.jcraft.jsch.JSch,java.lang.String,com.jcraft.jsch.KeyPair)>(r0, r5, r3) in <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.IdentityFile: void <init>(com.jcraft.jsch.JSch,java.lang.String,com.jcraft.jsch.KeyPair)>
INTERFACE edge: interfaceinvoke r0.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke r0.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.SHA1: void init()>
INTERFACE edge: interfaceinvoke r0.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r0.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r1, 0, $i0) in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: r13 = interfaceinvoke r0.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: r13 = interfaceinvoke r0.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>(r1, l0, i1, r2) in <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
SPECIAL edge: $i2 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.ChannelSftp: int access$1200(com.jcraft.jsch.ChannelSftp,byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>(r1, i0) in <com.jcraft.jsch.ChannelSftp: void access$1100(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: $r3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>(r1, r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>(r1, r2) in <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>(r1, r2) in <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: $i3 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>(r1, l0, r2, i1, i2) in <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2) in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<com.jcraft.jsch.Random: void fill(byte[],int,int)>(r19, 0, 16) in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r19) in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r22) in <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.io.File: long length()>() in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.lang.String)>
VIRTUAL edge: i5 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[],int,int)>(r5, i4, $i3) in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.io.FileInputStream: void close()>() in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.FileInputStream: void close()>() in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.FileInputStream: void close()>() in <com.jcraft.jsch.Util: byte[] fromFile(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: $r1 = virtualinvoke r7.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.CipherNone: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i1 = interfaceinvoke r3.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.CipherNone: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r4, $r5) in <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("PuTTY-User-Key-File-2") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("PuTTY-User-Key-File-2") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Public-Lines") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Public-Lines") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Private-Lines") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Private-Lines") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Encryption") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Encryption") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Comment") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("Comment") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r29.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r37) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void skip(int)>($i8) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: i13 = virtualinvoke $r29.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void getByte(byte[])>($r30) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i9 = virtualinvoke $r29.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r39) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i10 = virtualinvoke $r29.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r40) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
SPECIAL edge: specialinvoke $r31.<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>(r16, r40, r39, null) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r37) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void skip(int)>($i2) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: i14 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>($r12) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i3 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r43) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i4 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r44) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i5 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r13) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: $i6 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r14) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>(r16, r43, r44, r13, r14, null) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.util.Vector: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke r45.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i7 = interfaceinvoke $r26.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
SPECIAL edge: specialinvoke $r33.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("The cipher \'aes256-cbc\' is required, but it is not available.") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("The cipher \'aes256-cbc\' is required, but it is not available.") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r41.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r36) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])>
VIRTUAL edge: virtualinvoke r41.<com.jcraft.jsch.KeyPair: boolean parse(byte[])>(r36) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[])> ==> <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>(7, "invalid key format") in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>(r8, r2, r3, r4, r5, r6) in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[],byte[],byte[])>
SPECIAL edge: specialinvoke $r10.<java.lang.String: void <init>(byte[])>($r11) in <com.jcraft.jsch.KeyPairDSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>(8, "invalid key format") in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>(r6, r2, r3, r4) in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch,byte[],byte[],byte[])>
SPECIAL edge: specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r12) in <com.jcraft.jsch.KeyPairRSA: com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer)> ==> <java.lang.String: void <init>(byte[])>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(int)>(i4) in <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putString(byte[])>($r2) in <com.jcraft.jsch.Buffer: com.jcraft.jsch.Buffer fromBytes(byte[][])> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, i0, i1, r2) in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)> ==> <java.lang.String: void <init>(byte[],int,int,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingL: invalid address ") in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" specified.") in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r17) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $z1 = virtualinvoke $r13.<java.net.InetAddress: boolean equals(java.lang.Object)>($r12) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<java.net.InetAddress: boolean equals(java.lang.Object)>(r1) in <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*") in <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i3) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i2 = virtualinvoke $r15.<java.lang.Integer: int intValue()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: boolean removeElement(java.lang.Object)>(r21) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <java.util.Vector: boolean removeElement(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(80) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r6) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>(i1) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r4) in <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int)>(r1, i11, $i8) in <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r1, i11, $i3) in <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)> ==> <java.lang.String: void <init>(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) in <com.jcraft.jsch.KeyPair: boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Request: void setReply(boolean)>(1) in <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Request: void setReply(boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>(r1) in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $z2 = virtualinvoke $r12.<com.jcraft.jsch.Channel: boolean isConnected()>() in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("channel request: timeout") in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("failed to send channel request") in <com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: r32 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("cipher.c2s") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: r33 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("cipher.s2c") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("CheckCiphers") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: r2 = specialinvoke r0.<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)>($r1) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("kex") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("CheckKexes") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)>($r35) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("server_host_key") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("mac.c2s") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("mac.s2c") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("compression.c2s") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("compression.s2c") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("lang.c2s") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("lang.s2c") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r37) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r29.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("There are not any available ciphers.") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r28.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("There are not any available kexes.") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r36.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putByte(byte)>(20) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void skip(int)>(16) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r10) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r11) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r13) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r15) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r17) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r19) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r21) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putString(byte[])>($r23) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putByte(byte)>(0) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void setOffSet(int)>(5) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void setOffSet(int)>
VIRTUAL edge: $i0 = virtualinvoke $r36.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r36.<com.jcraft.jsch.Buffer: void getByte(byte[])>($r25) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
SPECIAL edge: specialinvoke $r37.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r36) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r37.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.Packet: void reset()>
INTERFACE edge: interfaceinvoke $r39.<com.jcraft.jsch.Random: void fill(byte[],int,int)>($r40, $i4, 16) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
INTERFACE edge: $z1 = interfaceinvoke $r26.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r27.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_KEXINIT sent") in <com.jcraft.jsch.Session: void send_kexinit()> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r22, 0, $i3) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r15) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
STATIC edge: r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r22, 0, $i3) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r22 = newarray (java.lang.String)[$i2] in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>($r15) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r6 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r22, 0, $i3) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $z2 = staticinvoke <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)>(r13, $r15) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)>
STATIC edge: r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r22, 0, $i3) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r22 = newarray (java.lang.String)[$i2] in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)>(r13, $r15) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.Session: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, ",") in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getByte()>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.Session: void send_kexinit()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: void send_kexinit()>
VIRTUAL edge: $r12 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>($r11) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r24.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("Algorithm negotiation fail") in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("NONE Cipher should not be chosen before authentification is successed.") in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke r29.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r27.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r26) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r30.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r1, $r18, $r17, $r16, $r15) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
VIRTUAL edge: virtualinvoke r30.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r1, $r18, $r17, $r16, $r15) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
VIRTUAL edge: virtualinvoke r30.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r1, $r18, $r17, $r16, $r15) in <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("StrictHostKeyChecking") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r0.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("HashKnownHosts") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r3.<com.jcraft.jsch.KeyExchange: byte[] getHostKey()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KeyExchange: byte[] getHostKey()>
VIRTUAL edge: r5 = virtualinvoke r3.<com.jcraft.jsch.KeyExchange: java.lang.String getKeyType()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.DHG14: java.lang.String getKeyType()>
VIRTUAL edge: r5 = virtualinvoke r3.<com.jcraft.jsch.KeyExchange: java.lang.String getKeyType()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.DHGEX: java.lang.String getKeyType()>
VIRTUAL edge: r5 = virtualinvoke r3.<com.jcraft.jsch.KeyExchange: java.lang.String getKeyType()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.DHG1: java.lang.String getKeyType()>
VIRTUAL edge: r6 = virtualinvoke r3.<com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()>
SPECIAL edge: specialinvoke $r106.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r117) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]:") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: r117 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r8 = virtualinvoke $r118.<com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()>
VIRTUAL edge: $z9 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("yes") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r105 = virtualinvoke $r104.<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])>(r117, r4) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.HostKey: void <init>(java.lang.String,byte[])>(r117, r4) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,byte[])>
INTERFACE edge: i1 = interfaceinvoke r8.<com.jcraft.jsch.HostKeyRepository: int check(java.lang.String,byte[])>(r117, r4) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])>
INTERFACE edge: r123 = interfaceinvoke r8.<com.jcraft.jsch.HostKeyRepository: java.lang.String getKnownHostsRepositoryID()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KnownHosts: java.lang.String getKnownHostsRepositoryID()>
INTERFACE edge: interfaceinvoke r8.<com.jcraft.jsch.HostKeyRepository: void remove(java.lang.String,java.lang.String,byte[])>($r78, $r127, null) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])>
INTERFACE edge: interfaceinvoke r8.<com.jcraft.jsch.HostKeyRepository: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)>($r13, $r12) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ask") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yes") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ask") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ask") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yes") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yes") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("no") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r85.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that the ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" host key has just been changed.\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The fingerprint for the ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key sent by the remote host is\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Please contact your system administrator.\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Add correct host key in ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r123) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to get rid of this message.") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r125 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r99.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r101 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r125) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r102 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nDo you want to delete the old key and insert the new key?") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r81.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HostKey has been changed: ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r117) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r80.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r84) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("DSA") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r70.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reject HostKey: ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r73 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r69.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r74) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r51.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The authenticity of host \'") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' can\'t be established.\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key fingerprint is ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Are you sure you want to continue connecting?") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r64.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reject HostKey: ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r63.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r68) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r42.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("UnknownHostKey: ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key fingerprint is ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r41.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r50) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r36.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HostKey has been changed: ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r35.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r40) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r24.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host \'") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is known and mathces the ") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" host key") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r25.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r33) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r14.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(2) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Permanently added \'") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") to the list of known hosts.") in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(2, $r23) in <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Buffer: void putByte(byte)>(21) in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r3) in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
INTERFACE edge: interfaceinvoke $r5.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, "SSH_MSG_NEWKEYS sent") in <com.jcraft.jsch.Session: void send_newkeys()> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)>(r1) in <com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r121, 0, $i48) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r138 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r84) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r135, 0, r136, $i39, $i38) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r106, 0, r136, 0, $i37) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r134 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r73) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r132 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r58) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r129, 0, r130, $i46, $i45) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r118, 0, r130, 0, $i44) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r126 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r49) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r121, 0, $i48) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r106, 0, r136, 0, $i37) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r118, 0, r130, 0, $i44) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r3) in <com.jcraft.jsch.JSch: void addSession(com.jcraft.jsch.Session)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.PipedOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <com.jcraft.jsch.IO: int getByte()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <com.jcraft.jsch.IO: int getByte()> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <com.jcraft.jsch.IO: int getByte()> ==> <java.io.PipedInputStream: int read()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8) in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10) in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",") in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r2) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void setOffSet(int)>(17) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void setOffSet(int)>
VIRTUAL edge: $r48 = virtualinvoke $r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void setOffSet(int)>(17) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void setOffSet(int)>
VIRTUAL edge: r33 = virtualinvoke $r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r5) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void setOffSet(int)>(17) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void setOffSet(int)>
VIRTUAL edge: $r41 = virtualinvoke $r4.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void setOffSet(int)>(17) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void setOffSet(int)>
VIRTUAL edge: r34 = virtualinvoke $r4.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r46.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("kex: server: ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r45.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r51) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r39.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("kex: client: ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r38.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r44) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>($r37) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("kex: server->client ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r20) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("kex: client->server ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r21.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r32) in <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void setSession(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)> ==> <com.jcraft.jsch.Channel: void setSession(com.jcraft.jsch.Session)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.jcraft.jsch.ChannelShell: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelShell: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.jcraft.jsch.ChannelShell: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelShell: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r3) in <com.jcraft.jsch.ChannelShell: void init()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r6) in <com.jcraft.jsch.ChannelShell: void init()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.jcraft.jsch.ChannelSubsystem: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSubsystem: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.jcraft.jsch.ChannelSubsystem: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSubsystem: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r3) in <com.jcraft.jsch.ChannelSubsystem: void init()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r6) in <com.jcraft.jsch.ChannelSubsystem: void init()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.jcraft.jsch.ChannelExec: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelExec: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.jcraft.jsch.ChannelExec: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelExec: void init()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>($r3) in <com.jcraft.jsch.ChannelExec: void init()> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>($r6) in <com.jcraft.jsch.ChannelExec: void init()> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.IO: void <init>()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void init()> ==> <com.jcraft.jsch.IO: void <init>()>
INTERFACE edge: interfaceinvoke $r16.<com.jcraft.jsch.Random: void fill(byte[],int,int)>($r15, $i12, i14) in <com.jcraft.jsch.Packet: void padding(int)> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void skip(int)>(i14) in <com.jcraft.jsch.Packet: void padding(int)> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: i4 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: int getShort()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.Buffer: int getShort()> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, i2) in <com.jcraft.jsch.IO: void getByte(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, i2) in <com.jcraft.jsch.IO: void getByte(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, i2) in <com.jcraft.jsch.IO: void getByte(byte[],int,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, i2) in <com.jcraft.jsch.IO: void getByte(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("End of IO Stream Read") in <com.jcraft.jsch.IO: void getByte(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES128CBC: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.BlowfishCBC: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES256CTR: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.ARCFOUR: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES128CTR: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES192CTR: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES256CBC: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.TripleDESCBC: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.CipherNone: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.TripleDESCTR: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.AES192CBC: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.ARCFOUR256: boolean isCBC()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.jcraft.jsch.Cipher: boolean isCBC()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.ARCFOUR128: boolean isCBC()>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("Packet corrupt") in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.IO: void getByte(byte[],int,int)>($r6, 0, $i6) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r8, 0, $i6) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void update(byte[],int,int)>($r8, 0, $i6) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r12.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r3, 0) in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("Packet corrupt") in <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("zlib") in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("zlib@openssh.com") in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>("compression_level") in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r16.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r7.<com.jcraft.jsch.Compression: void init(int,int)>(1, i0) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.jcraft.Compression: void init(int,int)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.NoClassDefFoundError: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r8) in <com.jcraft.jsch.Session: void initDeflater(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("none") in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("zlib") in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("zlib@openssh.com") in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r0) in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r10.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Compression: void init(int,int)>(0, 0) in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <com.jcraft.jsch.jcraft.Compression: void init(int,int)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r7) in <com.jcraft.jsch.Session: void initInflater(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: void notifyAll()>() in <com.jcraft.jsch.Channel: void addRemoteWindowSize(int)> ==> <java.lang.Object: void notifyAll()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)>(r3) in <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)>(r3) in <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)> ==> <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: byte[] getString(int[],int[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte(int)>(i0) in <com.jcraft.jsch.Buffer: byte[] getString(int[],int[])> ==> <com.jcraft.jsch.Buffer: int getByte(int)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void put(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.Channel: void write(byte[],int,int)> ==> <com.jcraft.jsch.IO: void put(byte[],int,int)>
VIRTUAL edge: r17 = virtualinvoke r0.<com.jcraft.jsch.ChannelX11: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: r19 = specialinvoke r0.<com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)>(r16, i30, i31) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void eof()>() in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void disconnect()>() in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: void disconnect()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<com.jcraft.jsch.JSchException: java.lang.String toString()>() in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r15) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r17) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r17) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.IO: void close()>() in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.IO: void close()>
VIRTUAL edge: virtualinvoke $r21.<com.jcraft.jsch.IO: void put(byte[],int,int)>(r19, 0, i32) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.IO: void put(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.IO: void put(byte[],int,int)>(r16, i30, i31) in <com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> ==> <com.jcraft.jsch.IO: void put(byte[],int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i3, r2, $i4, i0) in <com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, 0, $i6) in <com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i3, r2, $i4, i0) in <com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r62.<com.jcraft.jsch.Buffer: void <init>(int)>($i17) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
SPECIAL edge: specialinvoke $r63.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r64) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Buffer: void shift()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void shift()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>(r6, i4, i0) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
VIRTUAL edge: i18 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i5 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: i6 = virtualinvoke $r10.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: r73 = virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])>(r91) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])>
VIRTUAL edge: $r71 = virtualinvoke $r69.<com.jcraft.jsch.JSchException: java.lang.String toString()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.Throwable: java.lang.String toString()>
SPECIAL edge: specialinvoke $r70.<java.io.IOException: void <init>(java.lang.String)>($r71) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: r75 = virtualinvoke r73.<com.jcraft.jsch.Session: com.jcraft.jsch.IdentityRepository getIdentityRepository()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.IdentityRepository getIdentityRepository()>
VIRTUAL edge: r11 = virtualinvoke r73.<com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>
VIRTUAL edge: virtualinvoke $r12.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r44.<com.jcraft.jsch.Buffer: void putByte(byte)>(12) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
INTERFACE edge: r76 = interfaceinvoke r75.<com.jcraft.jsch.IdentityRepository: java.util.Vector getIdentities()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()>
INTERFACE edge: r84 = interfaceinvoke r75.<com.jcraft.jsch.IdentityRepository: java.util.Vector getIdentities()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.LocalIdentityRepository: java.util.Vector getIdentities()>
INTERFACE edge: interfaceinvoke r75.<com.jcraft.jsch.IdentityRepository: boolean remove(byte[])>(r88) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.LocalIdentityRepository: boolean remove(byte[])>
INTERFACE edge: interfaceinvoke r75.<com.jcraft.jsch.IdentityRepository: void removeAll()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.LocalIdentityRepository: void removeAll()>
INTERFACE edge: z6 = interfaceinvoke r75.<com.jcraft.jsch.IdentityRepository: boolean add(byte[])>(r89) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.LocalIdentityRepository: boolean add(byte[])>
VIRTUAL edge: $i10 = virtualinvoke r76.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r52 = virtualinvoke r76.<java.util.Vector: java.lang.Object elementAt(int)>(i20) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i11 = virtualinvoke r76.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r47 = virtualinvoke r76.<java.util.Vector: java.lang.Object elementAt(int)>(i21) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: $r54 = interfaceinvoke r78.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
VIRTUAL edge: virtualinvoke $r46.<com.jcraft.jsch.Buffer: void putInt(int)>(i19) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
INTERFACE edge: r80 = interfaceinvoke r79.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
VIRTUAL edge: virtualinvoke $r49.<com.jcraft.jsch.Buffer: void putString(byte[])>(r80) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r51.<com.jcraft.jsch.Buffer: void putString(byte[])>($r50) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r42.<com.jcraft.jsch.Buffer: void putByte(byte)>(2) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r43.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: r82 = virtualinvoke $r23.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: r83 = virtualinvoke $r24.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i9 = virtualinvoke r84.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r30 = virtualinvoke r84.<java.util.Vector: java.lang.Object elementAt(int)>(i22) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
INTERFACE edge: $r33 = interfaceinvoke r32.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: $r34 = interfaceinvoke r32.<com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()>
INTERFACE edge: $z1 = interfaceinvoke r32.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: $z2 = interfaceinvoke r32.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
INTERFACE edge: $r37 = interfaceinvoke r32.<com.jcraft.jsch.Identity: java.lang.String getName()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: java.lang.String getName()>
INTERFACE edge: $z4 = interfaceinvoke r32.<com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>(r41) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])>
INTERFACE edge: $z5 = interfaceinvoke r32.<com.jcraft.jsch.Identity: boolean isEncrypted()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: boolean isEncrypted()>
SPECIAL edge: specialinvoke $r35.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Passphrase for ") in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: r87 = interfaceinvoke r85.<com.jcraft.jsch.Identity: byte[] getSignature(byte[])>(r83) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])>
VIRTUAL edge: virtualinvoke $r29.<com.jcraft.jsch.Buffer: void putByte(byte)>(30) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r27.<com.jcraft.jsch.Buffer: void putByte(byte)>(14) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r28.<com.jcraft.jsch.Buffer: void putString(byte[])>(r87) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: r88 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r22.<com.jcraft.jsch.Buffer: void putByte(byte)>(6) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r20.<com.jcraft.jsch.Buffer: void putByte(byte)>(6) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Buffer: void putByte(byte)>(6) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: i23 = virtualinvoke $r16.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r89) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Buffer: void putByte(byte)>($b24) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: $i7 = virtualinvoke $r13.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.Buffer: void skip(int)>($i8) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void putByte(byte)>(5) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: $i25 = virtualinvoke $r90.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke $r92.<com.jcraft.jsch.Buffer: void getByte(byte[])>(r91) in <com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.IO: void put_ext(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.Channel: void write_ext(byte[],int,int)> ==> <com.jcraft.jsch.IO: void put_ext(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.IO: void out_close()>() in <com.jcraft.jsch.Channel: void eof_remote()> ==> <com.jcraft.jsch.IO: void out_close()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void eof_remote()>() in <com.jcraft.jsch.ChannelAgentForwarding: void eof_remote()> ==> <com.jcraft.jsch.Channel: void eof_remote()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void eof()>() in <com.jcraft.jsch.ChannelAgentForwarding: void eof_remote()> ==> <com.jcraft.jsch.Channel: void eof()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: void notifyAll()>() in <com.jcraft.jsch.Channel: void setRecipient(int)> ==> <java.lang.Object: void notifyAll()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $l1 = virtualinvoke r1.<com.jcraft.jsch.Buffer: long getUInt()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: long getUInt()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: i3 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setRecipient(int)>($i0) in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRecipient(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setRemoteWindowSize(long)>($l1) in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setRemotePacketSize(int)>($i2) in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRemotePacketSize(int)>
VIRTUAL edge: r23 = virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: $i9 = virtualinvoke $r26.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i8) in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: $i5 = virtualinvoke $r11.<java.lang.Integer: int intValue()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i7 = virtualinvoke $r19.<java.lang.Integer: int intValue()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $l1 = virtualinvoke r1.<com.jcraft.jsch.Buffer: long getUInt()>() in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: long getUInt()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void setRecipient(int)>($i0) in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRecipient(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>($l1) in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Channel: void setRemotePacketSize(int)>($i2) in <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Channel: void setRemotePacketSize(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.util.Vector: boolean remove(java.lang.Object)>(r3) in <com.jcraft.jsch.JSch: boolean removeSession(com.jcraft.jsch.Session)> ==> <java.util.Vector: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(80) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r11) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putByte(byte)>(1) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putString(byte[])>($r12) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>(i0) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r3) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>($r10) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r5) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>(null) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>
VIRTUAL edge: $r30 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r30 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r30 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r30 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r25) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r27.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r28) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke $r13.<com.jcraft.jsch.Session$GlobalRequestReply: int getReply()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: int getReply()>
VIRTUAL edge: i2 = virtualinvoke $r20.<com.jcraft.jsch.Session$GlobalRequestReply: int getReply()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: int getReply()>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>(null) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("remote port forwarding failed for listen port ") in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r19) in <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()>
VIRTUAL edge: $i11 = virtualinvoke r0.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: void wait(long)>($l12) in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <java.lang.Object: void wait(long)>
VIRTUAL edge: $i4 = virtualinvoke r0.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.jcraft.jsch.Session: boolean isConnected()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Session: boolean isConnected()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>(r2) in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $z3 = virtualinvoke r1.<com.jcraft.jsch.Session: boolean isConnected()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Session: boolean isConnected()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.jcraft.jsch.Session: boolean isConnected()>() in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.Session: boolean isConnected()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is down") in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("session is down") in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("channel is not opened.") in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("channel is not opened.") in <com.jcraft.jsch.Channel: void sendChannelOpen()> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
CLINIT edge: $r2 = new com.jcraft.jsch.Packet in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r8) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Util: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>(r1) in <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)> ==> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>(r1) in <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)> ==> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream)>(r1) in <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)> ==> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<java.io.PipedInputStream: void <init>()>() in <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)> ==> <java.io.PipedInputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>(r2) in <com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)> ==> <java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <com.jcraft.jsch.Channel$1: void <init>(com.jcraft.jsch.Channel,com.jcraft.jsch.Channel)> ==> <java.io.OutputStream: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putByte(byte)>(97) in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r1) in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Channel: void close()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestSignal: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <com.jcraft.jsch.Channel$1: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <java.io.PipedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.jcraft.jsch.IO: void out_close()> ==> <com.jcraft.jsch.ChannelSftp$1: void close()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(91) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r4.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Channel: void sendOpenConfirmation()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putByte(byte)>(96) in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r1) in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r2) in <com.jcraft.jsch.Channel: void eof()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.Session: int getTimeout()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Session: int getTimeout()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>(r6) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>(r6) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("timeout in wating for rekeying process.") in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.lang.Object: void wait(long)>(100L) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <java.lang.Object: void wait(long)>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.jcraft.jsch.Channel: boolean isConnected()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Channel: boolean isConnected()>
VIRTUAL edge: i39 = virtualinvoke r1.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("channel is broken") in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i43 = interfaceinvoke $r9.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
VIRTUAL edge: i37 = virtualinvoke r6.<com.jcraft.jsch.Packet: int shift(int,int,int)>($i41, $i42, $i43) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Packet: int shift(int,int,int)>
VIRTUAL edge: virtualinvoke r6.<com.jcraft.jsch.Packet: void unshift(byte,int,int,int)>(b38, i39, i37, i33) in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)>
VIRTUAL edge: b38 = virtualinvoke $r26.<com.jcraft.jsch.Buffer: byte getCommand()>() in <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> ==> <com.jcraft.jsch.Buffer: byte getCommand()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r13, 0, $i25) in <com.jcraft.jsch.Packet: int shift(int,int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i17, $r7, i30, $i16) in <com.jcraft.jsch.Packet: int shift(int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r13, 0, $i25) in <com.jcraft.jsch.Packet: int shift(int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i17, $r7, i30, $i16) in <com.jcraft.jsch.Packet: int shift(int,int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, 14, i1) in <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, 14, i1) in <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$RequestQueue$Request: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue)>(r0) in <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue$Request: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void <init>()>() in <com.jcraft.jsch.ChannelSession: void <init>()> ==> <com.jcraft.jsch.Channel: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.IO: void <init>()>() in <com.jcraft.jsch.ChannelSession: void <init>()> ==> <com.jcraft.jsch.IO: void <init>()>
CLINIT edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("foo") in <com.jcraft.jsch.Channel: void <init>()> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>("foo") in <com.jcraft.jsch.Channel: void <init>()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r2 = <com.jcraft.jsch.Channel: java.util.Vector pool> in <com.jcraft.jsch.Channel: void <init>()> ==> <com.jcraft.jsch.Channel: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>(r2) in <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)> ==> <java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestSftp: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.RequestSftp: void setReply(boolean)>(1) in <com.jcraft.jsch.RequestSftp: void <init>()> ==> <com.jcraft.jsch.Request: void setReply(boolean)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendINIT()> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(1, 5) in <com.jcraft.jsch.ChannelSftp: void sendINIT()> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendINIT()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Buffer: void putInt(int)>(3) in <com.jcraft.jsch.ChannelSftp: void sendINIT()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r4, r0, 9) in <com.jcraft.jsch.ChannelSftp: void sendINIT()> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getByte()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.Buffer: int getByte()>
VIRTUAL edge: $i5 = virtualinvoke r0.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r2, 0, 9) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void skip(int)>(i0) in <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Buffer: void skip(int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r2, 0, i0) in <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>($r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>() in <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)> ==> <java.io.File: boolean isAbsolute()>
VIRTUAL edge: $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: r2 = specialinvoke r1.<com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: r2 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r10 = virtualinvoke r2.<java.util.Vector: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(0) in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not unique: ") in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r12) in <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendREALPATH(byte[])>($r3) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendREALPATH(byte[])>
SPECIAL edge: r15 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r5, $r4) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r6, i0) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r12, i3) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i3 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i4 = virtualinvoke $r7.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r16 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>(r1) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>
SPECIAL edge: r14 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r3, $r2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r4, i0) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r8, i2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
VIRTUAL edge: i2 = virtualinvoke $r7.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r9) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r52) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r47) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r66) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(47) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: r53 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i11) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: z0 = specialinvoke r5.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>(r3, r4) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>($r7) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>
SPECIAL edge: r57 = specialinvoke r5.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r9, $r8) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r10, i12) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r41, i14) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>(r12) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>
SPECIAL edge: r57 = specialinvoke r5.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r59, r57) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r38, i15) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r5.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r15, 0, 4) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: $z3 = specialinvoke r5.<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>(r12, r57) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
VIRTUAL edge: $z4 = virtualinvoke r54.<java.lang.String: boolean equals(java.lang.Object)>("/") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r54.<java.lang.String: boolean endsWith(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r48.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r54 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r43.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r5) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r42.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i14 = virtualinvoke $r40.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r12 = virtualinvoke $r11.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r39.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: i18 = virtualinvoke $r16.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r26.<com.jcraft.jsch.Buffer: void shift()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: void shift()>
VIRTUAL edge: i21 = virtualinvoke $r36.<java.io.InputStream: int read(byte[],int,int)>($r35, $i8, $i19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i21 = virtualinvoke $r36.<java.io.InputStream: int read(byte[],int,int)>($r35, $i8, $i19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i21 = virtualinvoke $r36.<java.io.InputStream: int read(byte[],int,int)>($r35, $i8, $i19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i21 = virtualinvoke $r36.<java.io.InputStream: int read(byte[],int,int)>($r35, $i8, $i19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: r60 = virtualinvoke $r18.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r25.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/") in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r58 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r63.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r58) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r62) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>(r1, $r2) in <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>($r3) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>
SPECIAL edge: r11 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r5, $r4) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r6, i0) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
VIRTUAL edge: $z0 = virtualinvoke r8.<com.jcraft.jsch.SftpATTRS: boolean isDir()>() in <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> ==> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
SPECIAL edge: specialinvoke $r0.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r25) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r26) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r19) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: r28 = virtualinvoke $r5.<java.io.File: java.lang.String[] list()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.io.File: java.lang.String[] list()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17) in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: $r4 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>($r3) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>(r1, 26) in <com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>(r1, 10) in <com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
VIRTUAL edge: $i2 = virtualinvoke r2.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(i1, $r5) in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(i1, "Failure") in <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: r8 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r1, r7) in <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r3, i0) in <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r5, i2) in <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke $r4.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>($r6, 6, $i11) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>
VIRTUAL edge: $r15 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void putInt(int)>($i12) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.Buffer: void putString(byte[])>(r5) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putLong(long)>(l14) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putLong(long)>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: void putString(byte[],int,int)>(r11, i19, i27) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void putInt(int)>(i27) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.Buffer: void skip(int)>(i27) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r16, r0, $i18) in <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendCLOSE(byte[])>(r1) in <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: void sendCLOSE(byte[])>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>(null, r2) in <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)> ==> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)> ==> <java.io.OutputStream: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>($r7) in <com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>(r3) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>
SPECIAL edge: r49 = specialinvoke r1.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r5, $r4) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r6, i28) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r39, i30) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>(r50, l33, i34, $r37) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
SPECIAL edge: r49 = specialinvoke r1.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r11, r49) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void skip(long)>($l27) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void skip(long)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r34, i36) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r36, i38) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>($r15, 0, 4) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void skip(long)>($l22) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void skip(long)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void skip(long)>($l23) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void skip(long)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void skip(long)>($l18) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void skip(long)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>(r50, $l15, $i14, $r20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
SPECIAL edge: specialinvoke r1.<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>(r50, r49) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r1) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r40.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i30 = virtualinvoke $r38.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: r50 = virtualinvoke $r7.<com.jcraft.jsch.Buffer: byte[] getString()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: byte[] getString()>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
VIRTUAL edge: $i35 = virtualinvoke $r51.<com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>
VIRTUAL edge: r52 = virtualinvoke $r12.<com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>($i3) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>
VIRTUAL edge: virtualinvoke $r47.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>(r49, $r46) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
VIRTUAL edge: i38 = virtualinvoke $r35.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.Buffer: void rewind()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: void rewind()>
VIRTUAL edge: i40 = virtualinvoke $r16.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: i20 = virtualinvoke $r25.<java.io.InputStream: int read(byte[],int,int)>($r24, 0, i42) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i20 = virtualinvoke $r25.<java.io.InputStream: int read(byte[],int,int)>($r24, 0, i42) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i20 = virtualinvoke $r25.<java.io.InputStream: int read(byte[],int,int)>($r24, 0, i42) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i20 = virtualinvoke $r25.<java.io.InputStream: int read(byte[],int,int)>($r24, 0, i42) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void write(byte[],int,int)>($r28, 0, i20) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.PipedOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r26.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>(r49, $r18) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
VIRTUAL edge: $i8 = virtualinvoke $r17.<com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>() in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
VIRTUAL edge: virtualinvoke $r31.<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>(r49, $r30) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r43.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r41) in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r42.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>(r1, 1) in <com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>($r7) in <com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ChannelSftp$3: void <init>(com.jcraft.jsch.ChannelSftp,java.util.Vector)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $z0 = specialinvoke r3.<com.jcraft.jsch.ChannelSftp: boolean isPattern(byte[])>(r1) in <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])> ==> <com.jcraft.jsch.ChannelSftp: boolean isPattern(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(11, r1) in <com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(12, r1) in <com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
VIRTUAL edge: i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, i3) in <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, i3) in <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, i3) in <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, i3) in <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("inputstream is closed") in <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$LsEntry: void setFilename(java.lang.String)>(r2) in <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp$LsEntry: void setFilename(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$LsEntry: void setLongname(java.lang.String)>(r3) in <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp$LsEntry: void setLongname(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$LsEntry: void setAttrs(com.jcraft.jsch.SftpATTRS)>(r4) in <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp$LsEntry: void setAttrs(com.jcraft.jsch.SftpATTRS)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(19, r1) in <com.jcraft.jsch.ChannelSftp: void sendREADLINK(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>(20, r1, r2) in <com.jcraft.jsch.ChannelSftp: void sendSYMLINK(byte[],byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>(18, r1, r2) in <com.jcraft.jsch.ChannelSftp: void sendRENAME(byte[],byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(13, r1) in <com.jcraft.jsch.ChannelSftp: void sendREMOVE(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)>($r3, r4) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)>
SPECIAL edge: r16 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r6, $r5) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r7, i0) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r9, i2) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke $r8.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r11) in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(15, r1) in <com.jcraft.jsch.ChannelSftp: void sendRMDIR(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i10 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: int length()>() in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: int length()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>($r10) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $i11 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: int length()>() in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: int length()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(14, $i2) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i8) in <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
CLINIT edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r4) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r7) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r5 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r4) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendLSTAT(byte[])>($r3) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void sendLSTAT(byte[])>
SPECIAL edge: r16 = specialinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>($r5, $r4) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>($r6, i0) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>($r10, i2) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>(r0) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
VIRTUAL edge: i2 = virtualinvoke $r9.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, "", $r11) in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, "") in <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()>() in <com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()> ==> <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>(r1, r2, i0) in <com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)> ==> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(92) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>(i1) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r4) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i0 = virtualinvoke r3.<com.jcraft.jsch.Channel: int getRecipient()>() in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Channel: int getRecipient()>
VIRTUAL edge: $r6 = virtualinvoke r3.<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>($r1) in <com.jcraft.jsch.Channel: void sendOpenFailure(int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.Buffer: void <init>(int)>($i0) in <com.jcraft.jsch.Channel$1: void init()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r4) in <com.jcraft.jsch.Channel$1: void init()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("failed to initialize the channel.") in <com.jcraft.jsch.Channel$1: void init()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
SPECIAL edge: $r9 = specialinvoke r0.<com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)>(r4) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)>
SPECIAL edge: $r10 = specialinvoke r0.<com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)>(r6) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<com.jcraft.jsch.RequestAgentForwarding: void <init>()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestAgentForwarding: void <init>()>
VIRTUAL edge: virtualinvoke $r19.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.RequestX11: void <init>()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestX11: void <init>()>
VIRTUAL edge: virtualinvoke $r18.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
SPECIAL edge: specialinvoke $r11.<com.jcraft.jsch.RequestPtyReq: void <init>()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestPtyReq: void <init>()>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke $r13.<com.jcraft.jsch.RequestPtyReq: void setTType(java.lang.String)>($r12) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestPtyReq: void setTType(java.lang.String)>
VIRTUAL edge: virtualinvoke $r14.<com.jcraft.jsch.RequestPtyReq: void setTSize(int,int,int,int)>($i3, $i2, $i1, $i0) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestPtyReq: void setTSize(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.RequestPtyReq: void setTerminalMode(byte[])>($r16) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestPtyReq: void setTerminalMode(byte[])>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <java.util.Hashtable: java.util.Enumeration keys()>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <java.util.Properties: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.RequestEnv: void <init>()>() in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestEnv: void <init>()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>(r1, r0) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.RequestEnv: void setEnv(byte[],byte[])>($r9, $r10) in <com.jcraft.jsch.ChannelSession: void sendRequests()> ==> <com.jcraft.jsch.RequestEnv: void setEnv(byte[],byte[])>
CLINIT edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r3) in <com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r3) in <com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestExec: void <init>(byte[])> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestShell: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestX11: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestPtyReq: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.Hashtable: void <init>()>() in <com.jcraft.jsch.ChannelSession: java.util.Hashtable getEnv()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestWindowChange: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.LocalIdentityRepository: void <init>(com.jcraft.jsch.JSch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.LocalIdentityRepository: void <init>(com.jcraft.jsch.JSch)> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session,com.jcraft.jsch.Session$1)>(r0, null) in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session,com.jcraft.jsch.Session$1)>
SPECIAL edge: specialinvoke $r7.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r9) in <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)> ==> <java.util.Vector: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.io.FileInputStream: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>($r2) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r1.<java.util.Vector: void removeAllElements()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.util.Vector: void removeAllElements()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(0) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(0) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r26 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(0) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: r27 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: i16 = virtualinvoke r4.<java.io.InputStream: int read()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke r4.<java.io.InputStream: int read()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.ChannelSftp$2: int read()>
VIRTUAL edge: i16 = virtualinvoke r4.<java.io.InputStream: int read()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.io.PipedInputStream: int read()>
VIRTUAL edge: virtualinvoke r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.ChannelSftp$2: void close()>
VIRTUAL edge: virtualinvoke r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.io.PipedInputStream: void close()>
VIRTUAL edge: virtualinvoke r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.Channel$PassiveInputStream: void close()>
VIRTUAL edge: virtualinvoke r4.<java.io.InputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.io.InputStream: void close()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>($r15) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>($r14) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>($r6) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>($r13) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>($r12) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke r5.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z3 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss") in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("ssh-rsa") in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i7 = virtualinvoke r27.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i8 = virtualinvoke r27.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r8.<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>(r0, r5, b20, $r10) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>
VIRTUAL edge: virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r8) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r17) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r19) in <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
CLINIT edge: $r0 = new com.jcraft.jsch.HostKey in <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)> ==> <com.jcraft.jsch.HostKey: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r11) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>($r15, 0, $i8) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r12) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>($r13, 0, $i7) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r11) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)>(r1) in <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)>
SPECIAL edge: $z2 = specialinvoke r0.<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>(r5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void init(byte[])>($r4) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void init(byte[])>($r4) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void update(byte[],int,int)>(r6, 0, $i0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void update(byte[],int,int)>(r6, 0, $i0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>(r7, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)>
VIRTUAL edge: virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.Object)>($r9) in <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)> ==> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("hmac-sha1") in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("hmac-sha1") in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r9 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>(r0) in <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.io.FileOutputStream: void close()>() in <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)>($r1) in <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)> ==> <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)>
CLINIT edge: $r17 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
STATIC edge: $r15 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r14) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r8) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
CLINIT edge: $r20 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r11 = <com.jcraft.jsch.KnownHosts: byte[] space> in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>(r7) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: $r18 = <com.jcraft.jsch.KnownHosts: byte[] cr> in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: i1 = virtualinvoke r1.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: i5 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i7) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, i5) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i7) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(r0) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i8) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8) in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>($r2) in <com.jcraft.jsch.KnownHosts: void sync()> ==> <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void <init>()>() in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void setLocalWindowSizeMax(int)>(131072) in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSizeMax(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void setLocalWindowSize(int)>(131072) in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelDirectTCPIP: void setLocalPacketSize(int)>(16384) in <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalPacketSize(int)>
VIRTUAL edge: virtualinvoke $r2.<java.net.ServerSocket: void close()>() in <com.jcraft.jsch.PortWatcher: void delete()> ==> <java.net.ServerSocket: void close()>
VIRTUAL edge: l9 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$RequestQueue: long getOffset()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: long getOffset()>
SPECIAL edge: specialinvoke $r14.<com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue,long)>(r0, l9) in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue,long)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RequestQueue: unknown request id ") in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7) in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>(4, $r13) in <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)> ==> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void skip(long)>(l0) in <com.jcraft.jsch.ChannelSftp: void access$600(com.jcraft.jsch.ChannelSftp,long)> ==> <com.jcraft.jsch.ChannelSftp: void skip(long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Request: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: void init(int)>(i0) in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: void init(int)>
INTERFACE edge: $r4 = interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: byte[] getP()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: byte[] getP()>
INTERFACE edge: $r5 = interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: byte[] getQ()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: byte[] getQ()>
INTERFACE edge: $r6 = interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: byte[] getG()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: byte[] getG()>
INTERFACE edge: $r7 = interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: byte[] getY()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: byte[] getY()>
INTERFACE edge: $r8 = interfaceinvoke r15.<com.jcraft.jsch.KeyPairGenDSA: byte[] getX()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenDSA: byte[] getX()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r9) in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r10.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r11) in <com.jcraft.jsch.KeyPairDSA: void generate(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r17.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: void init(int)>(i0) in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: void init(int)>
INTERFACE edge: $r4 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getE()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getE()>
INTERFACE edge: $r5 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getD()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getD()>
INTERFACE edge: $r6 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getN()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getN()>
INTERFACE edge: $r7 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getP()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getP()>
INTERFACE edge: $r8 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getQ()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getQ()>
INTERFACE edge: $r9 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getEP()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getEP()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getEQ()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getEQ()>
INTERFACE edge: $r11 = interfaceinvoke r18.<com.jcraft.jsch.KeyPairGenRSA: byte[] getC()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.jce.KeyPairGenRSA: byte[] getC()>
VIRTUAL edge: $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r12) in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r13.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>($r14) in <com.jcraft.jsch.KeyPairRSA: void generate(int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>(1) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i5 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>($i3) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i11 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>($i9) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i17 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>($i15) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i23 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>($i21) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i29 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>($i27) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i33 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int countLength(int)>(i32) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: i37 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeSEQUENCE(byte[],int,int)>(r11, 0, i32) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeSEQUENCE(byte[],int,int)>
VIRTUAL edge: i38 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i37, $r12) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i39 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i38, $r13) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i40 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i39, $r14) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i41 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i40, $r15) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i42 = virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i41, $r16) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>(r11, i42, $r17) in <com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r0, i5, $i1) in <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r0, i5, $i1) in <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>(1) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i5 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i3) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i11 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i9) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i17 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i15) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i23 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i21) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i29 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i27) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i35 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i33) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i41 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i39) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i47 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>($i45) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: $i51 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int countLength(int)>(i50) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
VIRTUAL edge: i55 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeSEQUENCE(byte[],int,int)>(r17, 0, i50) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeSEQUENCE(byte[],int,int)>
VIRTUAL edge: i56 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i55, $r18) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i57 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i56, $r19) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i58 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i57, $r20) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i59 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i58, $r21) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i60 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i59, $r22) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i61 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i60, $r23) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i62 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i61, $r24) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: i63 = virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i62, $r25) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>(r17, i63, $r26) in <com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> ==> <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])>
SPECIAL edge: $r17 = specialinvoke r0.<com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>
SPECIAL edge: $r16 = specialinvoke r0.<com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()>
VIRTUAL edge: r10 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>($r9, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
INTERFACE edge: interfaceinvoke $r8.<com.jcraft.jsch.Random: void fill(byte[],int,int)>($r5, 0, $i1) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: i13 = interfaceinvoke $r12.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.CipherNone: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r14.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, r10, $r5) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.CipherNone: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r13, 0, $i11, r13, 0) in <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> ==> <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)>
CLINIT edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("3des-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("3des-cbc") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("random") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <com.jcraft.jsch.JSch: void <clinit>()>
STATIC edge: r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("random") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
CLINIT edge: $r9 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, r5, i32, $i27) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r26, $i14, 20) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: r28 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r7) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("sha-1") in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r26, 0, $i17) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, r5, i34, $i19) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r26, 0, $i24) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, r5, i32, $i27) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r25 = <java.lang.System: java.io.PrintStream err> in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r26, $i14, 20) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>("sha-1") in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.JSch: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r26, 0, $i17) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, r5, i34, $i19) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r26, 0, $i24) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> ==> <com.jcraft.jsch.jce.SHA1: void init()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>(r1, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, r8, r2) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)>
INTERFACE edge: interfaceinvoke $r6.<com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>(r4, 0, $i1, r5, 0) in <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)>
SPECIAL edge: specialinvoke $r17.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r17.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r20 = virtualinvoke $r17.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r21 = virtualinvoke $r17.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r22 = virtualinvoke $r17.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
SPECIAL edge: specialinvoke $r24.<java.math.BigInteger: void <init>(byte[])>($r25) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i57 = virtualinvoke $r24.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: int bitLength()>
SPECIAL edge: specialinvoke $r15.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r15.<com.jcraft.jsch.Buffer: void skip(int)>($i54) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: r30 = virtualinvoke $r15.<com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>(1, "") in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.math.BigInteger: void <init>(byte[])>($r14) in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i18 = virtualinvoke $r13.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> ==> <java.math.BigInteger: int bitLength()>
SPECIAL edge: specialinvoke $r33.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r33.<com.jcraft.jsch.Buffer: void skip(int)>($i76) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void skip(int)>
VIRTUAL edge: r43 = virtualinvoke $r33.<com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>(4, "") in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KeyPairRSA: byte[] getCArray()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()>
SPECIAL edge: specialinvoke $r21.<com.jcraft.jsch.Buffer: void <init>(byte[])>(r1) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: void <init>(byte[])>
VIRTUAL edge: $r22 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r24 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
VIRTUAL edge: $r26 = virtualinvoke $r21.<com.jcraft.jsch.Buffer: byte[] getMPIntBits()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
SPECIAL edge: specialinvoke $r31.<java.math.BigInteger: void <init>(byte[])>($r32) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i75 = virtualinvoke $r31.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: int bitLength()>
SPECIAL edge: specialinvoke $r19.<java.math.BigInteger: void <init>(byte[])>($r20) in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $i23 = virtualinvoke $r19.<java.math.BigInteger: int bitLength()>() in <com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> ==> <java.math.BigInteger: int bitLength()>
CLINIT edge: $r3 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r3 = new java.math.BigInteger in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>($r4) in <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r7 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r5) in <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()> ==> <java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6) in <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getCArray()> ==> <java.math.BigInteger: byte[] toByteArray()>
VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i1) in <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i1) in <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> ==> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i1) in <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> ==> <java.io.PipedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i1) in <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>("ProxySOCKS5: stream is closed") in <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jcraft.HMAC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r1) in <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.jcraft.jsch.JSch: com.jcraft.jsch.IdentityRepository getIdentityRepository()>() in <com.jcraft.jsch.Session: com.jcraft.jsch.IdentityRepository getIdentityRepository()> ==> <com.jcraft.jsch.JSch: com.jcraft.jsch.IdentityRepository getIdentityRepository()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.jce.HMAC: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Util$1: void <init>(java.net.Socket[],java.lang.String,int,java.lang.Exception[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.JSch$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSession: void <init>()>() in <com.jcraft.jsch.ChannelShell: void <init>()> ==> <com.jcraft.jsch.ChannelSession: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void <init>()>() in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Channel: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void setLocalWindowSizeMax(int)>(131072) in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSizeMax(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void setLocalWindowSize(int)>(131072) in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelX11: void setLocalPacketSize(int)>(16384) in <com.jcraft.jsch.ChannelX11: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalPacketSize(int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void <init>()>() in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Channel: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void setLocalWindowSizeMax(int)>(131072) in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSizeMax(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void setLocalWindowSize(int)>(131072) in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: void setLocalPacketSize(int)>(16384) in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalPacketSize(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Buffer: void reset()>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.Buffer: void <init>()>() in <com.jcraft.jsch.ChannelAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Buffer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Channel: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalWindowSizeMax(int)>(131072) in <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSizeMax(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalWindowSize(int)>(131072) in <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalPacketSize(int)>(16384) in <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> ==> <com.jcraft.jsch.Channel: void setLocalPacketSize(int)>
SPECIAL edge: specialinvoke $r1.<com.jcraft.jsch.IO: void <init>()>() in <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> ==> <com.jcraft.jsch.IO: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r20.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, 0, $r8) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PortForwardingL: local port ") in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be bound.") in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>(r17, $r10) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r18.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r17) in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke $r7.<java.net.ServerSocket: int getLocalPort()>() in <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> ==> <java.net.ServerSocket: int getLocalPort()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.SftpATTRS: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.IdentityFile: void <init>(com.jcraft.jsch.JSch,java.lang.String,com.jcraft.jsch.KeyPair)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(5, $i1) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putLong(long)>(l4) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Buffer: void putLong(long)>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putInt(int)>(i5) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i8) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r9.<com.jcraft.jsch.ChannelSftp$RequestQueue: void add(int,long,int)>($i10, l4, i5) in <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <com.jcraft.jsch.ChannelSftp$RequestQueue: void add(int,long,int)>
VIRTUAL edge: i1 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getInt()>() in <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getInt()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.jcraft.jsch.Buffer: int getLength()>() in <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)> ==> <com.jcraft.jsch.Buffer: int getLength()>
VIRTUAL edge: virtualinvoke r1.<com.jcraft.jsch.Buffer: void getByte(byte[])>($r3) in <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)> ==> <com.jcraft.jsch.Buffer: void getByte(byte[])>
SPECIAL edge: specialinvoke $r4.<com.jcraft.jsch.JSchException: void <init>(java.lang.String)>(r5) in <com.jcraft.jsch.Buffer: byte[][] getBytes(int,java.lang.String)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CheckCiphers: ") in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r17.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r21) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r16) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.util.Vector: java.lang.Object[] toArray()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: java.lang.Object[] toArray()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r15 = virtualinvoke r13.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>($r14) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r6.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not available.") in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r12) in <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CheckKexes: ") in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r17.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r21) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.Vector: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r16) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.util.Vector: java.lang.Object[] toArray()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: java.lang.Object[] toArray()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.util.Vector: int size()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r15 = virtualinvoke r13.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>($r14) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r6.<com.jcraft.jsch.Logger: boolean isEnabled(int)>(1) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: boolean isEnabled(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not available.") in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<com.jcraft.jsch.Logger: void log(int,java.lang.String)>(1, $r12) in <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> ==> <com.jcraft.jsch.JSch$1: void log(int,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r6.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r4, null, null, null, null) in <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> ==> <com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r4, null, null, null, null) in <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> ==> <com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>(r4, null, null, null, null) in <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> ==> <com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,byte[])>(r1, r2, r3) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()>
CLINIT edge: r2 = staticinvoke <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>($r1) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.KnownHosts: void <clinit>()>
STATIC edge: $r20 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r19) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r19 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>($r18, 0, $i3) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
STATIC edge: $r14 = staticinvoke <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>($r13) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
STATIC edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>($r12, 0, $i2) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
STATIC edge: r35 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>($r1) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>
CLINIT edge: $r13 = staticinvoke <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>($r12, 0, $i2) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r35 = staticinvoke <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>($r6) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Util: void <clinit>()>
CLINIT edge: r32 = <com.jcraft.jsch.Session: com.jcraft.jsch.Random random> in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.Session: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.jcraft.jsch.KeyExchange: byte[] getK()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KeyExchange: byte[] getK()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.jcraft.jsch.KeyExchange: byte[] getH()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KeyExchange: byte[] getH()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.jcraft.jsch.KeyExchange: com.jcraft.jsch.HASH getHash()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.KeyExchange: com.jcraft.jsch.HASH getHash()>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r1) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r2) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putByte(byte)>(65) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r11.<com.jcraft.jsch.Buffer: void putByte(byte[])>($r10) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r14, 0, $i0) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r14, 0, $i0) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r15 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r15 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r22, 0, $i8) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r22, 0, $i8) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r23 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r23 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r28, 0, $i12) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r28, 0, $i12) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r29 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r29 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r34, 0, $i16) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r34, 0, $i16) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r35 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r35 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r40, 0, $i20) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r40, 0, $i20) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r41 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r41 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r46, 0, $i24) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r46, 0, $i24) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r47 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r47 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r115, 0, $i40) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r115, 0, $i40) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: r129 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: r129 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r103, 0, $i33) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r3.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r103, 0, $i33) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: r135 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: r135 = interfaceinvoke r3.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: $r49 = virtualinvoke r4.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r125) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke r4.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r131) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: $r65 = specialinvoke r4.<com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)>($r63, r1, r2, $r64, r3, $i26) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)>
VIRTUAL edge: $r73 = virtualinvoke r4.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r133) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
VIRTUAL edge: $r84 = virtualinvoke r4.<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>(r137) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
SPECIAL edge: $r91 = specialinvoke r4.<com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)>($r89, r1, r2, $r90, r3, $i32) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)>
SPECIAL edge: specialinvoke r4.<com.jcraft.jsch.Session: void initDeflater(java.lang.String)>(r139) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: void initDeflater(java.lang.String)>
SPECIAL edge: specialinvoke r4.<com.jcraft.jsch.Session: void initInflater(java.lang.String)>(r140) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Session: void initInflater(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke r126.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getBlockSize()>
INTERFACE edge: $i54 = interfaceinvoke $r127.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getBlockSize()>
VIRTUAL edge: virtualinvoke $r108.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r109.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r1) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r110.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r2) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
VIRTUAL edge: virtualinvoke $r112.<com.jcraft.jsch.Buffer: void putByte(byte[])>($r111) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r55.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(1, $r54, $r53) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i25 = interfaceinvoke $r56.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
VIRTUAL edge: $r59 = virtualinvoke r132.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i26 = interfaceinvoke $r62.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: interfaceinvoke $r67.<com.jcraft.jsch.MAC: void init(byte[])>($r66) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke $r67.<com.jcraft.jsch.MAC: void init(byte[])>($r66) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: void init(byte[])>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i27 = interfaceinvoke $r68.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i28 = interfaceinvoke $r70.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
VIRTUAL edge: $r74 = virtualinvoke r134.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getBlockSize()>
INTERFACE edge: $i29 = interfaceinvoke $r77.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getBlockSize()>
VIRTUAL edge: virtualinvoke $r96.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke $r97.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r1) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke $r98.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r2) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
VIRTUAL edge: virtualinvoke $r100.<com.jcraft.jsch.Buffer: void putByte(byte[])>($r99) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])>
INTERFACE edge: interfaceinvoke $r81.<com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>(0, $r80, $r79) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CBC: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CTR: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES128CTR: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CTR: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES256CBC: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.CipherNone: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.AES192CBC: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getIVSize()>
INTERFACE edge: $i31 = interfaceinvoke $r82.<com.jcraft.jsch.Cipher: int getIVSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getIVSize()>
VIRTUAL edge: $r85 = virtualinvoke r138.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i32 = interfaceinvoke $r88.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: interfaceinvoke $r93.<com.jcraft.jsch.MAC: void init(byte[])>($r92) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jce.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke $r93.<com.jcraft.jsch.MAC: void init(byte[])>($r92) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.jcraft.HMAC: void init(byte[])>
VIRTUAL edge: $r124 = virtualinvoke $r122.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r124 = virtualinvoke $r122.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.SftpException: java.lang.String toString()>
VIRTUAL edge: $r124 = virtualinvoke $r122.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.lang.SecurityException: java.lang.String toString()>
VIRTUAL edge: $r124 = virtualinvoke $r122.<java.lang.Exception: java.lang.String toString()>() in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <java.net.UnknownHostException: java.lang.String toString()>
SPECIAL edge: specialinvoke $r123.<com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>($r124, $r122) in <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> ==> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i6) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r9) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Util: void bzero(byte[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r6, $i7, i0) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r6, 0, $i6) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.jcraft.jsch.Util: void bzero(byte[])>(r9) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Util: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putString(byte[])>(r4) in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelAgentForwarding: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i4) in <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.PipedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <com.jcraft.jsch.Channel$1: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.PipedOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStream: void flush()>() in <com.jcraft.jsch.IO: void put_ext(byte[],int,int)> ==> <com.jcraft.jsch.ChannelSftp$1: void flush()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(int)>(100) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(90) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.Channel: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.Buffer: void <init>(int)>(150) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(90) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i1) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r7) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r9) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke $r2.<com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>($r0) in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
VIRTUAL edge: virtualinvoke $r2.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Packet genChannelOpenPacket()> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: virtualinvoke $r10.<com.jcraft.jsch.Buffer: void putInt(int)>(i0) in <com.jcraft.jsch.Packet: int shift(int,int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r8.<com.jcraft.jsch.Buffer: void putInt(int)>(i3) in <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r9.<com.jcraft.jsch.Buffer: void putInt(int)>(i1) in <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue$Request: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Channel: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r0) in <com.jcraft.jsch.Channel: void <init>()> ==> <java.util.Vector: void addElement(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>($r1, b0, i1) in <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(16, r1) in <com.jcraft.jsch.ChannelSftp: void sendREALPATH(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(17, r1) in <com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(3, $i1) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putInt(int)>(i4) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putInt(int)>(0) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i7) in <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(94) in <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i2) in <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>(i1) in <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putByte(byte)>(b3) in <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(4, r1) in <com.jcraft.jsch.ChannelSftp: void sendCLOSE(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
VIRTUAL edge: l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l3) in <com.jcraft.jsch.ChannelSftp: void skip(long)> ==> <java.io.FileInputStream: long skip(long)>
VIRTUAL edge: l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l3) in <com.jcraft.jsch.ChannelSftp: void skip(long)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(b0, $i2) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r3.<com.jcraft.jsch.Buffer: void putInt(int)>($i3) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r6, r0, $i7) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Packet: void reset()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(b0, $i4) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putInt(int)>($i5) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r6.<com.jcraft.jsch.Buffer: void putString(byte[])>(r3) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i11) in <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: virtualinvoke $r1.<com.jcraft.jsch.Packet: void reset()>() in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Packet: void reset()>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: int length()>() in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: int length()>
VIRTUAL edge: virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>($r6) in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>
VIRTUAL edge: $i8 = virtualinvoke r3.<com.jcraft.jsch.SftpATTRS: int length()>() in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.SftpATTRS: int length()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>(9, $i3) in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>() in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
VIRTUAL edge: virtualinvoke $r4.<com.jcraft.jsch.Buffer: void putInt(int)>($i4) in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.jcraft.jsch.Buffer: void putString(byte[])>(r2) in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke $r7.<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>($r8, r0, $i10) in <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> ==> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
VIRTUAL edge: $i13 = virtualinvoke $r3.<java.lang.String: int length()>() in <com.jcraft.jsch.SftpATTRS: int length()> ==> <java.lang.String: int length()>
VIRTUAL edge: $i16 = virtualinvoke $r5.<java.lang.String: int length()>() in <com.jcraft.jsch.SftpATTRS: int length()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i0) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putLong(long)>($l23) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putLong(long)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i21) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i22) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i20) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i19) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putInt(int)>($i18) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putInt(int)>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r5) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.jcraft.jsch.Buffer: void putString(byte[])>($r8) in <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> ==> <com.jcraft.jsch.Buffer: void putString(byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>(7, r1) in <com.jcraft.jsch.ChannelSftp: void sendLSTAT(byte[])> ==> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestAgentForwarding: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Request: void <init>()>() in <com.jcraft.jsch.RequestEnv: void <init>()> ==> <com.jcraft.jsch.Request: void <init>()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session)>(r1) in <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session,com.jcraft.jsch.Session$1)> ==> <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session)>
SPECIAL edge: specialinvoke $r0.<com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>(r1, 3, null) in <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)> ==> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
VIRTUAL edge: virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r0) in <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)> ==> <java.util.Vector: void addElement(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>(r2, i0, r3) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("|1|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i1) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i2 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>("|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke $r8.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int length()>
VIRTUAL edge: r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>($i3) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i4 = virtualinvoke r10.<java.lang.String: int indexOf(java.lang.String)>("|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i4) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i5 = virtualinvoke r10.<java.lang.String: int indexOf(java.lang.String)>("|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i6) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i7 = virtualinvoke r11.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $i8 = virtualinvoke r12.<java.lang.String: int length()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> ==> <java.lang.String: int length()>
VIRTUAL edge: i0 = virtualinvoke r1.<java.lang.String: int length()>() in <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i5) in <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i5, r2, 0, i1) in <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i5, r2, 0, i1) in <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
VIRTUAL edge: i1 = virtualinvoke r2.<java.lang.String: int length()>() in <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r4 = virtualinvoke r13.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("hmacsha1: ") in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12) in <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Vector: int size()>() in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.util.Vector: java.lang.Object elementAt(int)>
VIRTUAL edge: r7 = virtualinvoke r23.<com.jcraft.jsch.HostKey: java.lang.String getHost()>() in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
VIRTUAL edge: r8 = virtualinvoke r23.<com.jcraft.jsch.HostKey: java.lang.String getType()>() in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.HostKey: java.lang.String getType()>
VIRTUAL edge: $r14 = virtualinvoke r23.<com.jcraft.jsch.HostKey: java.lang.String getKey()>() in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.HostKey: java.lang.String getKey()>
VIRTUAL edge: $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("UNKNOWN") in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r17) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r17) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r18) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r10) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r10) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r11) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r11) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r12) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r13) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r15) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r16) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <com.jcraft.jsch.ChannelSftp$1: void write(byte[])>
VIRTUAL edge: virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.Object)>($r19) in <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue,long)> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: i3 = virtualinvoke r1.<com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>(r0, i2, i0) in <com.jcraft.jsch.KeyPair: int writeSEQUENCE(byte[],int,int)> ==> <com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>
VIRTUAL edge: i5 = virtualinvoke r1.<com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>(r0, i4, $i0) in <com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])> ==> <com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>
VIRTUAL edge: $r3 = virtualinvoke r8.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r4 = virtualinvoke r13.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("connect: random ") in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12) in <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: $r23 = specialinvoke r0.<com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>
SPECIAL edge: $r22 = specialinvoke r0.<com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.BlowfishCBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES128CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES256CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.CipherNone: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.TripleDESCTR: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.AES192CBC: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR256: int getBlockSize()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.jcraft.jsch.Cipher: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.ARCFOUR128: int getBlockSize()>
INTERFACE edge: i1 = interfaceinvoke $r4.<com.jcraft.jsch.HASH: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: int getBlockSize()>
INTERFACE edge: i1 = interfaceinvoke $r4.<com.jcraft.jsch.HASH: int getBlockSize()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: int getBlockSize()>
INTERFACE edge: interfaceinvoke $r21.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r27, 0, $i30) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r21.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r27, 0, $i30) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r16.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i25) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r16.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i25) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r18.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r17, 0, $i33) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r18.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r17, 0, $i33) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: r27 = interfaceinvoke $r19.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: r27 = interfaceinvoke $r19.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r27, 0, $i21) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r15.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r27, 0, $i21) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r13.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i18) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r13.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i18) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: r27 = interfaceinvoke $r14.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: r27 = interfaceinvoke $r14.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: $r8 = virtualinvoke r28.<java.lang.Class: java.lang.Object newInstance()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.lang.Class: java.lang.Object newInstance()>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void init()>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void init()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void init()>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r29, 0, $i12) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r29, 0, $i12) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i13) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r10.<com.jcraft.jsch.HASH: void update(byte[],int,int)>(r11, 0, $i13) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r12 = interfaceinvoke r10.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r12 = interfaceinvoke r10.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.Object)>($r24) in <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> ==> <java.io.PrintStream: void println(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>($r4) in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r9 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8) in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6) in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7) in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getEPArray()> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>($r4) in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r9 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8) in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6) in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: void <init>(byte[])>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7) in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>() in <com.jcraft.jsch.KeyPairRSA: byte[] getEQArray()> ==> <java.math.BigInteger: byte[] toByteArray()>
SPECIAL edge: specialinvoke r0.<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>(r1, r2, 0, r3) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,byte[])> ==> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i4 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void init(byte[])>($r5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void init(byte[])>($r5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMAC: void init(byte[])>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void update(byte[],int,int)>(r35, 0, $i0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMAC: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void update(byte[],int,int)>(r35, 0, $i0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMAC: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACSHA196: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMAC: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACMD596: int getBlockSize()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.jcraft.jsch.MAC: int getBlockSize()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACMD596: int getBlockSize()>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMAC: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r2.<com.jcraft.jsch.MAC: void doFinal(byte[],int)>($r8, 0) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)>
INTERFACE edge: interfaceinvoke r32.<com.jcraft.jsch.Random: void fill(byte[],int,int)>($r26, 0, $i5) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <com.jcraft.jsch.jce.Random: void fill(byte[],int,int)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|1|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|") in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>() in <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: i0 = interfaceinvoke r1.<com.jcraft.jsch.HASH: int getBlockSize()>() in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.MD5: int getBlockSize()>
INTERFACE edge: i0 = interfaceinvoke r1.<com.jcraft.jsch.HASH: int getBlockSize()>() in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.SHA1: int getBlockSize()>
INTERFACE edge: interfaceinvoke r1.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r5, 0, $i3) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.MD5: void update(byte[],int,int)>
INTERFACE edge: interfaceinvoke r1.<com.jcraft.jsch.HASH: void update(byte[],int,int)>($r5, 0, $i3) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.SHA1: void update(byte[],int,int)>
INTERFACE edge: $r7 = interfaceinvoke r1.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.MD5: byte[] digest()>
INTERFACE edge: $r7 = interfaceinvoke r1.<com.jcraft.jsch.HASH: byte[] digest()>() in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.jce.SHA1: byte[] digest()>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.Buffer: void reset()>() in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Buffer: void reset()>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.Buffer: void putMPInt(byte[])>(r3) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r4) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
VIRTUAL edge: virtualinvoke r2.<com.jcraft.jsch.Buffer: void putByte(byte[])>(r9) in <com.jcraft.jsch.Session: byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int)> ==> <com.jcraft.jsch.Buffer: void putByte(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.jcraft.jsch.KeyPair: int countLength(int)>(i10) in <com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)> ==> <com.jcraft.jsch.KeyPair: int countLength(int)>
