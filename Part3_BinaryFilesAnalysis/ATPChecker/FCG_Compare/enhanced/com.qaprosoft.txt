FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: $r2 = staticinvoke <org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder json()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()> ==> <org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder json()>
STATIC edge: $r13 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r9) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()> ==> <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withUtf8EncodingMessageConverter()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: $r9 = <org.apache.http.auth.AuthScope: org.apache.http.auth.AuthScope ANY> in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.apache.http.auth.AuthScope: void <clinit>()>
STATIC edge: $r10 = staticinvoke <org.apache.http.impl.client.HttpClients: org.apache.http.impl.client.HttpClientBuilder custom()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.apache.http.impl.client.HttpClients: org.apache.http.impl.client.HttpClientBuilder custom()>
STATIC edge: $r20 = staticinvoke <com.google.common.collect.Iterables: com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate)>($r18, $r26) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <com.google.common.collect.Iterables: com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate)>
CLINIT edge: $r0 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES> in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <org.apache.http.conn.routing.RouteInfo$TunnelType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/http/conn/routing/RouteInfo$TunnelType;", r0) in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES> in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <org.apache.http.conn.routing.RouteInfo$LayerType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/http/conn/routing/RouteInfo$LayerType;", r0) in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.qaprosoft.hockeyapp.HockeyAppManager: com.qaprosoft.hockeyapp.HockeyAppManager instance> in <com.qaprosoft.hockeyapp.HockeyAppManager: com.qaprosoft.hockeyapp.HockeyAppManager getInstance()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r13 = new java.io.File in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r42 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Thrown When Attempting to Transfer HockeyApp Build (%s)", $r39) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HockeyApp Build (%s) was retrieved", $r17) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r47 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Attempting to Look for Existing File: %s", $r44) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r55 = new java.io.File in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r14 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r42 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Thrown When Attempting to Transfer HockeyApp Build (%s)", $r39) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r40 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HockeyApp Build (%s) was retrieved", $r17) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r15 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r47 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Attempting to Look for Existing File: %s", $r44) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r45 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r24 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String lambda$getAppId$0(java.lang.String,java.lang.String)>($r3, $r4) in <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: java.lang.Object apply(java.lang.Object,java.lang.Object)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String lambda$getAppId$0(java.lang.String,java.lang.String)>($r3, $r4) in <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: java.lang.Object apply(java.lang.Object,java.lang.Object)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String lambda$getAppId$0(java.lang.String,java.lang.String)>
CLINIT edge: <org.apache.http.auth.AuthScope: java.lang.String ANY_HOST> = null in <org.apache.http.auth.AuthScope: void <clinit>()> ==> <org.apache.http.auth.AuthScope: void <clinit>()>
CLINIT edge: $r0 = new org.apache.http.conn.routing.RouteInfo$TunnelType in <org.apache.http.conn.routing.RouteInfo$TunnelType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$TunnelType: void <clinit>()>
CLINIT edge: $r0 = new org.apache.http.conn.routing.RouteInfo$LayerType in <org.apache.http.conn.routing.RouteInfo$LayerType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$LayerType: void <clinit>()>
CLINIT edge: <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> = $r0 in <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "Lcom/qaprosoft/hockeyapp/HockeyAppManager;") in <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()> ==> <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.springframework.http.client.SimpleClientHttpRequestFactory: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.ssl.DisabledSslClientHttpRequestFactory: void <init>()> ==> <org.springframework.http.client.SimpleClientHttpRequestFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.ssl.NullX509TrustManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.ssl.NullHostnameVerifier: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder newInstance()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withMessageConverter(org.springframework.http.converter.HttpMessageConverter)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>($r7) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()> ==> <org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
VIRTUAL edge: virtualinvoke r0.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withMessageConverter(org.springframework.http.converter.HttpMessageConverter)>($r17) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withMessageConverter(org.springframework.http.converter.HttpMessageConverter)>
SPECIAL edge: specialinvoke $r4.<org.springframework.http.converter.StringHttpMessageConverter: void <init>(java.nio.charset.Charset)>($r2) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withUtf8EncodingMessageConverter()> ==> <org.springframework.http.converter.StringHttpMessageConverter: void <init>(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke r0.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withMessageConverter(org.springframework.http.converter.HttpMessageConverter)>($r5) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withUtf8EncodingMessageConverter()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withMessageConverter(org.springframework.http.converter.HttpMessageConverter)>
SPECIAL edge: specialinvoke $r26.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: void <init>(com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder)>(r0) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: void <init>(com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder)>
INTERFACE edge: interfaceinvoke $r23.<java.util.List: boolean remove(java.lang.Object)>(r24) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r27.<com.qaprosoft.hockeyapp.http.resttemplate.ssl.DisabledSslClientHttpRequestFactory: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.ssl.DisabledSslClientHttpRequestFactory: void <init>()>
SPECIAL edge: specialinvoke $r28.<org.apache.http.impl.client.BasicCredentialsProvider: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.apache.http.impl.client.BasicCredentialsProvider: void <init>()>
INTERFACE edge: interfaceinvoke $r28.<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>($r9, $r29) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>
SPECIAL edge: specialinvoke $r29.<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>($r8, $r7) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void <init>(org.apache.http.client.HttpClient)>($r32) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()> ==> <org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void <init>(org.apache.http.client.HttpClient)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.impl.client.BasicCredentialsProvider: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.impl.client.BasicCredentialsProvider: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.impl.client.BasicCredentialsProvider: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.impl.client.BasicCredentialsProvider: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: boolean apply(org.springframework.http.converter.HttpMessageConverter)>($r2) in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: boolean apply(java.lang.Object)> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: boolean apply(org.springframework.http.converter.HttpMessageConverter)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: java.security.Principal getUserPrincipal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: java.lang.String getUserName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: java.lang.String getPassword()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.UsernamePasswordCredentials: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.auth.AuthScope: void <init>(org.apache.http.auth.AuthScope)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: void <init>(org.apache.http.auth.AuthScope)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: java.lang.String getHost()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: int getPort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: java.lang.String getRealm()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: java.lang.String getScheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.auth.AuthScope: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>()>() in <org.apache.http.client.ClientProtocolException: void <init>()> ==> <java.io.IOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.client.ClientProtocolException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>()>() in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.String)> ==> <java.io.IOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>()>() in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)> ==> <java.io.IOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>()>() in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.io.IOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.client.ClientProtocolException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.HttpHost: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.HttpHost: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.String getHostName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: int getPort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.String getSchemeName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.String toURI()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.String toHostString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpHost: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.scheme.SchemeRegistry: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme unregister(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: java.util.List getSchemeNames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: int getHopCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: boolean isTunnelled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: boolean isLayered()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: boolean isSecure()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.routing.HttpRoute: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.String getProtocol()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int getMajor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int getMinor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: int getDefaultPort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: boolean isLayered()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: int resolvePort(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.scheme.Scheme: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.http.conn.ConnectTimeoutException: void <init>()>() in <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>()> ==> <org.apache.http.conn.ConnectTimeoutException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.http.conn.ConnectTimeoutException: void <init>()>() in <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)> ==> <org.apache.http.conn.ConnectTimeoutException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <org.apache.http.conn.routing.HttpRoute: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <org.apache.http.HttpHost: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <org.apache.http.HttpHost: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType[] values()> ==> <org.apache.http.conn.routing.HttpRoute: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.io.InterruptedIOException: void <init>()>() in <org.apache.http.conn.ConnectTimeoutException: void <init>()> ==> <java.io.InterruptedIOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ConnectTimeoutException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.InterruptedIOException: void <init>()>() in <org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)> ==> <java.io.InterruptedIOException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.apache.http.HttpException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.apache.http.HttpException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <org.apache.http.ParseException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ParseException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <org.apache.http.ParseException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ParseException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.qaprosoft.hockeyapp.HockeyAppManager: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: com.qaprosoft.hockeyapp.HockeyAppManager getInstance()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <init>()>
SPECIAL edge: specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()>
SPECIAL edge: $r3 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)>(r1, r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)>
SPECIAL edge: r48 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)>($r3, r4, r5) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)>
SPECIAL edge: $r36 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)>(r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)>
SPECIAL edge: $r10 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)>(r1, r4, r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)>
SPECIAL edge: z3 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)>(r12, $r16) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)>
VIRTUAL edge: $z0 = virtualinvoke r48.<java.lang.String: boolean contains(java.lang.CharSequence)>("api") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r48.<java.lang.String: int indexOf(java.lang.String)>("/apps") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>(r48) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i0, "/api/2") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?format=") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r48 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>(r7) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: r51 = virtualinvoke $r13.<java.io.File: java.io.File[] listFiles()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $z1 = virtualinvoke $r20.<java.io.File: boolean isFile()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getName()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z2 = virtualinvoke $r22.<java.lang.String: boolean contains(java.lang.CharSequence)>(r12) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File has been Located Locally.  File path is: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.io.File: java.lang.String getAbsolutePath()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r24.<org.apache.log4j.Logger: void info(java.lang.Object)>($r29) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.channels.ClosedByInterruptException: java.lang.String getMessage()>
VIRTUAL edge: virtualinvoke $r45.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r47, $r43) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r15.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Beginning Transfer of HockeyApp Build") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void debug(java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>(r48) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.net.URL: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r18.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r19) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void debug(java.lang.Object)>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.channels.ClosedByInterruptException: java.lang.String getMessage()>
VIRTUAL edge: $r41 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: virtualinvoke $r40.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r42, $r38) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.Logger: void info(java.lang.Object)>("Preparing to use local version of HockeyApp Build...") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>(r12) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.io.File getBuild(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder newInstance()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder newInstance()>
CLINIT edge: $r35 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Application Not Found in HockeyApp for Name (%s), Platform (%s)", $r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r24 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>($r20, $r21, $r22, $r23) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>
STATIC edge: $r23 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: java.util.function.Supplier bootstrap$()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: java.util.function.Supplier bootstrap$()>
STATIC edge: $r22 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: java.util.function.BinaryOperator bootstrap$()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: java.util.function.BinaryOperator bootstrap$()>
STATIC edge: $r21 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: java.util.function.Function bootstrap$()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: java.util.function.Function bootstrap$()>
STATIC edge: $r20 = staticinvoke <com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: java.util.function.Function bootstrap$()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: java.util.function.Function bootstrap$()>
STATIC edge: $r18 = staticinvoke <java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>($r17) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>
STATIC edge: $r17 = staticinvoke <java.util.Comparator: java.util.Comparator reverseOrder()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.Comparator: java.util.Comparator reverseOrder()>
STATIC edge: $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found App: %s (%s)", $r34) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Application Not Found in HockeyApp for Name (%s), Platform (%s)", $r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found App: %s (%s)", $r34) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r10 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to find build to download, version provided (%s)", $r4) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to find build to download, version provided (%s)", $r4) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s.%s.%s", $r0) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s.%s.%s", $r0) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r8 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: r23 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>
STATIC edge: staticinvoke <java.lang.Thread: boolean interrupted()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Thread: boolean interrupted()>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Current Thread (%s) is interrupted, clearing interruption.", $r7) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r15 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r6 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Current Thread (%s) is interrupted, clearing interruption.", $r7) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: java.util.function.Function bootstrap$()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$getKey__1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: java.util.function.Function bootstrap$()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$getValue__2: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: java.util.function.BinaryOperator bootstrap$()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$lambda_getAppId_0__3: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.qaprosoft.hockeyapp.HockeyAppManager$init__4: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: java.util.function.Supplier bootstrap$()> ==> <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager$init__4: java.lang.Object get()> ==> <java.util.LinkedHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.http.conn.routing.RouteInfo$TunnelType: void <init>(java.lang.String,int)>("PLAIN", 0) in <org.apache.http.conn.routing.RouteInfo$TunnelType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$TunnelType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<org.apache.http.conn.routing.RouteInfo$TunnelType: void <init>(java.lang.String,int)>("TUNNELLED", 1) in <org.apache.http.conn.routing.RouteInfo$TunnelType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$TunnelType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<org.apache.http.conn.routing.RouteInfo$LayerType: void <init>(java.lang.String,int)>("LAYERED", 0) in <org.apache.http.conn.routing.RouteInfo$LayerType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$LayerType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<org.apache.http.conn.routing.RouteInfo$LayerType: void <init>(java.lang.String,int)>("PLAIN", 1) in <org.apache.http.conn.routing.RouteInfo$LayerType: void <clinit>()> ==> <org.apache.http.conn.routing.RouteInfo$LayerType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<org.springframework.web.client.RestTemplate: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: void <init>()> ==> <org.springframework.web.client.RestTemplate: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder$1: void <init>(com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withDisabledSslChecking()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withDisabledSslChecking()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder withSpecificJsonMessageConverter()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: void disableRestTemplateSsl()> ==> <com.qaprosoft.hockeyapp.http.resttemplate.RestTemplateBuilder: org.springframework.web.client.RestTemplate build()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r42) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $r15 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.util.Set entrySet()>
SPECIAL edge: r4 = specialinvoke r2.<com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.http.HttpMethod)>("rink.hockeyapp.net", "/api/2/apps", $r3) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.http.HttpMethod)>
VIRTUAL edge: $z2 = virtualinvoke r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r29) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r33 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z3 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>($r33) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r35.<org.apache.log4j.Logger: void info(java.lang.Object)>($r38) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.util.Map getAppId(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r0 = staticinvoke <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder newInstance()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.http.HttpMethod)> ==> <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder newInstance()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.HashMap: java.util.Set keySet()>
SPECIAL edge: specialinvoke $r51.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nHockeyApp Id: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.Logger: void info(java.lang.Object)>($r13) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r52.<org.springframework.util.LinkedMultiValueMap: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <org.springframework.util.LinkedMultiValueMap: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("api/2/apps/") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/app_versions") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: r23 = specialinvoke r16.<com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod)>("rink.hockeyapp.net", $r21, $r60, $r22) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod)>
SPECIAL edge: $z2 = specialinvoke r16.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(r5, r31) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
SPECIAL edge: $z3 = specialinvoke r16.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkTitleForCorrectPattern(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>($r33, r31) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkTitleForCorrectPattern(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
SPECIAL edge: $z7 = specialinvoke r16.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkNotesForCorrectBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>($r50, r31) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkNotesForCorrectBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
VIRTUAL edge: $r33 = virtualinvoke r32.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r50 = virtualinvoke r32.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r54.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r36 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downloading Version: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r35.<org.apache.log4j.Logger: void info(java.lang.Object)>($r38) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r55.<java.util.ArrayList: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r55.<java.util.List: boolean add(java.lang.Object)>("build_url") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r55.<java.util.List: boolean add(java.lang.Object)>("download_url") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r45 = interfaceinvoke $r55.<java.util.List: java.util.Iterator iterator()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r56.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String scanAppForBuild(java.util.Map,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r0 = staticinvoke <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder newInstance()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod)> ==> <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder newInstance()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("ios") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r12 = specialinvoke r3.<com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)>(r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String returnProperPlatformExtension(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: java.lang.String createFileName(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Thread: boolean isInterrupted()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Thread: boolean isInterrupted()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Thread: long getId()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.Thread: long getId()>
VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <org.apache.log4j.Logger: void debug(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r26.<java.io.FileOutputStream: void <init>(java.lang.String)>(r4) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r26.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
VIRTUAL edge: virtualinvoke $r26.<java.io.FileOutputStream: void close()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.Logger: void info(java.lang.Object)>("Successfully Transferred...") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<org.apache.log4j.Logger: void info(java.lang.Object)>("Retrying....") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Getting Error: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r28.<java.nio.channels.ClosedByInterruptException: java.lang.String getMessage()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.nio.channels.ClosedByInterruptException: java.lang.String getMessage()>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r17.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r21, $r14) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r24.<java.io.FileOutputStream: void close()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r24.<java.io.FileOutputStream: void close()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean downloadBuild(java.lang.String,java.net.URL)> ==> <java.io.FileOutputStream: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <org.apache.http.conn.routing.RouteInfo$TunnelType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <org.apache.http.conn.routing.RouteInfo$LayerType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r9 = specialinvoke r8.<com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.http.HttpMethod)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()>
SPECIAL edge: specialinvoke $r12.<org.springframework.http.RequestEntity: void <init>(org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod,java.net.URI)>($r13, r10, $r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.http.HttpMethod)> ==> <org.springframework.http.RequestEntity: void <init>(org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod,java.net.URI)>
STATIC edge: $r3 = staticinvoke <com.qaprosoft.carina.core.foundation.utils.Configuration: java.lang.String get(com.qaprosoft.carina.core.foundation.utils.Configuration$Parameter)>($r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()> ==> <com.qaprosoft.carina.core.foundation.utils.Configuration: java.lang.String get(com.qaprosoft.carina.core.foundation.utils.Configuration$Parameter)>
SPECIAL edge: $r11 = specialinvoke r10.<com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()>
SPECIAL edge: specialinvoke $r14.<org.springframework.http.RequestEntity: void <init>(org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod,java.net.URI)>($r15, r12, $r13) in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.RequestEntity buildRequestEntity(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod)> ==> <org.springframework.http.RequestEntity: void <init>(org.springframework.util.MultiValueMap,org.springframework.http.HttpMethod,java.net.URI)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r13) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>("title", r1, r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkTitleForCorrectPattern(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
CLINIT edge: $r1 = <com.qaprosoft.hockeyapp.HockeyAppManager: org.apache.log4j.Logger LOGGER> in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(".*[ ->\\S]%s[ -<\\S].*", $r13) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(".*[ ->\\S]%s[ -<\\S].*", $r13) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: $z0 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>("notes", r1, r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkNotesForCorrectBuild(java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.springframework.http.HttpHeaders: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: org.springframework.http.HttpHeaders setHeaders()> ==> <org.springframework.http.HttpHeaders: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPattern to be checked: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
VIRTUAL edge: r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z0 = virtualinvoke r10.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPattern match found!! This is the buildType to be used: ") in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r16.<org.apache.log4j.Logger: void info(java.lang.Object)>($r19) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <org.apache.log4j.Logger: void info(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: $z2 = specialinvoke r12.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean scanningAllNotes(java.lang.String,java.lang.String)>($r14, r10) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean checkForPattern(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean scanningAllNotes(java.lang.String,java.lang.String)>
SPECIAL edge: z1 = specialinvoke r0.<com.qaprosoft.hockeyapp.HockeyAppManager: boolean searchFieldsForString(java.lang.String,java.lang.String)>(r1, r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean scanningAllNotes(java.lang.String,java.lang.String)> ==> <com.qaprosoft.hockeyapp.HockeyAppManager: boolean searchFieldsForString(java.lang.String,java.lang.String)>
STATIC edge: r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean searchFieldsForString(java.lang.String,java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2) in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean searchFieldsForString(java.lang.String,java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>() in <com.qaprosoft.hockeyapp.HockeyAppManager: boolean searchFieldsForString(java.lang.String,java.lang.String)> ==> <java.util.regex.Matcher: boolean find()>
