FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r1 = <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger> in <org.apache.commons.logging.impl.AvalonLogger: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.AvalonLogger: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger> = r0 in <org.apache.commons.logging.impl.AvalonLogger: void setDefaultLogger(org.apache.avalon.framework.logger.Logger)> ==> <org.apache.commons.logging.impl.AvalonLogger: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: r21 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r5) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: r21 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>("org.apache.commons.logging.simplelog.defaultlog") in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
STATIC edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r21 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r18) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r21 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r5) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader access$000()>() in <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r2) in <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()> ==> <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
STATIC edge: r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader access$000()>() in <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader access$000()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> in <org.apache.commons.logging.impl.Log4JLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
STATIC edge: $r4 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r3) in <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()> ==> <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>
CLINIT edge: $r2 = <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel> in <org.apache.commons.logging.impl.Log4JLogger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
STATIC edge: r9 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>(r8) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>
STATIC edge: r7 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>(r6) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>
STATIC edge: $r4 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>(r3) in <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3) in <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()> ==> <java.util.logging.Logger: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3) in <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isDebugEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isErrorEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isFatalEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isInfoEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isTraceEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk14Logger: boolean isWarnEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class[] RELEASE_SIGNATURE> in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <org.apache.commons.logging.impl.ServletContextCleaner: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>(r1) in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>(r1) in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r8 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r10 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r12 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r58) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>
STATIC edge: r58 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r3, r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r58 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r69, r59, r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r38) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r35 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r34) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>
STATIC edge: $z15 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r58 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r67, r59, r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z11 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r64 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>(r0, "META-INF/services/org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r49) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r46 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r45) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>
STATIC edge: $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r57) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r54 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r53) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>
STATIC edge: $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r58 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r61, r59, r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r24) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z12 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r61 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory", null) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z18 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r60) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
STATIC edge: r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>(r0, "commons-logging.properties") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r28 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r58 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>(r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z14 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r58) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z15 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z11 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r60) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.") in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
CLINIT edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>() in <org.apache.commons.logging.LogFactory$1: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>() in <org.apache.commons.logging.LogFactory$1: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>
CLINIT edge: $r3 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>($r2, $r1) in <org.apache.commons.logging.LogFactory$2: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>($r2, $r1) in <org.apache.commons.logging.LogFactory$2: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>
CLINIT edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r18) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r24) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r30) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r2, $r1) in <org.apache.commons.logging.LogFactory$6: java.lang.Object run()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r2, $r1) in <org.apache.commons.logging.LogFactory$6: java.lang.Object run()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r2) in <org.apache.commons.logging.LogFactory$3: java.lang.Object run()> ==> <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r16) in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r3 = staticinvoke <java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>($r2) in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>
STATIC edge: $r3 = staticinvoke <org.apache.log.Hierarchy: org.apache.log.Hierarchy getDefaultHierarchy()>() in <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()> ==> <org.apache.log.Hierarchy: org.apache.log.Hierarchy getDefaultHierarchy()>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$java$lang$String> in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $r10 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
STATIC edge: $r9 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("java.lang.String") in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
CLINIT edge: $r4 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$java$lang$String> in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r4 = newarray (java.lang.String)[$i0] in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r2, $r1) in <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r2, $r1) in <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()>() in <org.apache.commons.logging.impl.LogFactoryImpl$1: java.lang.Object run()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()>() in <org.apache.commons.logging.impl.LogFactoryImpl$1: java.lang.Object run()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()>() in <org.apache.commons.logging.impl.LogFactoryImpl$1: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()> ==> <java.util.logging.Logger: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isDebugEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isErrorEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isFatalEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isInfoEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isTraceEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isWarnEnabled()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r4 in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
STATIC edge: r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = null in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r4 in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.Class)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: $r1 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs> in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
STATIC edge: r5 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)>(r0) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>($r1) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.Class)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
STATIC edge: $r2 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>($r1) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.Class)> ==> <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>
CLINIT edge: $r2 = <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs> in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: $r3 = newarray (java.lang.String)[$i0] in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger> = null in <org.apache.commons.logging.impl.AvalonLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.AvalonLogger: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps> = $r0 in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.simplelog.dateTimeFormat", $r2) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showdatetime", $z4) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showShortLogname", $z2) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showlogname", $z0) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>
STATIC edge: r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)>("simplelog.properties") in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = "yyyy/MM/dd HH:mm:ss:SSS zzz" in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
CLINIT edge: $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showLogName> in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
CLINIT edge: r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r1 = <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps> in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader access$000()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader access$000()> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$org$apache$commons$logging$impl$Log4JLogger> in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
STATIC edge: $r15 = staticinvoke <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Level") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>
STATIC edge: $r14 = staticinvoke <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Level") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>
STATIC edge: $r8 = staticinvoke <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Priority") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>
STATIC edge: $r11 = staticinvoke <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.impl.Log4JLogger") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel> = $r18 in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()>
CLINIT edge: $r1 = <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$java$lang$ClassLoader> in <org.apache.commons.logging.impl.ServletContextCleaner: void <clinit>()> ==> <org.apache.commons.logging.impl.ServletContextCleaner: void <clinit>()>
STATIC edge: $r2 = staticinvoke <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)>("java.lang.ClassLoader") in <org.apache.commons.logging.impl.ServletContextCleaner: void <clinit>()> ==> <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED") in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>() in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>($r16) in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>
STATIC edge: $r16 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
STATIC edge: $r8 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()>() in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()>
STATIC edge: r14 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r13) in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r12) in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>
STATIC edge: $r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r7 in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = r0 in <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> in <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r10) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r19) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
CLINIT edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> in <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> in <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
STATIC edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
CLINIT edge: r51 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r0, r1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r40) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r53) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Double: double parseDouble(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r47) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r52) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Double: double parseDouble(java.lang.String)>
STATIC edge: r16 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>(r15) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>
STATIC edge: r51 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r0, r1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r53) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r52) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r29) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r20) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r15 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r29) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.LogFactory: java.lang.Class class$java$lang$Thread> in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: r13 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r19) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>
STATIC edge: $r19 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r14 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("java.lang.Thread") in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
CLINIT edge: $r6 = <org.apache.commons.logging.LogFactory: java.lang.Class class$org$apache$commons$logging$LogFactory> in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r10 = <org.apache.commons.logging.LogFactory: java.lang.Class class$org$apache$commons$logging$LogFactory> in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r92 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: r82 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r6 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r53) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r90 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
STATIC edge: z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>(r82) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r72) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r69 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r81) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r79 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", r0) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r24) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r84 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
STATIC edge: $r17 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r16) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r32) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r30 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r83 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>
CLINIT edge: $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r38 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r63 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r74 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0) in <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0) in <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
CLINIT edge: <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0 in <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $r1 = newarray (java.lang.String)[4] in <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0 in <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader access$000()> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>
CLINIT edge: <org.apache.commons.logging.LogSource: java.util.Hashtable logs> = $r0 in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Log4JLogger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>(r13) in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>
STATIC edge: r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.logging.Logger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.log4j.Logger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: $z0 = <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>(r13) in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0 in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger") in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.impl.Jdk14Logger: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0 in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <org.apache.commons.logging.LogSource: void <clinit>()>
CLINIT edge: r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
CLINIT edge: r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$java$lang$Thread> in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r18 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.impl.SimpleLog") in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r13 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)>("java.lang.Thread") in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)>
CLINIT edge: $r5 = <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$org$apache$commons$logging$impl$SimpleLog> in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl", null) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed") in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r2) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>
STATIC edge: r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r7) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl", null) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r4 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r2) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r23, r11) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r16 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r11) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r29) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r10) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r29) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.diagnostics.dest", null) in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.diagnostics.dest", null) in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r3 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r4 = <java.lang.System: java.io.PrintStream out> in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
STATIC edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
STATIC edge: r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r20) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r26) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
STATIC edge: r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, r27) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r27) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r20) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r26) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r27) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r0 = <java.util.logging.Level: java.util.logging.Level FINE> in <org.apache.commons.logging.impl.Jdk14Logger: void <clinit>()> ==> <java.util.logging.Level: void <clinit>()>
CLINIT edge: <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Level dummyLevel> = $r0 in <org.apache.commons.logging.impl.Jdk14Logger: void <clinit>()> ==> <org.apache.commons.logging.impl.Jdk14Logger: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.AvalonLogger: void <init>(org.apache.avalon.framework.logger.Logger)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.AvalonLogger: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("default logger has to be specified if this constructor is used!") in <org.apache.commons.logging.impl.AvalonLogger: void <init>(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>() in <org.apache.commons.logging.impl.AvalonLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(0) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(1) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(2) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(4) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(5) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(6) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(7) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.apache.commons.logging.simplelog.log.") in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: i0 = virtualinvoke $r6.<java.lang.String: int lastIndexOf(java.lang.String)>(".") in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.apache.commons.logging.simplelog.log.") in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: i0 = virtualinvoke $r19.<java.lang.String: int lastIndexOf(java.lang.String)>(".") in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z6 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z7 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r21) in <org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2) in <org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
CLINIT edge: $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime> in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void <clinit>()>
STATIC edge: $r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: $r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2) in <org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1) in <org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1) in <org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3) in <org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3) in <org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4) in <org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4) in <org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5) in <org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5) in <org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6) in <org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, r1, null) in <org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6) in <org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, r1, r2) in <org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2) in <org.apache.commons.logging.impl.SimpleLog: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5) in <org.apache.commons.logging.impl.SimpleLog: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6) in <org.apache.commons.logging.impl.SimpleLog: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3) in <org.apache.commons.logging.impl.SimpleLog: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1) in <org.apache.commons.logging.impl.SimpleLog: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4) in <org.apache.commons.logging.impl.SimpleLog: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <org.apache.commons.logging.LogConfigurationException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>() in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r3, r1) in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2) in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (Caused by ") in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5) in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")") in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8) in <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.Log4JLogger: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.Log4JLogger: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.Log4JLogger: void <init>(org.apache.log4j.Logger)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Warning - null logger in constructor; possible log4j misconfiguration.") in <org.apache.commons.logging.impl.Log4JLogger: void <init>(org.apache.log4j.Logger)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>() in <org.apache.commons.logging.impl.Log4JLogger: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<java.util.Hashtable: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable: void <init>()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable: void <init>()> ==> <java.lang.ref.ReferenceQueue: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null) in <org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>
SPECIAL edge: $z0 = specialinvoke r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r0) in <org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration elements()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration elements()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration elements()> ==> <java.util.Hashtable: java.util.Enumeration elements()>
STATIC edge: $r9 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>($r6) in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: r1 = specialinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <java.util.Hashtable: java.util.Set entrySet()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r11) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
INTERFACE edge: r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r11.<org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r9, r10, null) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>
SPECIAL edge: $r4 = specialinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration keys()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: r1 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration keys()> ==> <java.util.Hashtable: java.util.Enumeration keys()>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$1: void <init>(org.apache.commons.logging.impl.WeakHashtable,java.util.Enumeration)>(r0, r1) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration keys()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: void <init>(org.apache.commons.logging.impl.WeakHashtable,java.util.Enumeration)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: r1 = specialinvoke r0.<java.util.Hashtable: java.util.Set keySet()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <java.util.Hashtable: java.util.Set keySet()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r7) in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null keys are not allowed") in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null values are not allowed") in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r2.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: specialinvoke r2.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>
SPECIAL edge: $r8 = specialinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$1)>(r0, $r7, null) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$1)>
STATIC edge: $r6 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>(r5) in <org.apache.commons.logging.impl.WeakHashtable: void purgeOne()> ==> <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke r5.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Collection values()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Collection values()>() in <org.apache.commons.logging.impl.WeakHashtable: java.util.Collection values()> ==> <java.util.Hashtable: java.util.Collection values()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>
SPECIAL edge: $r3 = specialinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r2) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null) in <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: boolean isEmpty()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: $z0 = specialinvoke r0.<java.util.Hashtable: boolean isEmpty()>() in <org.apache.commons.logging.impl.WeakHashtable: boolean isEmpty()> ==> <java.util.Hashtable: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: int size()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.Hashtable: int size()>() in <org.apache.commons.logging.impl.WeakHashtable: int size()> ==> <java.util.Hashtable: int size()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.String toString()> ==> <org.apache.commons.logging.impl.WeakHashtable: void purge()>
SPECIAL edge: $r1 = specialinvoke r0.<java.util.Hashtable: java.lang.String toString()>() in <org.apache.commons.logging.impl.WeakHashtable: java.lang.String toString()> ==> <java.util.Hashtable: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()>
VIRTUAL edge: $r3 = virtualinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
VIRTUAL edge: $r4 = virtualinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
VIRTUAL edge: $r6 = virtualinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
VIRTUAL edge: $r7 = virtualinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
INTERFACE edge: $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
INTERFACE edge: $r9 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.logging.Level: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.logging.Level: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
VIRTUAL edge: $r4 = virtualinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object getValue()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.FieldPosition: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.SimpleDateFormat: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.ParsePosition: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.logging.Level: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.DateFormatSymbols: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.security.Timestamp: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.FieldPosition: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.SimpleDateFormat: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.ParsePosition: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.logging.Level: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.text.DateFormatSymbols: int hashCode()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()> ==> <java.security.Timestamp: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Entry.setValue is not supported.") in <org.apache.commons.logging.impl.WeakHashtable$Entry: java.lang.Object setValue(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
SPECIAL edge: r4 = specialinvoke r1.<org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke r1.<org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.logging.Level: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: boolean equals(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isDebugEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isErrorEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isFatalEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isInfoEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isTraceEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk14Logger: boolean isWarnEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.ServletContextCleaner: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: r4 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("release", $r3) in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r6 = virtualinvoke r17.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r2) in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which does not support release method!") in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which is not accessable!") in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance release method failed!") in <org.apache.commons.logging.impl.ServletContextCleaner: void contextDestroyed(javax.servlet.ServletContextEvent)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r60 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: r69 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: r70 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.Properties: java.util.Enumeration propertyNames()>
VIRTUAL edge: r72 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r71) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $z13 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r61) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' as specified by system property ") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r51.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r55 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Trying alternative implementations...") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r43.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r42.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r47 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] as specified by a system property.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r64, "UTF-8") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r41.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r64) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r40.<java.io.BufferedReader: void <init>(java.io.Reader)>($r41) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r67 = virtualinvoke r65.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke r65.<java.io.BufferedReader: void close()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: $z10 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r67) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r67) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" as specified by file \'") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' which was present in the path of the context classloader.") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r32.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r36 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Trying alternative implementations...") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r69) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $z2 = interfaceinvoke r70.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z2 = interfaceinvoke r70.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()>
INTERFACE edge: $r2 = interfaceinvoke r70.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r2 = interfaceinvoke r70.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()>
VIRTUAL edge: virtualinvoke r58.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>(r71, r72) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.Class)>(r1) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Releasing factory for classloader ") in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<org.apache.commons.logging.LogFactory: void release()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void release()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3) in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r5.<org.apache.commons.logging.LogFactory: void release()>() in <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void release()>
VIRTUAL edge: r3 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration elements()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <java.util.Hashtable: java.util.Enumeration elements()>
VIRTUAL edge: r3 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration elements()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration elements()>
VIRTUAL edge: virtualinvoke r0.<java.util.Hashtable: void clear()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()>
VIRTUAL edge: virtualinvoke r7.<org.apache.commons.logging.LogFactory: void release()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void release()>
VIRTUAL edge: virtualinvoke $r5.<org.apache.commons.logging.LogFactory: void release()>() in <org.apache.commons.logging.LogFactory: void releaseAll()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void release()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3) in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@") in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0) in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r38 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.net.URL: java.net.URLConnection openConnection()>
SPECIAL edge: specialinvoke $r2.<java.util.Properties: void <init>()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.util.Properties: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>(r37) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.util.Properties: void load(java.io.InputStream)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to close stream for URL ") in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to read URL ") in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to close stream for URL ") in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to close stream for URL ") in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while trying to find configuration file ") in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":") in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r14 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r14 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r14 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14) in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.NoOpLog: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.LogKitLogger: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<org.apache.log.Hierarchy: org.apache.log.Logger getLoggerFor(java.lang.String)>($r4) in <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()> ==> <org.apache.log.Hierarchy: org.apache.log.Logger getLoggerFor(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogKitLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2) in <org.apache.commons.logging.impl.LogKitLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>() in <org.apache.commons.logging.impl.LogKitLogger: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.LogFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Instance created.") in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Hashtable: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <init>()> ==> <java.util.Hashtable: void <init>()>
CLINIT edge: r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
STATIC edge: r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>
CLINIT edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)>($r6) in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>
CLINIT edge: $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> in <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Set keySet()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <java.util.Hashtable: java.util.Set keySet()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Set keySet()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Hashtable: int size()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <java.util.Hashtable: int size()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Hashtable: int size()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <org.apache.commons.logging.impl.WeakHashtable: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] getAttributeNames()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r11) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r11) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Releasing all known loggers") in <org.apache.commons.logging.impl.LogFactoryImpl: void release()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.util.Hashtable: void clear()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void release()> ==> <java.util.Hashtable: void clear()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void removeAttribute(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void removeAttribute(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("setAttribute: call too late; configuration already performed.") in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("use_tccl") in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void <init>(java.lang.String)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void debug(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void error(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void fatal(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void info(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isDebugEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isDebugEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isErrorEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isErrorEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isFatalEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isFatalEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isInfoEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isInfoEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isTraceEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isTraceEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isWarnEnabled()> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean isWarnEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void trace(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void warn(java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1) in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r0) in <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)>(r1) in <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Set keySet()>() in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <java.util.Hashtable: java.util.Set keySet()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Set keySet()>() in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>() in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <java.util.Hashtable: int size()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>() in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <org.apache.commons.logging.impl.WeakHashtable: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <org.apache.commons.logging.LogSource: java.lang.String[] getLogNames()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.Properties: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <java.util.Properties: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.util.Properties: void load(java.io.InputStream)>(r1) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <java.util.Properties: void load(java.io.InputStream)>
SPECIAL edge: specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r9) in <org.apache.commons.logging.impl.SimpleLog: void <clinit>()> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0) in <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14) in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r17.<java.lang.InstantiationError: void <init>(java.lang.String)>("Log4J 1.2 not available") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <java.lang.InstantiationError: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("TRACE") in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null) in <org.apache.commons.logging.impl.Log4JLogger: void <clinit>()> ==> <java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LogFactory from ") in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14) in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ") in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void <clinit>()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0) in <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0) in <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>(r1, r2) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>
PRIVILEGED edge: r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory$2: java.lang.Object run()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("An error occurred while loading the factory class:") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke r14.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Created object ") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to manage classloader ") in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r1) in <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)> ==> <java.io.PrintStream: void print(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r3) in <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.io.PrintStream: void flush()>() in <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>(r1, r2) in <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>
PRIVILEGED edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$3: java.lang.Object run()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$6: void <init>(java.lang.String,java.lang.String)>(r1, r2) in <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$6: void <init>(java.lang.String,java.lang.String)>
PRIVILEGED edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
INTERFACE edge: $z0 = interfaceinvoke r51.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke r51.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable$1: boolean hasMoreElements()>
INTERFACE edge: $r14 = interfaceinvoke r51.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r14 = interfaceinvoke r51.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable$1: java.lang.Object nextElement()>
VIRTUAL edge: r52 = virtualinvoke r16.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: r53 = virtualinvoke r16.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
SPECIAL edge: specialinvoke $r41.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Properties file found at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r15) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with priority ") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(double)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Properties file at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r15) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with priority ") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(double)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" overrides file at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r50) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with priority ") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(double)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Properties file at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r15) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with priority ") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(double)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not override file at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r50) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with priority ") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(double)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] No properties file of name \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' found.") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LOOKUP] Properties file of name \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' found at \'") in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r50) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34) in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" == \'") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Security forbids determining the system classloader.") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClassLoader tree:") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT") in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$1: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.LogFactory$1: void <init>()>
PRIVILEGED edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.LogFactory$1: java.lang.Object run()>
VIRTUAL edge: r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r1) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r4 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r20.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IllegalAccessException", $r11) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r8 = virtualinvoke $r22.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
VIRTUAL edge: $r10 = virtualinvoke $r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke $r21.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r10) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r83.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r82) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loaded class ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke r82.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r13 = virtualinvoke r82.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r16 = virtualinvoke r82.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r85 = virtualinvoke r82.<java.lang.Class: java.lang.Object newInstance()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r2 = virtualinvoke r82.<java.lang.Class: java.lang.Object newInstance()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from classloader ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Factory class ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" loaded from classloader ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not extend \'") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r84.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' as loaded by this classloader.") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r75.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to locate any class called \'") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' via classloader ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r80 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r79) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r64.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be loaded") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" via classloader ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - it depends on some other class that cannot be found.") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r39.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The application has specified that a custom LogFactory implementation ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("should be used but Class \'") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be converted to \'") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in incompatible classloaders. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Background can be found in http://commons.apache.org/logging/tech.html. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("If you have not explicitly specified a custom LogFactory then it is likely ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("that the container has set one without your knowledge. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("In this case, consider using the commons-logging-adapters.jar file or ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("specifying the standard LogFactory from the command line. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Please check the custom implementation. ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Help can be found @http://commons.apache.org/logging/troubleshooting.html.") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r52 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r46 = virtualinvoke $r90.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r51.<java.lang.ClassCastException: void <init>(java.lang.String)>($r52) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.ClassCastException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to load factory class via classloader ") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - trying the classloader associated with this LogFactory.") in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z4 = virtualinvoke $r92.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r82) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r36.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", $r33) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r34.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r33) in <org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.Hashtable: void <init>()>() in <org.apache.commons.logging.LogSource: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.SimpleLog$1: void <init>(java.lang.String)>(r1) in <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog$1: void <init>(java.lang.String)>
PRIVILEGED edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()>
VIRTUAL edge: r14 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r1) in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r4 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3) in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r8 = virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
VIRTUAL edge: $r10 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke $r19.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r10) in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: r12 = virtualinvoke $r18.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.impl.Log4JLogger: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>() in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r7) in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed") in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Application classpath (java.class.path): ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r32 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Security forbids determining the classloader for ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Class ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was loaded via classloader ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Ancestry of classloader which loaded ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32) in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is ") in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT") in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDERR") in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r0, 1) in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1) in <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()> ==> <java.io.PrintStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to get classloader for class \'") in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' due to security restrictions - ") in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>(r1) in <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> ==> <org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>
PRIVILEGED edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> ==> <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>(r1, r2) in <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>
PRIVILEGED edge: r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$4: java.lang.Object run()>
VIRTUAL edge: r27 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[CUSTOM LOG FACTORY] ") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[CUSTOM LOG FACTORY] ") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not implement LogFactory.") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r24 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r24 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r24 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ") in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r15.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18) in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.logging.impl.SimpleLog: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r41) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[TRACE] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[DEBUG] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[INFO] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARN] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ERROR] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[FATAL] ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke $r32.<java.util.Date: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.util.Date: void <init>()>
VIRTUAL edge: r41 = virtualinvoke $r35.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r32) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
VIRTUAL edge: $i1 = virtualinvoke $r24.<java.lang.String: int lastIndexOf(java.lang.String)>(".") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: r42 = virtualinvoke $r25.<java.lang.String: java.lang.String substring(int)>($i2) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i3 = virtualinvoke r42.<java.lang.String: int lastIndexOf(java.lang.String)>("/") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int)>($i4) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ") in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r5.<java.lang.Throwable: java.lang.String toString()>() in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r5.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r12) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
SPECIAL edge: specialinvoke $r11.<java.io.StringWriter: void <init>(int)>(1024) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.io.StringWriter: void <init>(int)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.io.PrintWriter: void <init>(java.io.Writer)>($r11) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.io.PrintWriter: void <init>(java.io.Writer)>
VIRTUAL edge: virtualinvoke $r12.<java.io.PrintWriter: void close()>() in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <java.io.PrintWriter: void close()>
VIRTUAL edge: virtualinvoke r6.<org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)>($r0) in <org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream err> in <org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9) in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i1) in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>() in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
SPECIAL edge: specialinvoke r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r7) in <org.apache.commons.logging.impl.WeakHashtable: void purge()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced getReferenced()>() in <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)> ==> <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced getReferenced()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object)>(r1, r2) in <org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable$1: void <init>(org.apache.commons.logging.impl.WeakHashtable,java.util.Enumeration)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>() in <org.apache.commons.logging.impl.WeakHashtable: void purgeOne()> ==> <java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
SPECIAL edge: specialinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r6) in <org.apache.commons.logging.impl.WeakHashtable: void purgeOne()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$1)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.Reference: java.lang.Object get()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object getValue()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r2) in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>(r2, r6, r10, r8) in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r2, r6, r10, r8, r7) in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.Throwable: void <init>()>() in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
VIRTUAL edge: r10 = virtualinvoke r9.<java.lang.StackTraceElement: java.lang.String getMethodName()>() in <org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StackTraceElement: java.lang.String getMethodName()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LogFactoryImpl@") in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from ") in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12) in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ") in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r1) in <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void flush()>() in <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)> ==> <java.io.PrintStream: void flush()>
SPECIAL edge: r17 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>(r3) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r17, $r7) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: r14 = virtualinvoke $r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke $r24.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r22) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r25.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r11) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()>
VIRTUAL edge: $r9 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r3.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r2, r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r6) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r7) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r8) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r3) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> ==> <java.util.logging.Logger: void log(java.util.logging.LogRecord)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$6: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.SimpleLog$1: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2) in <org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.text.FieldPosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.text.SimpleDateFormat: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.text.ParsePosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.logging.Level: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.text.DateFormatSymbols: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object)> ==> <java.security.Timestamp: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced,org.apache.commons.logging.impl.WeakHashtable$1)>(r2, r3, r0, null) in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced,org.apache.commons.logging.impl.WeakHashtable$1)>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.text.FieldPosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <org.apache.commons.logging.impl.WeakHashtable$Entry: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <org.apache.commons.logging.impl.WeakHashtable$Referenced: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.text.SimpleDateFormat: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.text.ParsePosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.logging.Level: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.text.DateFormatSymbols: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>() in <org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.security.Timestamp: int hashCode()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Discovering a Log implementation...") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r15) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: r17 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r1, r4, 1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r6, r1, "org.apache.commons.logging.impl.Log4JLogger") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r6, r1, "org.apache.commons.logging.impl.Jdk14Logger") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r6, r1, "org.apache.commons.logging.impl.Jdk13LumberjackLogger") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r6, r1, "org.apache.commons.logging.impl.SimpleLog") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("No user-specified Log implementation; performing discovery using the standard supported logging implementations...") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: r16 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r5, r4, 1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to load user-specified log class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'...") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>("User-specified log class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be found or is not useable.") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r10) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("No suitable Log implementation") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: r15 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.log", null) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: r15 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.Log", null) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $r18 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r17) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $r54 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r49) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r59) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>
STATIC edge: $r66 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $r77 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: r116 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r97 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: r116 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r4, 1, r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
STATIC edge: r115 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r29) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $r111 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $r18 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r17) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r49) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r59) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r66 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r77 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r97 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke $r0.<java.lang.Throwable: void <init>()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
SPECIAL edge: specialinvoke $r2.<java.io.StringWriter: void <init>()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.io.StringWriter: java.lang.StringBuffer getBuffer()>
SPECIAL edge: specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.io.PrintWriter: void <init>(java.io.Writer)>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r7, "\n") in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: r21 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: r21 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: r21 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: $r12 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r14 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $i0 = virtualinvoke r21.<java.lang.String: int indexOf(java.lang.String)>($r13) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r21.<java.lang.String: int indexOf(java.lang.String)>($r15) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r21.<java.lang.String: int indexOf(java.lang.String)>("at ") in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: i4 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(40) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r16 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(i3, i4) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: i5 = virtualinvoke r16.<java.lang.String: int lastIndexOf(int)>(46) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r17 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int,int)>(0, i5) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r18 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int)>($i6) in <org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced)>(r1, r2, r3) in <org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced,org.apache.commons.logging.impl.WeakHashtable$1)> ==> <org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced)>
SPECIAL edge: $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedContext", 1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>
SPECIAL edge: $z1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedDiscovery", 1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>
SPECIAL edge: $z2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedHierarchy", 1) in <org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.Log\'") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.log\'") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.log") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.Log\'") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.log\'") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r8) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.Log\' - ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.log\' - ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r15 = virtualinvoke r15.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r44.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to instantiate \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r48) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: r106 = specialinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r113) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r43) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r36) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r102) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r91) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>(r106, r116) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r82) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r71) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>(r4, r106, $r59) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>
SPECIAL edge: r106 = specialinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>(r106) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r12) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r58) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r21) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r107.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Trying to load \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r112 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r111) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke r4.<java.lang.String: java.lang.String replace(char,char)>(46, 47) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r114 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r114) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r37.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' [") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r114) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] cannot be found.") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' was found at \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r115) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r118 = virtualinvoke $r92.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r93.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not available via classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r98 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r97) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r100 = virtualinvoke r118.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r101 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r100) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r102 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r119 = virtualinvoke $r83.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r85.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not available via the LogFactoryImpl class classloader: ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r89 = virtualinvoke r119.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r104 = virtualinvoke r116.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
VIRTUAL edge: r120 = virtualinvoke r104.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
VIRTUAL edge: r122 = virtualinvoke $r72.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r73.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is missing dependencies when loaded via classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r78 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r77) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r80 = virtualinvoke r122.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r81 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r124 = virtualinvoke $r61.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r62.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is unable to initialize itself when loaded via classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r69 = virtualinvoke r124.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke r105.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setLogFactory", $r6) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r17 = virtualinvoke r105.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found method setLogFactory(LogFactory) in \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r50.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[INFO] \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not declare optional method ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setLogFactory(LogFactory)") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log adapter \'") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18) in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has been selected for use.") in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl> in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: r3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()>
STATIC edge: r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r7) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>
STATIC edge: $r7 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.impl.LogFactoryImpl") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl> in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $r70 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $r68 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r57) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>
STATIC edge: $r52 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r65) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: $r48 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r47) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>
STATIC edge: r65 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r64) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>
STATIC edge: $r64 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $r63 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $r33 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r57) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
STATIC edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, r1, 0, $i1) in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Did you mean \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?") in <org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$2: void <init>(java.lang.String,java.lang.String)>(r1, r2) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl$2: void <init>(java.lang.String,java.lang.String)>
PRIVILEGED edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>
SPECIAL edge: specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2) in <org.apache.commons.logging.impl.WeakHashtable$WeakKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$Referenced)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
SPECIAL edge: r2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)> ==> <java.lang.Boolean: boolean booleanValue()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
STATIC edge: $z6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: r38 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>(r1, null) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>
CLINIT edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.LogFactory: void <clinit>()>
SPECIAL edge: r4 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>(r3, r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke $r63.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.Class[] getInterfaces()>
VIRTUAL edge: $r44 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r14 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r56) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r42.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' was found in classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". It is bound to a Log interface which is not") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" the one loaded from classloader ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r54) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r62) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r39) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r27) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r19) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r10) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error while trying to output diagnostics about bad class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due to bad log hierarchy. ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r38 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r34 = virtualinvoke $r68.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r37.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r38) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: bad log hierarchy. ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r24 = virtualinvoke $r70.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context. ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r18) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARNING] Log class \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate Log \'") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' -- ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r12 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getLocalizedMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getLocalizedMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r25) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r35) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("... InvocationTargetException: ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r23 = virtualinvoke r16.<java.lang.Throwable: java.lang.String getLocalizedMessage()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getLocalizedMessage()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r27 = virtualinvoke r26.<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>
SPECIAL edge: specialinvoke $r28.<java.io.StringWriter: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r28.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r30.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r28, 1) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
VIRTUAL edge: virtualinvoke r27.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r30) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
SPECIAL edge: specialinvoke $r31.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("... ExceptionInInitializerError: ") in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)> ==> <org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$3: void <init>(org.apache.commons.logging.impl.LogFactoryImpl,java.lang.ClassLoader)>(r1, r2) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl$3: void <init>(org.apache.commons.logging.impl.LogFactoryImpl,java.lang.ClassLoader)>
PRIVILEGED edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl$3: java.lang.Object run()>
VIRTUAL edge: virtualinvoke r1.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[SECURITY] Unable to obtain parent classloader") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$1: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.impl.LogFactoryImpl$1: void <init>()>
PRIVILEGED edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.impl.LogFactoryImpl$1: java.lang.Object run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl$2: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Trying to get configuration for item ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r32) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r28) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r21) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r16) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r10) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r37) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r6) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Found LogFactory attribute [") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] for ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <org.apache.commons.logging.impl.WeakHashtable: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.security.Timestamp: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No LogFactory attribute found for ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Found system property [") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r38) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] for ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No system property found for property ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Security prevented reading system property ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No configuration defined for item ") in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: r3 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>(r3) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>
SPECIAL edge: r4 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>(r4) in <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl$3: void <init>(org.apache.commons.logging.impl.LogFactoryImpl,java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.logging.impl.LogFactoryImpl$1: void <init>()> ==> <java.lang.Object: void <init>()>
