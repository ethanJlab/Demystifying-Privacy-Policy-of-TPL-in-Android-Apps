<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<java.lang.Throwable: void printStackTrace()>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
<java.lang.Throwable: java.lang.String toString()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Object: void <init>()>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>
<java.lang.Object: void wait()>
<java.lang.Object: void wait(long)>
<java.lang.String: void <init>()>
<java.lang.String: void <init>(byte[])>
<java.lang.String: void <init>(byte[],int)>
<java.lang.String: void <init>(byte[],int,int)>
<java.lang.String: void <init>(byte[],int,int,int)>
<java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.lang.String: void <init>(byte[],java.lang.String)>
<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
<java.lang.String: void <init>(char[])>
<java.lang.String: void <init>(char[],int,int)>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.String: void <init>(java.lang.StringBuffer)>
<java.lang.String: void <init>(int[],int,int)>
<java.lang.String: void <init>(java.lang.StringBuilder)>
<java.lang.String: int compareToIgnoreCase(java.lang.String)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String copyValueOf(char[])>
<java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: void getBytes(int,int,byte[],int)>
<java.lang.String: byte[] getBytes()>
<java.lang.String: byte[] getBytes(java.lang.String)>
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<java.lang.String: void getChars(int,int,char[],int)>
<java.lang.String: int hashCode()>
<java.lang.String: int indexOf(int)>
<java.lang.String: int indexOf(int,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.String: int lastIndexOf(int)>
<java.lang.String: int lastIndexOf(int,int)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: char[] toCharArray()>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String toString()>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: java.lang.String trim()>
<java.lang.String: java.lang.String valueOf(char[])>
<java.lang.String: java.lang.String valueOf(char[],int,int)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: java.lang.String valueOf(double)>
<java.lang.String: java.lang.String valueOf(float)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(long)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.String: boolean matches(java.lang.String)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: java.lang.CharSequence subSequence(int,int)>
<java.lang.String: int codePointAt(int)>
<java.lang.String: int codePointBefore(int)>
<java.lang.String: int codePointCount(int,int)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: int offsetByCodePoints(int,int)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.lang.String: int compareTo(java.lang.Object)>
<java.lang.RuntimeException: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class[] getClasses()>
<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getFields()>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.lang.Class: int getModifiers()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.String getSimpleName()>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Class: boolean isArray()>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: boolean isMemberClass()>
<java.lang.Class: boolean isSynthetic()>
<java.lang.Class: java.lang.Object newInstance()>
<java.lang.Class: java.lang.String toString()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<java.lang.StringBuffer: void <init>()>
<java.lang.StringBuffer: void <init>(int)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>
<java.lang.StringBuffer: char charAt(int)>
<java.lang.StringBuffer: int codePointAt(int)>
<java.lang.StringBuffer: int codePointBefore(int)>
<java.lang.StringBuffer: int codePointCount(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>
<java.lang.StringBuffer: void ensureCapacity(int)>
<java.lang.StringBuffer: void getChars(int,int,char[],int)>
<java.lang.StringBuffer: int indexOf(java.lang.String,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>
<java.lang.StringBuffer: int offsetByCodePoints(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer reverse()>
<java.lang.StringBuffer: void setCharAt(int,char)>
<java.lang.StringBuffer: void setLength(int)>
<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>
<java.lang.StringBuffer: java.lang.String substring(int)>
<java.lang.StringBuffer: java.lang.String substring(int,int)>
<java.lang.StringBuffer: java.lang.String toString()>
<java.lang.StringBuffer: void trimToSize()>
<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>
<java.lang.StringBuffer: int indexOf(java.lang.String)>
<java.lang.StringBuffer: int length()>
<java.lang.StringBuffer: int capacity()>
<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.Appendable append(char)>
<java.lang.ClassNotFoundException: void <init>()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.ClassNotFoundException: java.lang.Throwable getException()>
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<java.lang.ClassFormatError: void <init>()>
<java.lang.ClassFormatError: void <init>(java.lang.String)>
<java.lang.LinkageError: void <init>()>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.lang.Error: void <init>()>
<java.lang.Error: void <init>(java.lang.String)>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.Float: void <init>(float)>
<java.lang.Float: void <init>(double)>
<java.lang.Float: void <init>(java.lang.String)>
<java.lang.Float: int compareTo(java.lang.Float)>
<java.lang.Float: byte byteValue()>
<java.lang.Float: double doubleValue()>
<java.lang.Float: boolean equals(java.lang.Object)>
<java.lang.Float: float floatValue()>
<java.lang.Float: int hashCode()>
<java.lang.Float: int intValue()>
<java.lang.Float: boolean isInfinite()>
<java.lang.Float: boolean isInfinite(float)>
<java.lang.Float: boolean isNaN()>
<java.lang.Float: boolean isNaN(float)>
<java.lang.Float: long longValue()>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: short shortValue()>
<java.lang.Float: java.lang.String toString()>
<java.lang.Float: java.lang.String toString(float)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: int compare(float,float)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.lang.Float: java.lang.String toHexString(float)>
<java.lang.Float: int compareTo(java.lang.Object)>
<java.lang.Double: void <init>(double)>
<java.lang.Double: void <init>(java.lang.String)>
<java.lang.Double: int compareTo(java.lang.Double)>
<java.lang.Double: byte byteValue()>
<java.lang.Double: double doubleValue()>
<java.lang.Double: boolean equals(java.lang.Object)>
<java.lang.Double: float floatValue()>
<java.lang.Double: int hashCode()>
<java.lang.Double: int intValue()>
<java.lang.Double: boolean isInfinite()>
<java.lang.Double: boolean isInfinite(double)>
<java.lang.Double: boolean isNaN()>
<java.lang.Double: boolean isNaN(double)>
<java.lang.Double: long longValue()>
<java.lang.Double: double parseDouble(java.lang.String)>
<java.lang.Double: short shortValue()>
<java.lang.Double: java.lang.String toString()>
<java.lang.Double: java.lang.String toString(double)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: int compare(double,double)>
<java.lang.Double: java.lang.Double valueOf(double)>
<java.lang.Double: java.lang.String toHexString(double)>
<java.lang.Double: int compareTo(java.lang.Object)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.AssertionError: void <init>(boolean)>
<java.lang.AssertionError: void <init>(char)>
<java.lang.AssertionError: void <init>(int)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.AssertionError: void <init>(float)>
<java.lang.AssertionError: void <init>(double)>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: void <init>(java.lang.String)>
<java.lang.Integer: byte byteValue()>
<java.lang.Integer: int compareTo(java.lang.Integer)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: double doubleValue()>
<java.lang.Integer: boolean equals(java.lang.Object)>
<java.lang.Integer: float floatValue()>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<java.lang.Integer: int hashCode()>
<java.lang.Integer: int intValue()>
<java.lang.Integer: long longValue()>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: short shortValue()>
<java.lang.Integer: java.lang.String toBinaryString(int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Integer: java.lang.String toOctalString(int)>
<java.lang.Integer: java.lang.String toString()>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>
<java.lang.Integer: int highestOneBit(int)>
<java.lang.Integer: int lowestOneBit(int)>
<java.lang.Integer: int numberOfLeadingZeros(int)>
<java.lang.Integer: int numberOfTrailingZeros(int)>
<java.lang.Integer: int bitCount(int)>
<java.lang.Integer: int rotateLeft(int,int)>
<java.lang.Integer: int rotateRight(int,int)>
<java.lang.Integer: int reverseBytes(int)>
<java.lang.Integer: int reverse(int)>
<java.lang.Integer: int signum(int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: int compareTo(java.lang.Object)>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.lang.Character: void <init>(char)>
<java.lang.Character: char charValue()>
<java.lang.Character: int compareTo(java.lang.Character)>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.lang.Character: boolean isValidCodePoint(int)>
<java.lang.Character: boolean isSupplementaryCodePoint(int)>
<java.lang.Character: boolean isHighSurrogate(char)>
<java.lang.Character: boolean isLowSurrogate(char)>
<java.lang.Character: boolean isSurrogatePair(char,char)>
<java.lang.Character: int charCount(int)>
<java.lang.Character: int toCodePoint(char,char)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.lang.Character: int codePointAt(char[],int)>
<java.lang.Character: int codePointAt(char[],int,int)>
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>
<java.lang.Character: int codePointBefore(char[],int)>
<java.lang.Character: int codePointBefore(char[],int,int)>
<java.lang.Character: int toChars(int,char[],int)>
<java.lang.Character: char[] toChars(int)>
<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>
<java.lang.Character: int codePointCount(char[],int,int)>
<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>
<java.lang.Character: int digit(char,int)>
<java.lang.Character: int digit(int,int)>
<java.lang.Character: boolean equals(java.lang.Object)>
<java.lang.Character: char forDigit(int,int)>
<java.lang.Character: int getNumericValue(char)>
<java.lang.Character: int getNumericValue(int)>
<java.lang.Character: int getType(char)>
<java.lang.Character: int getType(int)>
<java.lang.Character: byte getDirectionality(char)>
<java.lang.Character: byte getDirectionality(int)>
<java.lang.Character: boolean isMirrored(char)>
<java.lang.Character: boolean isMirrored(int)>
<java.lang.Character: int hashCode()>
<java.lang.Character: boolean isDefined(char)>
<java.lang.Character: boolean isDefined(int)>
<java.lang.Character: boolean isDigit(char)>
<java.lang.Character: boolean isDigit(int)>
<java.lang.Character: boolean isIdentifierIgnorable(char)>
<java.lang.Character: boolean isIdentifierIgnorable(int)>
<java.lang.Character: boolean isISOControl(char)>
<java.lang.Character: boolean isISOControl(int)>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.lang.Character: boolean isJavaIdentifierPart(int)>
<java.lang.Character: boolean isJavaIdentifierStart(char)>
<java.lang.Character: boolean isJavaIdentifierStart(int)>
<java.lang.Character: boolean isJavaLetter(char)>
<java.lang.Character: boolean isJavaLetterOrDigit(char)>
<java.lang.Character: boolean isLetter(char)>
<java.lang.Character: boolean isLetter(int)>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.Character: boolean isLetterOrDigit(int)>
<java.lang.Character: boolean isLowerCase(char)>
<java.lang.Character: boolean isLowerCase(int)>
<java.lang.Character: boolean isSpace(char)>
<java.lang.Character: boolean isSpaceChar(char)>
<java.lang.Character: boolean isSpaceChar(int)>
<java.lang.Character: boolean isTitleCase(char)>
<java.lang.Character: boolean isTitleCase(int)>
<java.lang.Character: boolean isUnicodeIdentifierPart(char)>
<java.lang.Character: boolean isUnicodeIdentifierPart(int)>
<java.lang.Character: boolean isUnicodeIdentifierStart(char)>
<java.lang.Character: boolean isUnicodeIdentifierStart(int)>
<java.lang.Character: boolean isUpperCase(char)>
<java.lang.Character: boolean isUpperCase(int)>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.Character: boolean isWhitespace(int)>
<java.lang.Character: char reverseBytes(char)>
<java.lang.Character: char toLowerCase(char)>
<java.lang.Character: int toLowerCase(int)>
<java.lang.Character: java.lang.String toString()>
<java.lang.Character: java.lang.String toString(char)>
<java.lang.Character: char toTitleCase(char)>
<java.lang.Character: int toTitleCase(int)>
<java.lang.Character: char toUpperCase(char)>
<java.lang.Character: int toUpperCase(int)>
<java.lang.Character: int compareTo(java.lang.Object)>
<java.lang.Long: void <init>(long)>
<java.lang.Long: void <init>(java.lang.String)>
<java.lang.Long: byte byteValue()>
<java.lang.Long: int compareTo(java.lang.Long)>
<java.lang.Long: java.lang.Long decode(java.lang.String)>
<java.lang.Long: double doubleValue()>
<java.lang.Long: boolean equals(java.lang.Object)>
<java.lang.Long: float floatValue()>
<java.lang.Long: java.lang.Long getLong(java.lang.String)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>
<java.lang.Long: int hashCode()>
<java.lang.Long: int intValue()>
<java.lang.Long: long longValue()>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.lang.Long: short shortValue()>
<java.lang.Long: java.lang.String toBinaryString(long)>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: java.lang.String toOctalString(long)>
<java.lang.Long: java.lang.String toString()>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>
<java.lang.Long: long highestOneBit(long)>
<java.lang.Long: long lowestOneBit(long)>
<java.lang.Long: int numberOfLeadingZeros(long)>
<java.lang.Long: int numberOfTrailingZeros(long)>
<java.lang.Long: int bitCount(long)>
<java.lang.Long: long rotateLeft(long,int)>
<java.lang.Long: long rotateRight(long,int)>
<java.lang.Long: long reverseBytes(long)>
<java.lang.Long: long reverse(long)>
<java.lang.Long: int signum(long)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: int compareTo(java.lang.Object)>
<java.lang.Short: void <init>(java.lang.String)>
<java.lang.Short: void <init>(short)>
<java.lang.Short: byte byteValue()>
<java.lang.Short: int compareTo(java.lang.Short)>
<java.lang.Short: java.lang.Short decode(java.lang.String)>
<java.lang.Short: double doubleValue()>
<java.lang.Short: boolean equals(java.lang.Object)>
<java.lang.Short: float floatValue()>
<java.lang.Short: int hashCode()>
<java.lang.Short: int intValue()>
<java.lang.Short: long longValue()>
<java.lang.Short: short parseShort(java.lang.String)>
<java.lang.Short: short parseShort(java.lang.String,int)>
<java.lang.Short: short shortValue()>
<java.lang.Short: java.lang.String toString()>
<java.lang.Short: java.lang.String toString(short)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>
<java.lang.Short: short reverseBytes(short)>
<java.lang.Short: java.lang.Short valueOf(short)>
<java.lang.Short: int compareTo(java.lang.Object)>
<java.lang.Boolean: void <init>(java.lang.String)>
<java.lang.Boolean: void <init>(boolean)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.Boolean: boolean equals(java.lang.Object)>
<java.lang.Boolean: int compareTo(java.lang.Boolean)>
<java.lang.Boolean: int hashCode()>
<java.lang.Boolean: java.lang.String toString()>
<java.lang.Boolean: boolean getBoolean(java.lang.String)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: int compareTo(java.lang.Object)>
<java.lang.Byte: void <init>(byte)>
<java.lang.Byte: void <init>(java.lang.String)>
<java.lang.Byte: byte byteValue()>
<java.lang.Byte: int compareTo(java.lang.Byte)>
<java.lang.Byte: java.lang.Byte decode(java.lang.String)>
<java.lang.Byte: double doubleValue()>
<java.lang.Byte: boolean equals(java.lang.Object)>
<java.lang.Byte: float floatValue()>
<java.lang.Byte: int hashCode()>
<java.lang.Byte: int intValue()>
<java.lang.Byte: long longValue()>
<java.lang.Byte: byte parseByte(java.lang.String)>
<java.lang.Byte: byte parseByte(java.lang.String,int)>
<java.lang.Byte: short shortValue()>
<java.lang.Byte: java.lang.String toString()>
<java.lang.Byte: java.lang.String toString(byte)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.lang.Byte: int compareTo(java.lang.Object)>
<java.lang.NoClassDefFoundError: void <init>()>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.StackOverflowError: void <init>()>
<java.lang.StackOverflowError: void <init>(java.lang.String)>
<java.lang.AbstractMethodError: void <init>()>
<java.lang.AbstractMethodError: void <init>(java.lang.String)>
<java.lang.IncompatibleClassChangeError: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.lang.VerifyError: void <init>()>
<java.lang.VerifyError: void <init>(java.lang.String)>
<java.lang.NoSuchFieldError: void <init>()>
<java.lang.NoSuchFieldError: void <init>(java.lang.String)>
<java.lang.IllegalMonitorStateException: void <init>()>
<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>
<java.lang.Thread: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<java.lang.Thread: int activeCount()>
<java.lang.Thread: void checkAccess()>
<java.lang.Thread: int countStackFrames()>
<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: void destroy()>
<java.lang.Thread: void dumpStack()>
<java.lang.Thread: int enumerate(java.lang.Thread[])>
<java.lang.Thread: java.util.Map getAllStackTraces()>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
<java.lang.Thread: long getId()>
<java.lang.Thread: java.lang.String getName()>
<java.lang.Thread: int getPriority()>
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Thread: java.lang.Thread$State getState()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>
<java.lang.Thread: void interrupt()>
<java.lang.Thread: boolean interrupted()>
<java.lang.Thread: boolean isAlive()>
<java.lang.Thread: boolean isDaemon()>
<java.lang.Thread: boolean isInterrupted()>
<java.lang.Thread: void join()>
<java.lang.Thread: void join(long)>
<java.lang.Thread: void join(long,int)>
<java.lang.Thread: void resume()>
<java.lang.Thread: void run()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.Thread: void setName(java.lang.String)>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.Thread: void sleep(long)>
<java.lang.Thread: void sleep(long,int)>
<java.lang.Thread: void start()>
<java.lang.Thread: void stop()>
<java.lang.Thread: void stop(java.lang.Throwable)>
<java.lang.Thread: void suspend()>
<java.lang.Thread: java.lang.String toString()>
<java.lang.Thread: void yield()>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<java.lang.UnknownError: void <init>()>
<java.lang.UnknownError: void <init>(java.lang.String)>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(java.lang.String)>
<java.lang.ArithmeticException: void <init>()>
<java.lang.ArithmeticException: void <init>(java.lang.String)>
<java.lang.NegativeArraySizeException: void <init>()>
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>
<java.lang.ClassCircularityError: void <init>()>
<java.lang.ClassCircularityError: void <init>(java.lang.String)>
<java.lang.NoSuchMethodError: void <init>()>
<java.lang.NoSuchMethodError: void <init>(java.lang.String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.ThreadDeath: void <init>()>
<java.lang.InstantiationError: void <init>()>
<java.lang.InstantiationError: void <init>(java.lang.String)>
<java.lang.IllegalAccessError: void <init>()>
<java.lang.IllegalAccessError: void <init>(java.lang.String)>
<java.lang.UnsatisfiedLinkError: void <init>()>
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.lang.ArrayStoreException: void <init>()>
<java.lang.ArrayStoreException: void <init>(java.lang.String)>
<java.lang.ExceptionInInitializerError: void <init>()>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>
<java.lang.OutOfMemoryError: void <init>()>
<java.lang.OutOfMemoryError: void <init>(java.lang.String)>
<com.facebook.AccessToken$1: void onSuccess(org.json.JSONObject)>
<com.facebook.AccessToken$1: void onFailure(com.facebook.FacebookException)>
<com.facebook.AccessToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Collection,java.util.Collection,com.facebook.AccessTokenSource,java.util.Date,java.util.Date)>
<com.facebook.AccessToken: com.facebook.AccessToken getCurrentAccessToken()>
<com.facebook.AccessToken: void setCurrentAccessToken(com.facebook.AccessToken)>
<com.facebook.AccessToken: void refreshCurrentAccessTokenAsync()>
<com.facebook.AccessToken: void refreshCurrentAccessTokenAsync(com.facebook.AccessToken$AccessTokenRefreshCallback)>
<com.facebook.AccessToken: java.lang.String getToken()>
<com.facebook.AccessToken: java.util.Date getExpires()>
<com.facebook.AccessToken: java.util.Set getPermissions()>
<com.facebook.AccessToken: java.util.Set getDeclinedPermissions()>
<com.facebook.AccessToken: com.facebook.AccessTokenSource getSource()>
<com.facebook.AccessToken: java.util.Date getLastRefresh()>
<com.facebook.AccessToken: java.lang.String getApplicationId()>
<com.facebook.AccessToken: java.lang.String getUserId()>
<com.facebook.AccessToken: void createFromNativeLinkingIntent(android.content.Intent,java.lang.String,com.facebook.AccessToken$AccessTokenCreationCallback)>
<com.facebook.AccessToken: java.lang.String toString()>
<com.facebook.AccessToken: boolean equals(java.lang.Object)>
<com.facebook.AccessToken: int hashCode()>
<com.facebook.AccessToken: boolean isExpired()>
<com.facebook.AccessToken: int describeContents()>
<com.facebook.AccessToken: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void <init>()>
<android.os.Bundle: void <init>(java.lang.ClassLoader)>
<android.os.Bundle: void <init>(int)>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.os.Bundle: java.lang.Object clone()>
<android.os.Bundle: int size()>
<android.os.Bundle: boolean isEmpty()>
<android.os.Bundle: void clear()>
<android.os.Bundle: boolean containsKey(java.lang.String)>
<android.os.Bundle: java.lang.Object get(java.lang.String)>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.os.Bundle: java.util.Set keySet()>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.os.Bundle: void putBoolean(java.lang.String,boolean)>
<android.os.Bundle: void putByte(java.lang.String,byte)>
<android.os.Bundle: void putChar(java.lang.String,char)>
<android.os.Bundle: void putShort(java.lang.String,short)>
<android.os.Bundle: void putInt(java.lang.String,int)>
<android.os.Bundle: void putLong(java.lang.String,long)>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: void putDouble(java.lang.String,double)>
<android.os.Bundle: void putString(java.lang.String,java.lang.String)>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
<android.os.Bundle: void putIntArray(java.lang.String,int[])>
<android.os.Bundle: void putLongArray(java.lang.String,long[])>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: boolean getBoolean(java.lang.String)>
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.Bundle: byte getByte(java.lang.String)>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.os.Bundle: char getChar(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<android.os.Bundle: short getShort(java.lang.String)>
<android.os.Bundle: short getShort(java.lang.String,short)>
<android.os.Bundle: int getInt(java.lang.String)>
<android.os.Bundle: int getInt(java.lang.String,int)>
<android.os.Bundle: long getLong(java.lang.String)>
<android.os.Bundle: long getLong(java.lang.String,long)>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: double getDouble(java.lang.String)>
<android.os.Bundle: double getDouble(java.lang.String,double)>
<android.os.Bundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.os.Bundle: int[] getIntArray(java.lang.String)>
<android.os.Bundle: long[] getLongArray(java.lang.String)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<android.os.Bundle: double[] getDoubleArray(java.lang.String)>
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
<android.os.Bundle: int describeContents()>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.os.Bundle: java.lang.String toString()>
<org.json.JSONObject: void <init>()>
<org.json.JSONObject: void <init>(java.util.Map)>
<org.json.JSONObject: void <init>(org.json.JSONTokener)>
<org.json.JSONObject: void <init>(java.lang.String)>
<org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])>
<org.json.JSONObject: int length()>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>
<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>
<org.json.JSONObject: java.lang.Object remove(java.lang.String)>
<org.json.JSONObject: boolean isNull(java.lang.String)>
<org.json.JSONObject: boolean has(java.lang.String)>
<org.json.JSONObject: java.lang.Object get(java.lang.String)>
<org.json.JSONObject: java.lang.Object opt(java.lang.String)>
<org.json.JSONObject: boolean getBoolean(java.lang.String)>
<org.json.JSONObject: boolean optBoolean(java.lang.String)>
<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>
<org.json.JSONObject: double getDouble(java.lang.String)>
<org.json.JSONObject: double optDouble(java.lang.String)>
<org.json.JSONObject: double optDouble(java.lang.String,double)>
<org.json.JSONObject: int getInt(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String,int)>
<org.json.JSONObject: long getLong(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String,long)>
<org.json.JSONObject: java.lang.String getString(java.lang.String)>
<org.json.JSONObject: java.lang.String optString(java.lang.String)>
<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)>
<org.json.JSONObject: java.util.Iterator keys()>
<org.json.JSONObject: org.json.JSONArray names()>
<org.json.JSONObject: java.lang.String toString()>
<org.json.JSONObject: java.lang.String toString(int)>
<org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>
<org.json.JSONObject: java.lang.String quote(java.lang.String)>
<com.facebook.FacebookException: void <init>()>
<com.facebook.FacebookException: void <init>(java.lang.String)>
<com.facebook.FacebookException: void <init>(java.lang.String,java.lang.Object[])>
<com.facebook.FacebookException: void <init>(java.lang.String,java.lang.Throwable)>
<com.facebook.FacebookException: void <init>(java.lang.Throwable)>
<com.facebook.FacebookException: java.lang.String toString()>
<org.json.JSONException: void <init>(java.lang.String)>
<com.facebook.AccessTokenSource: com.facebook.AccessTokenSource[] values()>
<com.facebook.AccessTokenSource: com.facebook.AccessTokenSource valueOf(java.lang.String)>
<android.content.Intent: void <init>()>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>
<android.content.Intent: java.lang.Object clone()>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: java.lang.String getScheme()>
<android.content.Intent: java.lang.String getType()>
<android.content.Intent: java.lang.String resolveType(android.content.Context)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.content.Intent: java.util.Set getCategories()>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: android.os.Bundle getExtras()>
<android.content.Intent: int getFlags()>
<android.content.Intent: java.lang.String getPackage()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: int filterHashCode()>
<android.content.Intent: java.lang.String toString()>
<android.content.Intent: java.lang.String toURI()>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: int describeContents()>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Parcel: void recycle()>
<android.os.Parcel: void writeByteArray(byte[])>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: void writeCharArray(char[])>
<android.os.Parcel: char[] createCharArray()>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: void writeIntArray(int[])>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void writeLongArray(long[])>
<android.os.Parcel: long[] createLongArray()>
<android.os.Parcel: void readLongArray(long[])>
<android.os.Parcel: void writeFloatArray(float[])>
<android.os.Parcel: float[] createFloatArray()>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.os.Parcel: double[] createDoubleArray()>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.os.Parcel: void writeNoException()>
<android.os.Parcel: void readException()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<com.facebook.FacebookSdk: void <init>()>
<com.facebook.FacebookSdk: void sdkInitialize(android.content.Context,int)>
<com.facebook.FacebookSdk: void sdkInitialize(android.content.Context,int,com.facebook.FacebookSdk$InitializeCallback)>
<com.facebook.FacebookSdk: void sdkInitialize(android.content.Context)>
<com.facebook.FacebookSdk: void sdkInitialize(android.content.Context,com.facebook.FacebookSdk$InitializeCallback)>
<com.facebook.FacebookSdk: boolean isInitialized()>
<com.facebook.FacebookSdk: java.util.Set getLoggingBehaviors()>
<com.facebook.FacebookSdk: void addLoggingBehavior(com.facebook.LoggingBehavior)>
<com.facebook.FacebookSdk: void removeLoggingBehavior(com.facebook.LoggingBehavior)>
<com.facebook.FacebookSdk: void clearLoggingBehaviors()>
<com.facebook.FacebookSdk: boolean isLoggingBehaviorEnabled(com.facebook.LoggingBehavior)>
<com.facebook.FacebookSdk: boolean isDebugEnabled()>
<com.facebook.FacebookSdk: void setIsDebugEnabled(boolean)>
<com.facebook.FacebookSdk: boolean isLegacyTokenUpgradeSupported()>
<com.facebook.FacebookSdk: void setLegacyTokenUpgradeSupported(boolean)>
<com.facebook.FacebookSdk: java.util.concurrent.Executor getExecutor()>
<com.facebook.FacebookSdk: void setExecutor(java.util.concurrent.Executor)>
<com.facebook.FacebookSdk: java.lang.String getFacebookDomain()>
<com.facebook.FacebookSdk: void setFacebookDomain(java.lang.String)>
<com.facebook.FacebookSdk: android.content.Context getApplicationContext()>
<com.facebook.FacebookSdk: void publishInstallAsync(android.content.Context,java.lang.String)>
<com.facebook.FacebookSdk: java.lang.String getSdkVersion()>
<com.facebook.FacebookSdk: boolean getLimitEventAndDataUsage(android.content.Context)>
<com.facebook.FacebookSdk: void setLimitEventAndDataUsage(android.content.Context,boolean)>
<com.facebook.FacebookSdk: long getOnProgressThreshold()>
<com.facebook.FacebookSdk: void setOnProgressThreshold(long)>
<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>
<com.facebook.FacebookSdk: java.lang.String getApplicationId()>
<com.facebook.FacebookSdk: void setApplicationId(java.lang.String)>
<com.facebook.FacebookSdk: java.lang.String getApplicationName()>
<com.facebook.FacebookSdk: void setApplicationName(java.lang.String)>
<com.facebook.FacebookSdk: java.lang.String getClientToken()>
<com.facebook.FacebookSdk: void setClientToken(java.lang.String)>
<com.facebook.FacebookSdk: int getWebDialogTheme()>
<com.facebook.FacebookSdk: void setWebDialogTheme(int)>
<com.facebook.FacebookSdk: java.io.File getCacheDir()>
<com.facebook.FacebookSdk: void setCacheDir(java.io.File)>
<com.facebook.FacebookSdk: int getCallbackRequestCodeOffset()>
<com.facebook.FacebookSdk: boolean isFacebookRequestCode(int)>
<com.facebook.internal.Validate: void <init>()>
<com.facebook.internal.Validate: void notNull(java.lang.Object,java.lang.String)>
<com.facebook.internal.Validate: void notEmpty(java.util.Collection,java.lang.String)>
<com.facebook.internal.Validate: void containsNoNulls(java.util.Collection,java.lang.String)>
<com.facebook.internal.Validate: void containsNoNullOrEmpty(java.util.Collection,java.lang.String)>
<com.facebook.internal.Validate: void notEmptyAndContainsNoNulls(java.util.Collection,java.lang.String)>
<com.facebook.internal.Validate: void runningOnUiThread()>
<com.facebook.internal.Validate: void notNullOrEmpty(java.lang.String,java.lang.String)>
<com.facebook.internal.Validate: void oneOf(java.lang.Object,java.lang.String,java.lang.Object[])>
<com.facebook.internal.Validate: void sdkInitialized()>
<com.facebook.internal.Validate: java.lang.String hasAppID()>
<com.facebook.internal.Validate: java.lang.String hasClientToken()>
<com.facebook.internal.Validate: void hasInternetPermissions(android.content.Context)>
<com.facebook.internal.Validate: void hasInternetPermissions(android.content.Context,boolean)>
<com.facebook.internal.Validate: void hasFacebookActivity(android.content.Context)>
<com.facebook.internal.Validate: void hasFacebookActivity(android.content.Context,boolean)>
<com.facebook.internal.Validate: void checkCustomTabRedirectActivity(android.content.Context)>
<com.facebook.internal.Validate: void checkCustomTabRedirectActivity(android.content.Context,boolean)>
<com.facebook.internal.Validate: boolean hasCustomTabRedirectActivity(android.content.Context)>
<com.facebook.internal.Validate: void hasContentProvider(android.content.Context)>
<com.facebook.LoggingBehavior: com.facebook.LoggingBehavior[] values()>
<com.facebook.LoggingBehavior: com.facebook.LoggingBehavior valueOf(java.lang.String)>
<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>
<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>
<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>
<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>
<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>
<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>
<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>
<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>
<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>
<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>
<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>
<android.text.TextUtils: boolean isGraphic(char)>
<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>
<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>
<com.facebook.AccessToken$2: com.facebook.AccessToken createFromParcel(android.os.Parcel)>
<com.facebook.AccessToken$2: com.facebook.AccessToken[] newArray(int)>
<com.facebook.AccessToken$2: java.lang.Object[] newArray(int)>
<com.facebook.AccessToken$2: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.LegacyTokenHelper: void <init>(android.content.Context)>
<com.facebook.LegacyTokenHelper: void <init>(android.content.Context,java.lang.String)>
<com.facebook.LegacyTokenHelper: android.os.Bundle load()>
<com.facebook.LegacyTokenHelper: void save(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void clear()>
<com.facebook.LegacyTokenHelper: boolean hasTokenInformation(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: java.lang.String getToken(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putToken(android.os.Bundle,java.lang.String)>
<com.facebook.LegacyTokenHelper: java.util.Date getExpirationDate(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putExpirationDate(android.os.Bundle,java.util.Date)>
<com.facebook.LegacyTokenHelper: long getExpirationMilliseconds(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putExpirationMilliseconds(android.os.Bundle,long)>
<com.facebook.LegacyTokenHelper: java.util.Set getPermissions(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putPermissions(android.os.Bundle,java.util.Collection)>
<com.facebook.LegacyTokenHelper: void putDeclinedPermissions(android.os.Bundle,java.util.Collection)>
<com.facebook.LegacyTokenHelper: com.facebook.AccessTokenSource getSource(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putSource(android.os.Bundle,com.facebook.AccessTokenSource)>
<com.facebook.LegacyTokenHelper: java.util.Date getLastRefreshDate(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putLastRefreshDate(android.os.Bundle,java.util.Date)>
<com.facebook.LegacyTokenHelper: long getLastRefreshMilliseconds(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putLastRefreshMilliseconds(android.os.Bundle,long)>
<com.facebook.LegacyTokenHelper: java.lang.String getApplicationId(android.os.Bundle)>
<com.facebook.LegacyTokenHelper: void putApplicationId(android.os.Bundle,java.lang.String)>
<com.facebook.internal.Utility: void <init>()>
<com.facebook.internal.Utility: int[] intersectRanges(int[],int[])>
<com.facebook.internal.Utility: boolean isSubset(java.util.Collection,java.util.Collection)>
<com.facebook.internal.Utility: boolean isNullOrEmpty(java.util.Collection)>
<com.facebook.internal.Utility: boolean isNullOrEmpty(java.lang.String)>
<com.facebook.internal.Utility: java.lang.String coerceValueIfNullOrEmpty(java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: java.util.Collection unmodifiableCollection(java.lang.Object[])>
<com.facebook.internal.Utility: java.util.ArrayList arrayList(java.lang.Object[])>
<com.facebook.internal.Utility: java.util.HashSet hashSet(java.lang.Object[])>
<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>
<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>
<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>
<com.facebook.internal.Utility: android.net.Uri buildUri(java.lang.String,java.lang.String,android.os.Bundle)>
<com.facebook.internal.Utility: android.os.Bundle parseUrlQueryString(java.lang.String)>
<com.facebook.internal.Utility: void putNonEmptyString(android.os.Bundle,java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: void putCommaSeparatedStringList(android.os.Bundle,java.lang.String,java.util.List)>
<com.facebook.internal.Utility: void putUri(android.os.Bundle,java.lang.String,android.net.Uri)>
<com.facebook.internal.Utility: boolean putJSONValueInBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.Utility: void closeQuietly(java.io.Closeable)>
<com.facebook.internal.Utility: void disconnectQuietly(java.net.URLConnection)>
<com.facebook.internal.Utility: java.lang.String getMetadataApplicationId(android.content.Context)>
<com.facebook.internal.Utility: java.lang.Object getStringPropertyAsJSON(org.json.JSONObject,java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: java.lang.String readStreamToString(java.io.InputStream)>
<com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
<com.facebook.internal.Utility: boolean stringsEqualOrEmpty(java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: void clearFacebookCookies(android.content.Context)>
<com.facebook.internal.Utility: void logd(java.lang.String,java.lang.Exception)>
<com.facebook.internal.Utility: void logd(java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: void logd(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.facebook.internal.Utility: boolean areObjectsEqual(java.lang.Object,java.lang.Object)>
<com.facebook.internal.Utility: boolean hasSameId(org.json.JSONObject,org.json.JSONObject)>
<com.facebook.internal.Utility: void loadAppSettingsAsync(android.content.Context,java.lang.String)>
<com.facebook.internal.Utility: com.facebook.internal.Utility$FetchedAppSettings getAppSettingsWithoutQuery(java.lang.String)>
<com.facebook.internal.Utility: com.facebook.internal.Utility$FetchedAppSettings queryAppSettings(java.lang.String,boolean)>
<com.facebook.internal.Utility: com.facebook.internal.Utility$DialogFeatureConfig getDialogFeatureConfig(java.lang.String,java.lang.String,java.lang.String)>
<com.facebook.internal.Utility: java.lang.String safeGetStringFromResponse(org.json.JSONObject,java.lang.String)>
<com.facebook.internal.Utility: org.json.JSONObject tryGetJSONObjectFromResponse(org.json.JSONObject,java.lang.String)>
<com.facebook.internal.Utility: org.json.JSONArray tryGetJSONArrayFromResponse(org.json.JSONObject,java.lang.String)>
<com.facebook.internal.Utility: void clearCaches(android.content.Context)>
<com.facebook.internal.Utility: void deleteDirectory(java.io.File)>
<com.facebook.internal.Utility: java.util.List asListNoNulls(java.lang.Object[])>
<com.facebook.internal.Utility: java.util.List jsonArrayToStringList(org.json.JSONArray)>
<com.facebook.internal.Utility: java.util.Set jsonArrayToSet(org.json.JSONArray)>
<com.facebook.internal.Utility: void setAppEventAttributionParameters(org.json.JSONObject,com.facebook.internal.AttributionIdentifiers,java.lang.String,boolean)>
<com.facebook.internal.Utility: void setAppEventExtendedDeviceInfoParameters(org.json.JSONObject,android.content.Context)>
<com.facebook.internal.Utility: java.lang.reflect.Method getMethodQuietly(java.lang.Class,java.lang.String,java.lang.Class[])>
<com.facebook.internal.Utility: java.lang.reflect.Method getMethodQuietly(java.lang.String,java.lang.String,java.lang.Class[])>
<com.facebook.internal.Utility: java.lang.Object invokeMethodQuietly(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
<com.facebook.internal.Utility: java.lang.String getActivityName(android.content.Context)>
<com.facebook.internal.Utility: java.util.List filter(java.util.List,com.facebook.internal.Utility$Predicate)>
<com.facebook.internal.Utility: java.util.List map(java.util.List,com.facebook.internal.Utility$Mapper)>
<com.facebook.internal.Utility: java.lang.String getUriString(android.net.Uri)>
<com.facebook.internal.Utility: boolean isWebUri(android.net.Uri)>
<com.facebook.internal.Utility: boolean isContentUri(android.net.Uri)>
<com.facebook.internal.Utility: boolean isFileUri(android.net.Uri)>
<com.facebook.internal.Utility: long getContentSize(android.net.Uri)>
<com.facebook.internal.Utility: java.util.Date getBundleLongAsDate(android.os.Bundle,java.lang.String,java.util.Date)>
<com.facebook.internal.Utility: void writeStringMapToParcel(android.os.Parcel,java.util.Map)>
<com.facebook.internal.Utility: java.util.Map readStringMapFromParcel(android.os.Parcel)>
<com.facebook.internal.Utility: boolean isCurrentAccessToken(com.facebook.AccessToken)>
<com.facebook.internal.Utility: void getGraphMeRequestWithCacheAsync(java.lang.String,com.facebook.internal.Utility$GraphMeRequestWithCacheCallback)>
<com.facebook.internal.Utility: org.json.JSONObject awaitGetGraphMeRequestWithCache(java.lang.String)>
<com.facebook.internal.Utility: com.facebook.internal.Utility$PermissionsPair handlePermissionResponse(org.json.JSONObject)>
<com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
<org.json.JSONArray: void <init>()>
<org.json.JSONArray: void <init>(java.util.Collection)>
<org.json.JSONArray: void <init>(org.json.JSONTokener)>
<org.json.JSONArray: void <init>(java.lang.String)>
<org.json.JSONArray: int length()>
<org.json.JSONArray: org.json.JSONArray put(boolean)>
<org.json.JSONArray: org.json.JSONArray put(double)>
<org.json.JSONArray: org.json.JSONArray put(int)>
<org.json.JSONArray: org.json.JSONArray put(long)>
<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>
<org.json.JSONArray: org.json.JSONArray put(int,boolean)>
<org.json.JSONArray: org.json.JSONArray put(int,double)>
<org.json.JSONArray: org.json.JSONArray put(int,int)>
<org.json.JSONArray: org.json.JSONArray put(int,long)>
<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>
<org.json.JSONArray: boolean isNull(int)>
<org.json.JSONArray: java.lang.Object get(int)>
<org.json.JSONArray: java.lang.Object opt(int)>
<org.json.JSONArray: boolean getBoolean(int)>
<org.json.JSONArray: boolean optBoolean(int)>
<org.json.JSONArray: boolean optBoolean(int,boolean)>
<org.json.JSONArray: double getDouble(int)>
<org.json.JSONArray: double optDouble(int)>
<org.json.JSONArray: double optDouble(int,double)>
<org.json.JSONArray: int getInt(int)>
<org.json.JSONArray: int optInt(int)>
<org.json.JSONArray: int optInt(int,int)>
<org.json.JSONArray: long getLong(int)>
<org.json.JSONArray: long optLong(int)>
<org.json.JSONArray: long optLong(int,long)>
<org.json.JSONArray: java.lang.String getString(int)>
<org.json.JSONArray: java.lang.String optString(int)>
<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>
<org.json.JSONArray: org.json.JSONArray optJSONArray(int)>
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>
<org.json.JSONArray: org.json.JSONObject optJSONObject(int)>
<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>
<org.json.JSONArray: java.lang.String join(java.lang.String)>
<org.json.JSONArray: java.lang.String toString()>
<org.json.JSONArray: java.lang.String toString(int)>
<org.json.JSONArray: boolean equals(java.lang.Object)>
<org.json.JSONArray: int hashCode()>
<android.util.SparseArray: void <init>()>
<android.util.SparseArray: void <init>(int)>
<android.util.SparseArray: android.util.SparseArray clone()>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.util.SparseArray: void delete(int)>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: void removeAt(int)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.util.SparseArray: int size()>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: java.lang.Object valueAt(int)>
<android.util.SparseArray: void setValueAt(int,java.lang.Object)>
<android.util.SparseArray: int indexOfKey(int)>
<android.util.SparseArray: int indexOfValue(java.lang.Object)>
<android.util.SparseArray: void clear()>
<android.util.SparseArray: void append(int,java.lang.Object)>
<android.util.SparseArray: java.lang.Object clone()>
<org.json.JSONTokener: void <init>(java.lang.String)>
<org.json.JSONTokener: java.lang.Object nextValue()>
<org.json.JSONTokener: java.lang.String nextString(char)>
<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>
<org.json.JSONTokener: java.lang.String toString()>
<org.json.JSONTokener: boolean more()>
<org.json.JSONTokener: char next()>
<org.json.JSONTokener: char next(char)>
<org.json.JSONTokener: char nextClean()>
<org.json.JSONTokener: java.lang.String next(int)>
<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)>
<org.json.JSONTokener: java.lang.String nextTo(char)>
<org.json.JSONTokener: void skipPast(java.lang.String)>
<org.json.JSONTokener: char skipTo(char)>
<org.json.JSONTokener: void back()>
<org.json.JSONTokener: int dehexchar(char)>
<com.facebook.internal.LockOnGetVariable: void <init>(java.lang.Object)>
<com.facebook.internal.LockOnGetVariable: void <init>(java.util.concurrent.Callable)>
<com.facebook.internal.LockOnGetVariable: java.lang.Object getValue()>
<com.facebook.GraphResponse: com.facebook.FacebookRequestError getError()>
<com.facebook.GraphResponse: org.json.JSONObject getJSONObject()>
<com.facebook.GraphResponse: org.json.JSONArray getJSONArray()>
<com.facebook.GraphResponse: java.net.HttpURLConnection getConnection()>
<com.facebook.GraphResponse: com.facebook.GraphRequest getRequest()>
<com.facebook.GraphResponse: java.lang.String getRawResponse()>
<com.facebook.GraphResponse: com.facebook.GraphRequest getRequestForPagedResults(com.facebook.GraphResponse$PagingDirection)>
<com.facebook.GraphResponse: java.lang.String toString()>
<com.facebook.appevents.AppEventsLogger: void activateApp(android.app.Application)>
<com.facebook.appevents.AppEventsLogger: void activateApp(android.app.Application,java.lang.String)>
<com.facebook.appevents.AppEventsLogger: void activateApp(android.content.Context)>
<com.facebook.appevents.AppEventsLogger: void activateApp(android.content.Context,java.lang.String)>
<com.facebook.appevents.AppEventsLogger: void deactivateApp(android.content.Context)>
<com.facebook.appevents.AppEventsLogger: void deactivateApp(android.content.Context,java.lang.String)>
<com.facebook.appevents.AppEventsLogger: com.facebook.appevents.AppEventsLogger newLogger(android.content.Context)>
<com.facebook.appevents.AppEventsLogger: com.facebook.appevents.AppEventsLogger newLogger(android.content.Context,com.facebook.AccessToken)>
<com.facebook.appevents.AppEventsLogger: com.facebook.appevents.AppEventsLogger newLogger(android.content.Context,java.lang.String,com.facebook.AccessToken)>
<com.facebook.appevents.AppEventsLogger: com.facebook.appevents.AppEventsLogger newLogger(android.content.Context,java.lang.String)>
<com.facebook.appevents.AppEventsLogger: com.facebook.appevents.AppEventsLogger$FlushBehavior getFlushBehavior()>
<com.facebook.appevents.AppEventsLogger: void setFlushBehavior(com.facebook.appevents.AppEventsLogger$FlushBehavior)>
<com.facebook.appevents.AppEventsLogger: void logEvent(java.lang.String)>
<com.facebook.appevents.AppEventsLogger: void logEvent(java.lang.String,double)>
<com.facebook.appevents.AppEventsLogger: void logEvent(java.lang.String,android.os.Bundle)>
<com.facebook.appevents.AppEventsLogger: void logEvent(java.lang.String,double,android.os.Bundle)>
<com.facebook.appevents.AppEventsLogger: void logPurchase(java.math.BigDecimal,java.util.Currency)>
<com.facebook.appevents.AppEventsLogger: void logPurchase(java.math.BigDecimal,java.util.Currency,android.os.Bundle)>
<com.facebook.appevents.AppEventsLogger: void logPushNotificationOpen(android.os.Bundle)>
<com.facebook.appevents.AppEventsLogger: void logPushNotificationOpen(android.os.Bundle,java.lang.String)>
<com.facebook.appevents.AppEventsLogger: void flush()>
<com.facebook.appevents.AppEventsLogger: void onContextStop()>
<com.facebook.appevents.AppEventsLogger: boolean isValidForAccessToken(com.facebook.AccessToken)>
<com.facebook.appevents.AppEventsLogger: void setPushNotificationsRegistrationId(java.lang.String)>
<com.facebook.appevents.AppEventsLogger: void logSdkEvent(java.lang.String,java.lang.Double,android.os.Bundle)>
<com.facebook.appevents.AppEventsLogger: java.lang.String getApplicationId()>
<com.facebook.appevents.AppEventsLogger: java.lang.String getAnonymousAppDeviceGUID(android.content.Context)>
<com.facebook.internal.NativeProtocol: void <init>()>
<com.facebook.internal.NativeProtocol: android.content.Intent createProxyAuthIntent(android.content.Context,java.lang.String,java.util.Collection,java.lang.String,boolean,boolean,com.facebook.login.DefaultAudience,java.lang.String)>
<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>
<com.facebook.internal.NativeProtocol: int getLatestKnownVersion()>
<com.facebook.internal.NativeProtocol: boolean isVersionCompatibleWithBucketedIntent(int)>
<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformActivityIntent(android.content.Context,java.lang.String,java.lang.String,int,android.os.Bundle)>
<com.facebook.internal.NativeProtocol: void setupProtocolRequestIntent(android.content.Intent,java.lang.String,java.lang.String,int,android.os.Bundle)>
<com.facebook.internal.NativeProtocol: android.content.Intent createProtocolResultIntent(android.content.Intent,android.os.Bundle,com.facebook.FacebookException)>
<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>
<com.facebook.internal.NativeProtocol: int getProtocolVersionFromIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: java.util.UUID getCallIdFromIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: android.os.Bundle getBridgeArgumentsFromIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: android.os.Bundle getMethodArgumentsFromIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: android.os.Bundle getSuccessResultsFromIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: boolean isErrorResult(android.content.Intent)>
<com.facebook.internal.NativeProtocol: android.os.Bundle getErrorDataFromResultIntent(android.content.Intent)>
<com.facebook.internal.NativeProtocol: com.facebook.FacebookException getExceptionFromErrorData(android.os.Bundle)>
<com.facebook.internal.NativeProtocol: android.os.Bundle createBundleForException(com.facebook.FacebookException)>
<com.facebook.internal.NativeProtocol: int getLatestAvailableProtocolVersionForService(int)>
<com.facebook.internal.NativeProtocol: int getLatestAvailableProtocolVersionForAction(java.lang.String,int[])>
<com.facebook.internal.NativeProtocol: void updateAllAvailableProtocolVersionsAsync()>
<com.facebook.internal.NativeProtocol: int computeLatestAvailableVersionFromVersionSpec(java.util.TreeSet,int,int[])>
<com.facebook.internal.AppEventsLoggerUtility: void <init>()>
<com.facebook.internal.AppEventsLoggerUtility: org.json.JSONObject getJSONObjectForGraphAPICall(com.facebook.internal.AppEventsLoggerUtility$GraphAPIActivityType,com.facebook.internal.AttributionIdentifiers,java.lang.String,boolean,android.content.Context)>
<com.facebook.FacebookSdk$3: java.lang.Void call()>
<com.facebook.FacebookSdk$3: java.lang.Object call()>
<com.facebook.FacebookSdk$4: void run()>
<com.facebook.internal.AttributionIdentifiers: void <init>()>
<com.facebook.internal.AttributionIdentifiers: com.facebook.internal.AttributionIdentifiers getAttributionIdentifiers(android.content.Context)>
<com.facebook.internal.AttributionIdentifiers: java.lang.String getAttributionId()>
<com.facebook.internal.AttributionIdentifiers: java.lang.String getAndroidAdvertiserId()>
<com.facebook.internal.AttributionIdentifiers: java.lang.String getAndroidInstallerPackage()>
<com.facebook.internal.AttributionIdentifiers: boolean isTrackingLimited()>
<com.facebook.FacebookSdk$1: java.lang.Thread newThread(java.lang.Runnable)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.String)>
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<com.facebook.FacebookSdk$2: java.io.File call()>
<com.facebook.FacebookSdk$2: java.lang.Object call()>
<com.facebook.internal.AppEventsLoggerUtility$GraphAPIActivityType: com.facebook.internal.AppEventsLoggerUtility$GraphAPIActivityType[] values()>
<com.facebook.internal.AppEventsLoggerUtility$GraphAPIActivityType: com.facebook.internal.AppEventsLoggerUtility$GraphAPIActivityType valueOf(java.lang.String)>
<com.facebook.GraphRequest: void <init>()>
<com.facebook.GraphRequest: void <init>(com.facebook.AccessToken,java.lang.String)>
<com.facebook.GraphRequest: void <init>(com.facebook.AccessToken,java.lang.String,android.os.Bundle,com.facebook.HttpMethod)>
<com.facebook.GraphRequest: void <init>(com.facebook.AccessToken,java.lang.String,android.os.Bundle,com.facebook.HttpMethod,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: void <init>(com.facebook.AccessToken,java.lang.String,android.os.Bundle,com.facebook.HttpMethod,com.facebook.GraphRequest$Callback,java.lang.String)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newDeleteObjectRequest(com.facebook.AccessToken,java.lang.String,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newMeRequest(com.facebook.AccessToken,com.facebook.GraphRequest$GraphJSONObjectCallback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newPostRequest(com.facebook.AccessToken,java.lang.String,org.json.JSONObject,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newMyFriendsRequest(com.facebook.AccessToken,com.facebook.GraphRequest$GraphJSONArrayCallback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newGraphPathRequest(com.facebook.AccessToken,java.lang.String,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newPlacesSearchRequest(com.facebook.AccessToken,android.location.Location,int,int,java.lang.String,com.facebook.GraphRequest$GraphJSONArrayCallback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newUploadPhotoRequest(com.facebook.AccessToken,java.lang.String,android.graphics.Bitmap,java.lang.String,android.os.Bundle,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newUploadPhotoRequest(com.facebook.AccessToken,java.lang.String,java.io.File,java.lang.String,android.os.Bundle,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newUploadPhotoRequest(com.facebook.AccessToken,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newCustomAudienceThirdPartyIdRequest(com.facebook.AccessToken,android.content.Context,java.lang.String,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: com.facebook.GraphRequest newCustomAudienceThirdPartyIdRequest(com.facebook.AccessToken,android.content.Context,com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: org.json.JSONObject getGraphObject()>
<com.facebook.GraphRequest: void setGraphObject(org.json.JSONObject)>
<com.facebook.GraphRequest: java.lang.String getGraphPath()>
<com.facebook.GraphRequest: void setGraphPath(java.lang.String)>
<com.facebook.GraphRequest: com.facebook.HttpMethod getHttpMethod()>
<com.facebook.GraphRequest: void setHttpMethod(com.facebook.HttpMethod)>
<com.facebook.GraphRequest: java.lang.String getVersion()>
<com.facebook.GraphRequest: void setVersion(java.lang.String)>
<com.facebook.GraphRequest: void setSkipClientToken(boolean)>
<com.facebook.GraphRequest: android.os.Bundle getParameters()>
<com.facebook.GraphRequest: void setParameters(android.os.Bundle)>
<com.facebook.GraphRequest: com.facebook.AccessToken getAccessToken()>
<com.facebook.GraphRequest: void setAccessToken(com.facebook.AccessToken)>
<com.facebook.GraphRequest: java.lang.String getBatchEntryName()>
<com.facebook.GraphRequest: void setBatchEntryName(java.lang.String)>
<com.facebook.GraphRequest: java.lang.String getBatchEntryDependsOn()>
<com.facebook.GraphRequest: void setBatchEntryDependsOn(java.lang.String)>
<com.facebook.GraphRequest: boolean getBatchEntryOmitResultOnSuccess()>
<com.facebook.GraphRequest: void setBatchEntryOmitResultOnSuccess(boolean)>
<com.facebook.GraphRequest: java.lang.String getDefaultBatchApplicationId()>
<com.facebook.GraphRequest: void setDefaultBatchApplicationId(java.lang.String)>
<com.facebook.GraphRequest: com.facebook.GraphRequest$Callback getCallback()>
<com.facebook.GraphRequest: void setCallback(com.facebook.GraphRequest$Callback)>
<com.facebook.GraphRequest: void setTag(java.lang.Object)>
<com.facebook.GraphRequest: java.lang.Object getTag()>
<com.facebook.GraphRequest: com.facebook.GraphResponse executeAndWait()>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeAsync()>
<com.facebook.GraphRequest: java.net.HttpURLConnection toHttpConnection(com.facebook.GraphRequest[])>
<com.facebook.GraphRequest: java.net.HttpURLConnection toHttpConnection(java.util.Collection)>
<com.facebook.GraphRequest: java.net.HttpURLConnection toHttpConnection(com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: com.facebook.GraphResponse executeAndWait(com.facebook.GraphRequest)>
<com.facebook.GraphRequest: java.util.List executeBatchAndWait(com.facebook.GraphRequest[])>
<com.facebook.GraphRequest: java.util.List executeBatchAndWait(java.util.Collection)>
<com.facebook.GraphRequest: java.util.List executeBatchAndWait(com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeBatchAsync(com.facebook.GraphRequest[])>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeBatchAsync(java.util.Collection)>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeBatchAsync(com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: java.util.List executeConnectionAndWait(java.net.HttpURLConnection,java.util.Collection)>
<com.facebook.GraphRequest: java.util.List executeConnectionAndWait(java.net.HttpURLConnection,com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeConnectionAsync(java.net.HttpURLConnection,com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: com.facebook.GraphRequestAsyncTask executeConnectionAsync(android.os.Handler,java.net.HttpURLConnection,com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequest: java.lang.String toString()>
<com.facebook.GraphRequest: com.facebook.GraphRequest createOpenGraphObject(com.facebook.share.model.ShareOpenGraphObject)>
<android.content.pm.ApplicationInfo: void <init>()>
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ApplicationInfo: java.lang.String toString()>
<android.content.pm.ApplicationInfo: int describeContents()>
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.Signature: void <init>(byte[])>
<android.content.pm.Signature: void <init>(java.lang.String)>
<android.content.pm.Signature: char[] toChars()>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.content.pm.Signature: byte[] toByteArray()>
<android.content.pm.Signature: boolean equals(java.lang.Object)>
<android.content.pm.Signature: int hashCode()>
<android.content.pm.Signature: int describeContents()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageManager$NameNotFoundException: void <init>()>
<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>
<android.content.pm.PackageInfo: void <init>()>
<android.content.pm.PackageInfo: java.lang.String toString()>
<android.content.pm.PackageInfo: int describeContents()>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<com.facebook.internal.BoltsMeasurementEventListener: com.facebook.internal.BoltsMeasurementEventListener getInstance(android.content.Context)>
<com.facebook.internal.BoltsMeasurementEventListener: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.FacebookRequestError: void <init>(int,java.lang.String,java.lang.String)>
<com.facebook.FacebookRequestError: com.facebook.FacebookRequestError$Category getCategory()>
<com.facebook.FacebookRequestError: int getRequestStatusCode()>
<com.facebook.FacebookRequestError: int getErrorCode()>
<com.facebook.FacebookRequestError: int getSubErrorCode()>
<com.facebook.FacebookRequestError: java.lang.String getErrorType()>
<com.facebook.FacebookRequestError: java.lang.String getErrorMessage()>
<com.facebook.FacebookRequestError: java.lang.String getErrorRecoveryMessage()>
<com.facebook.FacebookRequestError: java.lang.String getErrorUserMessage()>
<com.facebook.FacebookRequestError: java.lang.String getErrorUserTitle()>
<com.facebook.FacebookRequestError: org.json.JSONObject getRequestResultBody()>
<com.facebook.FacebookRequestError: org.json.JSONObject getRequestResult()>
<com.facebook.FacebookRequestError: java.lang.Object getBatchRequestResult()>
<com.facebook.FacebookRequestError: java.net.HttpURLConnection getConnection()>
<com.facebook.FacebookRequestError: com.facebook.FacebookException getException()>
<com.facebook.FacebookRequestError: java.lang.String toString()>
<com.facebook.FacebookRequestError: void writeToParcel(android.os.Parcel,int)>
<com.facebook.FacebookRequestError: int describeContents()>
<com.facebook.GraphRequestBatch: void <init>()>
<com.facebook.GraphRequestBatch: void <init>(java.util.Collection)>
<com.facebook.GraphRequestBatch: void <init>(com.facebook.GraphRequest[])>
<com.facebook.GraphRequestBatch: void <init>(com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequestBatch: int getTimeout()>
<com.facebook.GraphRequestBatch: void setTimeout(int)>
<com.facebook.GraphRequestBatch: void addCallback(com.facebook.GraphRequestBatch$Callback)>
<com.facebook.GraphRequestBatch: void removeCallback(com.facebook.GraphRequestBatch$Callback)>
<com.facebook.GraphRequestBatch: boolean add(com.facebook.GraphRequest)>
<com.facebook.GraphRequestBatch: void add(int,com.facebook.GraphRequest)>
<com.facebook.GraphRequestBatch: void clear()>
<com.facebook.GraphRequestBatch: com.facebook.GraphRequest get(int)>
<com.facebook.GraphRequestBatch: com.facebook.GraphRequest remove(int)>
<com.facebook.GraphRequestBatch: com.facebook.GraphRequest set(int,com.facebook.GraphRequest)>
<com.facebook.GraphRequestBatch: int size()>
<com.facebook.GraphRequestBatch: java.lang.String getBatchApplicationId()>
<com.facebook.GraphRequestBatch: void setBatchApplicationId(java.lang.String)>
<com.facebook.GraphRequestBatch: java.util.List executeAndWait()>
<com.facebook.GraphRequestBatch: com.facebook.GraphRequestAsyncTask executeAsync()>
<com.facebook.GraphRequestBatch: java.lang.Object set(int,java.lang.Object)>
<com.facebook.GraphRequestBatch: java.lang.Object remove(int)>
<com.facebook.GraphRequestBatch: java.lang.Object get(int)>
<com.facebook.GraphRequestBatch: boolean add(java.lang.Object)>
<com.facebook.GraphRequestBatch: void add(int,java.lang.Object)>
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.util.Base64: byte[] decode(byte[],int)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
<android.util.Base64: byte[] encode(byte[],int)>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
<com.facebook.AccessTokenCache: void <init>()>
<com.facebook.AccessTokenCache: com.facebook.AccessToken load()>
<com.facebook.AccessTokenCache: void save(com.facebook.AccessToken)>
<com.facebook.AccessTokenCache: void clear()>
<com.facebook.HttpMethod: com.facebook.HttpMethod[] values()>
<com.facebook.HttpMethod: com.facebook.HttpMethod valueOf(java.lang.String)>
<android.os.Looper: void prepare()>
<android.os.Looper: void prepareMainLooper()>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.os.Looper: void loop()>
<android.os.Looper: android.os.Looper myLooper()>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.os.Looper: void quit()>
<android.os.Looper: java.lang.Thread getThread()>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.os.Looper: java.lang.String toString()>
<android.os.Handler: void <init>()>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.os.Handler: void <init>(android.os.Looper)>
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<android.os.Handler: android.os.Message obtainMessage()>
<android.os.Handler: android.os.Message obtainMessage(int)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<android.os.Handler: android.os.Looper getLooper()>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Handler: java.lang.String toString()>
<com.facebook.GraphRequestAsyncTask: void <init>(com.facebook.GraphRequest[])>
<com.facebook.GraphRequestAsyncTask: void <init>(java.util.Collection)>
<com.facebook.GraphRequestAsyncTask: void <init>(com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequestAsyncTask: void <init>(java.net.HttpURLConnection,com.facebook.GraphRequest[])>
<com.facebook.GraphRequestAsyncTask: void <init>(java.net.HttpURLConnection,java.util.Collection)>
<com.facebook.GraphRequestAsyncTask: void <init>(java.net.HttpURLConnection,com.facebook.GraphRequestBatch)>
<com.facebook.GraphRequestAsyncTask: java.lang.String toString()>
<com.facebook.AccessTokenManager$2: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.AccessTokenManager$1: void run()>
<com.facebook.AccessTokenManager$4: void onBatchCompleted(com.facebook.GraphRequestBatch)>
<com.facebook.AccessTokenManager$3: void onCompleted(com.facebook.GraphResponse)>
<android.content.pm.ProviderInfo: void <init>()>
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>
<android.content.pm.ProviderInfo: int describeContents()>
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ProviderInfo: java.lang.String toString()>
<android.content.pm.ActivityInfo: void <init>()>
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>
<android.content.pm.ActivityInfo: int getThemeResource()>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ActivityInfo: java.lang.String toString()>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.content.ComponentName: java.lang.String toString()>
<android.content.ComponentName: boolean equals(java.lang.Object)>
<android.content.ComponentName: int hashCode()>
<android.content.ComponentName: int compareTo(android.content.ComponentName)>
<android.content.ComponentName: int describeContents()>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.content.ComponentName: java.lang.Object clone()>
<android.content.ComponentName: int compareTo(java.lang.Object)>
<com.facebook.FacebookSdkNotInitializedException: void <init>()>
<com.facebook.FacebookSdkNotInitializedException: void <init>(java.lang.String)>
<com.facebook.FacebookSdkNotInitializedException: void <init>(java.lang.String,java.lang.Throwable)>
<com.facebook.FacebookSdkNotInitializedException: void <init>(java.lang.Throwable)>
<android.content.pm.ResolveInfo: void <init>()>
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ResolveInfo: java.lang.String toString()>
<android.content.pm.ResolveInfo: int describeContents()>
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
<android.graphics.Rect: void <init>()>
<android.graphics.Rect: void <init>(int,int,int,int)>
<android.graphics.Rect: void <init>(android.graphics.Rect)>
<android.graphics.Rect: boolean equals(java.lang.Object)>
<android.graphics.Rect: java.lang.String toString()>
<android.graphics.Rect: java.lang.String toShortString()>
<android.graphics.Rect: java.lang.String flattenToString()>
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: int width()>
<android.graphics.Rect: int height()>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: void setEmpty()>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void inset(int,int)>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.Rect: void sort()>
<android.graphics.Rect: int describeContents()>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.content.res.Resources: java.lang.String getString(int)>
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.content.res.Resources: float getDimension(int)>
<android.content.res.Resources: int getDimensionPixelOffset(int)>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<android.content.res.Resources: float getFraction(int,int,int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>
<android.content.res.Resources: android.graphics.Movie getMovie(int)>
<android.content.res.Resources: int getColor(int)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.Resources: boolean getBoolean(int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: void flushLayoutCache()>
<android.content.res.Resources: void finishPreloading()>
<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>
<android.content.Intent$FilterComparison: android.content.Intent getIntent()>
<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
<android.content.Intent$FilterComparison: int hashCode()>
<android.content.Intent$ShortcutIconResource: void <init>()>
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>
<android.content.Intent$ShortcutIconResource: int describeContents()>
<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent$ShortcutIconResource: java.lang.String toString()>
<android.util.SparseBooleanArray: void <init>()>
<android.util.SparseBooleanArray: void <init>(int)>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.SparseBooleanArray: void delete(int)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.util.SparseBooleanArray: int size()>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: void clear()>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.util.SparseBooleanArray: java.lang.Object clone()>
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.os.ParcelFileDescriptor: int getFd()>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.os.ParcelFileDescriptor: void close()>
<android.os.ParcelFileDescriptor: java.lang.String toString()>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.text.TextPaint: void <init>()>
<android.text.TextPaint: void <init>(int)>
<android.text.TextPaint: void <init>(android.graphics.Paint)>
<android.text.TextPaint: void set(android.text.TextPaint)>
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()>
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)>
<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>
<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>
<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>
<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>
<android.text.TextUtils$SimpleStringSplitter: void remove()>
<android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
<com.facebook.internal.Logger: void registerStringToReplace(java.lang.String,java.lang.String)>
<com.facebook.internal.Logger: void registerAccessToken(java.lang.String)>
<com.facebook.internal.Logger: void log(com.facebook.LoggingBehavior,java.lang.String,java.lang.String)>
<com.facebook.internal.Logger: void log(com.facebook.LoggingBehavior,java.lang.String,java.lang.String,java.lang.Object[])>
<com.facebook.internal.Logger: void log(com.facebook.LoggingBehavior,int,java.lang.String,java.lang.String,java.lang.Object[])>
<com.facebook.internal.Logger: void log(com.facebook.LoggingBehavior,int,java.lang.String,java.lang.String)>
<com.facebook.internal.Logger: void <init>(com.facebook.LoggingBehavior,java.lang.String)>
<com.facebook.internal.Logger: int getPriority()>
<com.facebook.internal.Logger: void setPriority(int)>
<com.facebook.internal.Logger: java.lang.String getContents()>
<com.facebook.internal.Logger: void log()>
<com.facebook.internal.Logger: void logString(java.lang.String)>
<com.facebook.internal.Logger: void append(java.lang.StringBuilder)>
<com.facebook.internal.Logger: void append(java.lang.String)>
<com.facebook.internal.Logger: void append(java.lang.String,java.lang.Object[])>
<com.facebook.internal.Logger: void appendKeyValue(java.lang.String,java.lang.Object)>
<com.facebook.internal.Utility$FetchedAppSettings: boolean supportsImplicitLogging()>
<com.facebook.internal.Utility$FetchedAppSettings: java.lang.String getNuxContent()>
<com.facebook.internal.Utility$FetchedAppSettings: boolean getNuxEnabled()>
<com.facebook.internal.Utility$FetchedAppSettings: boolean getCustomTabsEnabled()>
<com.facebook.internal.Utility$FetchedAppSettings: int getSessionTimeoutInSeconds()>
<com.facebook.internal.Utility$FetchedAppSettings: java.util.Map getDialogConfigurations()>
<com.facebook.internal.Utility$FetchedAppSettings: com.facebook.internal.FacebookRequestErrorClassification getErrorClassification()>
<com.facebook.internal.Utility$DialogFeatureConfig: java.lang.String getDialogName()>
<com.facebook.internal.Utility$DialogFeatureConfig: java.lang.String getFeatureName()>
<com.facebook.internal.Utility$DialogFeatureConfig: android.net.Uri getFallbackUrl()>
<com.facebook.internal.Utility$DialogFeatureConfig: int[] getVersionSpec()>
<com.facebook.internal.Utility$PermissionsPair: void <init>(java.util.List,java.util.List)>
<com.facebook.internal.Utility$PermissionsPair: java.util.List getGrantedPermissions()>
<com.facebook.internal.Utility$PermissionsPair: java.util.List getDeclinedPermissions()>
<com.facebook.internal.ImageDownloader: void <init>()>
<com.facebook.internal.ImageDownloader: void downloadAsync(com.facebook.internal.ImageRequest)>
<com.facebook.internal.ImageDownloader: boolean cancelRequest(com.facebook.internal.ImageRequest)>
<com.facebook.internal.ImageDownloader: void prioritizeRequest(com.facebook.internal.ImageRequest)>
<com.facebook.internal.ImageDownloader: void clearCache(android.content.Context)>
<android.os.Build$VERSION: void <init>()>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
<android.webkit.CookieManager: boolean acceptCookie()>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>
<android.webkit.CookieManager: void removeSessionCookie()>
<android.webkit.CookieManager: void removeAllCookie()>
<android.webkit.CookieManager: boolean hasCookies()>
<android.webkit.CookieManager: void removeExpiredCookie()>
<android.webkit.CookieManager: boolean allowFileSchemeCookies()>
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>
<android.view.Display: int getDisplayId()>
<android.view.Display: void getSize(android.graphics.Point)>
<android.view.Display: void getRectSize(android.graphics.Rect)>
<android.view.Display: int getWidth()>
<android.view.Display: int getHeight()>
<android.view.Display: int getRotation()>
<android.view.Display: int getPixelFormat()>
<android.view.Display: float getRefreshRate()>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.net.Uri$Builder: void <init>()>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: java.lang.String toString()>
<android.os.Environment: void <init>()>
<android.os.Environment: java.io.File getRootDirectory()>
<android.os.Environment: java.io.File getDataDirectory()>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.Environment: boolean isExternalStorageRemovable()>
<android.os.Environment: boolean isExternalStorageEmulated()>
<com.facebook.internal.FacebookRequestErrorClassification: java.util.Map getOtherErrors()>
<com.facebook.internal.FacebookRequestErrorClassification: java.util.Map getTransientErrors()>
<com.facebook.internal.FacebookRequestErrorClassification: java.util.Map getLoginRecoverableErrors()>
<com.facebook.internal.FacebookRequestErrorClassification: java.lang.String getRecoveryMessage(com.facebook.FacebookRequestError$Category)>
<com.facebook.internal.FacebookRequestErrorClassification: com.facebook.FacebookRequestError$Category classify(int,int,boolean)>
<com.facebook.internal.FacebookRequestErrorClassification: com.facebook.internal.FacebookRequestErrorClassification getDefaultErrorClassification()>
<com.facebook.internal.FacebookRequestErrorClassification: com.facebook.internal.FacebookRequestErrorClassification createFromJSON(org.json.JSONArray)>
<com.facebook.internal.ProfileInformationCache: org.json.JSONObject getProfileInformation(java.lang.String)>
<com.facebook.internal.ProfileInformationCache: void putProfileInformation(java.lang.String,org.json.JSONObject)>
<android.content.res.Configuration: void <init>()>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.content.res.Configuration: java.lang.String toString()>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.content.res.Configuration: int describeContents()>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(java.lang.Object)>
<android.content.res.Configuration: int hashCode()>
<android.content.res.Configuration: int compareTo(java.lang.Object)>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<android.webkit.CookieSyncManager: void stopSync()>
<android.webkit.CookieSyncManager: void startSync()>
<android.webkit.CookieSyncManager: void resetSync()>
<android.webkit.CookieSyncManager: void sync()>
<android.webkit.CookieSyncManager: void run()>
<android.util.DisplayMetrics: void <init>()>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.util.DisplayMetrics: java.lang.String toString()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: boolean hasIccCard()>
<android.telephony.TelephonyManager: int getSimState()>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: int getCallState()>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.telephony.TelephonyManager: int getDataState()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<com.facebook.internal.Utility$1: void run()>
<com.facebook.internal.Utility$2: void onCompleted(com.facebook.GraphResponse)>
<android.os.Build: void <init>()>
<android.os.Build: java.lang.String getRadioVersion()>
<com.facebook.internal.Utility$3: boolean accept(java.io.File,java.lang.String)>
<android.os.StatFs: void <init>(java.lang.String)>
<android.os.StatFs: void restat(java.lang.String)>
<com.facebook.appevents.internal.Constants: void <init>()>
<com.facebook.appevents.internal.Constants: int getDefaultAppEventsSessionTimeoutInSeconds()>
<com.facebook.appevents.AccessTokenAppIdPair: void <init>(com.facebook.AccessToken)>
<com.facebook.appevents.AccessTokenAppIdPair: void <init>(java.lang.String,java.lang.String)>
<com.facebook.appevents.AccessTokenAppIdPair: java.lang.String getAccessTokenString()>
<com.facebook.appevents.AccessTokenAppIdPair: java.lang.String getApplicationId()>
<com.facebook.appevents.AccessTokenAppIdPair: int hashCode()>
<com.facebook.appevents.AccessTokenAppIdPair: boolean equals(java.lang.Object)>
<com.facebook.appevents.AppEventsLogger$FlushBehavior: com.facebook.appevents.AppEventsLogger$FlushBehavior[] values()>
<com.facebook.appevents.AppEventsLogger$FlushBehavior: com.facebook.appevents.AppEventsLogger$FlushBehavior valueOf(java.lang.String)>
<android.app.Application: void <init>()>
<android.app.Application: void onCreate()>
<android.app.Application: void onTerminate()>
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Application: void onLowMemory()>
<android.app.Application: void onTrimMemory(int)>
<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<com.facebook.appevents.AppEvent: void <init>(java.lang.String,java.lang.String,java.lang.Double,android.os.Bundle,boolean,java.util.UUID)>
<com.facebook.appevents.AppEvent: java.lang.String getName()>
<com.facebook.appevents.AppEvent: boolean getIsImplicit()>
<com.facebook.appevents.AppEvent: org.json.JSONObject getJSONObject()>
<com.facebook.appevents.AppEvent: java.lang.String toString()>
<android.app.Activity: void <init>()>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: boolean isChild()>
<android.app.Activity: android.app.Activity getParent()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.app.Activity: android.view.View getCurrentFocus()>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Activity: int getChangingConfigurations()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void onLowMemory()>
<android.app.Activity: void onTrimMemory(int)>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.app.Activity: android.view.View findViewById(int)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: void setContentView(int)>
<android.app.Activity: void setContentView(android.view.View)>
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void setFinishOnTouchOutside(boolean)>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Activity: void onBackPressed()>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: void onUserInteraction()>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Activity: void onContentChanged()>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.app.Activity: void onAttachedToWindow()>
<android.app.Activity: void onDetachedFromWindow()>
<android.app.Activity: boolean hasWindowFocus()>
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Activity: void onPanelClosed(int,android.view.Menu)>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Activity: void openOptionsMenu()>
<android.app.Activity: void closeOptionsMenu()>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Activity: void registerForContextMenu(android.view.View)>
<android.app.Activity: void unregisterForContextMenu(android.view.View)>
<android.app.Activity: void openContextMenu(android.view.View)>
<android.app.Activity: void closeContextMenu()>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.app.Activity: void showDialog(int)>
<android.app.Activity: boolean showDialog(int,android.os.Bundle)>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void removeDialog(int)>
<android.app.Activity: boolean onSearchRequested()>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>
<android.app.Activity: void takeKeyEvents(boolean)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: void setFeatureDrawableResource(int,int)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void startActivity(android.content.Intent)>
<android.app.Activity: void startActivities(android.content.Intent[])>
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: java.lang.String getCallingPackage()>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.app.Activity: void setVisible(boolean)>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isChangingConfigurations()>
<android.app.Activity: void recreate()>
<android.app.Activity: void finish()>
<android.app.Activity: void finishFromChild(android.app.Activity)>
<android.app.Activity: void finishActivity(int)>
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>
<android.app.Activity: void setRequestedOrientation(int)>
<android.app.Activity: int getRequestedOrientation()>
<android.app.Activity: int getTaskId()>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: boolean moveTaskToBack(boolean)>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void setTitle(int)>
<android.app.Activity: void setTitleColor(int)>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.app.Activity: void setProgress(int)>
<android.app.Activity: void setSecondaryProgress(int)>
<android.app.Activity: void setVolumeControlStream(int)>
<android.app.Activity: int getVolumeControlStream()>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>
<com.facebook.appevents.AppEventQueue: void persistToDisk()>
<com.facebook.appevents.AppEventQueue: void flush(com.facebook.appevents.FlushReason)>
<com.facebook.appevents.AppEventQueue: void add(com.facebook.appevents.AccessTokenAppIdPair,com.facebook.appevents.AppEvent)>
<com.facebook.appevents.AppEventQueue: java.util.Set getKeySet()>
<com.facebook.appevents.FlushReason: com.facebook.appevents.FlushReason[] values()>
<com.facebook.appevents.FlushReason: com.facebook.appevents.FlushReason valueOf(java.lang.String)>
<com.facebook.appevents.AppEventsLogger$3: void run()>
<com.facebook.appevents.AppEventsLogger$1: void run()>
<com.facebook.appevents.AppEventsLogger$2: void run()>
<com.facebook.appevents.internal.ActivityLifecycleTracker: void <init>()>
<com.facebook.appevents.internal.ActivityLifecycleTracker: void startTracking(android.app.Application,java.lang.String)>
<com.facebook.appevents.internal.ActivityLifecycleTracker: boolean isTracking()>
<com.facebook.appevents.internal.ActivityLifecycleTracker: java.util.UUID getCurrentSessionGuid()>
<com.facebook.appevents.internal.ActivityLifecycleTracker: void onActivityCreated(android.app.Activity)>
<com.facebook.appevents.internal.ActivityLifecycleTracker: void onActivityResumed(android.app.Activity)>
<android.content.pm.PermissionInfo: void <init>()>
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionInfo: java.lang.String toString()>
<android.content.pm.PermissionInfo: int describeContents()>
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PermissionGroupInfo: void <init>()>
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionGroupInfo: java.lang.String toString()>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ServiceInfo: void <init>()>
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ServiceInfo: java.lang.String toString()>
<android.content.pm.ServiceInfo: int describeContents()>
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureInfo: void <init>()>
<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>
<android.content.pm.FeatureInfo: java.lang.String toString()>
<android.content.pm.FeatureInfo: int describeContents()>
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.content.pm.InstrumentationInfo: void <init>()>
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>
<android.content.pm.InstrumentationInfo: java.lang.String toString()>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentFilter: void <init>()>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void <init>(android.content.IntentFilter)>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void setPriority(int)>
<android.content.IntentFilter: int getPriority()>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.IntentFilter: int countActions()>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<android.content.IntentFilter: int countDataTypes()>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int countDataAuthorities()>
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.content.IntentFilter: int countDataPaths()>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.content.IntentFilter: int countCategories()>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.content.IntentFilter: int describeContents()>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.DefaultAudience: com.facebook.login.DefaultAudience[] values()>
<com.facebook.login.DefaultAudience: com.facebook.login.DefaultAudience valueOf(java.lang.String)>
<com.facebook.login.DefaultAudience: java.lang.String getNativeProtocolAudience()>
<com.facebook.internal.NativeProtocol$1: void run()>
<com.facebook.FacebookOperationCanceledException: void <init>()>
<com.facebook.FacebookOperationCanceledException: void <init>(java.lang.String)>
<com.facebook.FacebookOperationCanceledException: void <init>(java.lang.String,java.lang.Throwable)>
<com.facebook.FacebookOperationCanceledException: void <init>(java.lang.Throwable)>
<com.facebook.Profile: com.facebook.Profile getCurrentProfile()>
<com.facebook.Profile: void setCurrentProfile(com.facebook.Profile)>
<com.facebook.Profile: void fetchProfileForCurrentAccessToken()>
<com.facebook.Profile: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.net.Uri)>
<com.facebook.Profile: android.net.Uri getProfilePictureUri(int,int)>
<com.facebook.Profile: java.lang.String getId()>
<com.facebook.Profile: java.lang.String getFirstName()>
<com.facebook.Profile: java.lang.String getMiddleName()>
<com.facebook.Profile: java.lang.String getLastName()>
<com.facebook.Profile: java.lang.String getName()>
<com.facebook.Profile: android.net.Uri getLinkUri()>
<com.facebook.Profile: boolean equals(java.lang.Object)>
<com.facebook.Profile: int hashCode()>
<com.facebook.Profile: int describeContents()>
<com.facebook.Profile: void writeToParcel(android.os.Parcel,int)>
<com.facebook.internal.AttributionIdentifiers$GoogleAdInfo: android.os.IBinder asBinder()>
<com.facebook.internal.AttributionIdentifiers$GoogleAdInfo: java.lang.String getAdvertiserId()>
<com.facebook.internal.AttributionIdentifiers$GoogleAdInfo: boolean isTrackingLimited()>
<com.facebook.internal.AttributionIdentifiers$GoogleAdServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.facebook.internal.AttributionIdentifiers$GoogleAdServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<com.facebook.internal.AttributionIdentifiers$GoogleAdServiceConnection: android.os.IBinder getBinder()>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status[] values()>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status valueOf(java.lang.String)>
<android.location.Location: void <init>(java.lang.String)>
<android.location.Location: void <init>(android.location.Location)>
<android.location.Location: void dump(android.util.Printer,java.lang.String)>
<android.location.Location: void set(android.location.Location)>
<android.location.Location: void reset()>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.location.Location: float distanceTo(android.location.Location)>
<android.location.Location: float bearingTo(android.location.Location)>
<android.location.Location: java.lang.String getProvider()>
<android.location.Location: void setProvider(java.lang.String)>
<android.location.Location: long getTime()>
<android.location.Location: void setTime(long)>
<android.location.Location: double getLatitude()>
<android.location.Location: void setLatitude(double)>
<android.location.Location: double getLongitude()>
<android.location.Location: void setLongitude(double)>
<android.location.Location: boolean hasAltitude()>
<android.location.Location: double getAltitude()>
<android.location.Location: void setAltitude(double)>
<android.location.Location: void removeAltitude()>
<android.location.Location: boolean hasSpeed()>
<android.location.Location: float getSpeed()>
<android.location.Location: void setSpeed(float)>
<android.location.Location: void removeSpeed()>
<android.location.Location: boolean hasBearing()>
<android.location.Location: float getBearing()>
<android.location.Location: void setBearing(float)>
<android.location.Location: void removeBearing()>
<android.location.Location: boolean hasAccuracy()>
<android.location.Location: float getAccuracy()>
<android.location.Location: void setAccuracy(float)>
<android.location.Location: void removeAccuracy()>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.Location: void setExtras(android.os.Bundle)>
<android.location.Location: java.lang.String toString()>
<android.location.Location: int describeContents()>
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: int getDensity()>
<android.graphics.Bitmap: void setDensity(int)>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: int getGenerationId()>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: int getHeight()>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledWidth(int)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.graphics.Bitmap: int getRowBytes()>
<android.graphics.Bitmap: int getByteCount()>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: void setHasAlpha(boolean)>
<android.graphics.Bitmap: void eraseColor(int)>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: int describeContents()>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.graphics.Bitmap: void prepareToDraw()>
<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>
<com.facebook.GraphRequest$Serializer: void writeObject(java.lang.String,java.lang.Object,com.facebook.GraphRequest)>
<com.facebook.GraphRequest$Serializer: void writeRequestsAsJson(java.lang.String,org.json.JSONArray,java.util.Collection)>
<com.facebook.GraphRequest$Serializer: void writeString(java.lang.String,java.lang.String)>
<com.facebook.GraphRequest$Serializer: void writeBitmap(java.lang.String,android.graphics.Bitmap)>
<com.facebook.GraphRequest$Serializer: void writeBytes(java.lang.String,byte[])>
<com.facebook.GraphRequest$Serializer: void writeContentUri(java.lang.String,android.net.Uri,java.lang.String)>
<com.facebook.GraphRequest$Serializer: void writeFile(java.lang.String,android.os.ParcelFileDescriptor,java.lang.String)>
<com.facebook.GraphRequest$Serializer: void writeRecordBoundary()>
<com.facebook.GraphRequest$Serializer: void writeContentDisposition(java.lang.String,java.lang.String,java.lang.String)>
<com.facebook.GraphRequest$Serializer: void write(java.lang.String,java.lang.Object[])>
<com.facebook.GraphRequest$Serializer: void writeLine(java.lang.String,java.lang.Object[])>
<com.facebook.GraphRequest$Attachment: void <init>(com.facebook.GraphRequest,java.lang.Object)>
<com.facebook.GraphRequest$Attachment: com.facebook.GraphRequest getRequest()>
<com.facebook.GraphRequest$Attachment: java.lang.Object getValue()>
<com.facebook.ProgressNoopOutputStream: void setCurrentRequest(com.facebook.GraphRequest)>
<com.facebook.ProgressNoopOutputStream: void write(byte[])>
<com.facebook.ProgressNoopOutputStream: void write(byte[],int,int)>
<com.facebook.ProgressNoopOutputStream: void write(int)>
<com.facebook.share.internal.OpenGraphJSONUtility: org.json.JSONObject toJSONObject(com.facebook.share.model.ShareOpenGraphAction,com.facebook.share.internal.OpenGraphJSONUtility$PhotoJSONProcessor)>
<com.facebook.share.internal.OpenGraphJSONUtility: java.lang.Object toJSONValue(java.lang.Object,com.facebook.share.internal.OpenGraphJSONUtility$PhotoJSONProcessor)>
<com.facebook.internal.ServerProtocol: void <init>()>
<com.facebook.internal.ServerProtocol: java.lang.String getDialogAuthority()>
<com.facebook.internal.ServerProtocol: java.lang.String getGraphUrlBase()>
<com.facebook.internal.ServerProtocol: java.lang.String getGraphVideoUrlBase()>
<com.facebook.internal.ServerProtocol: java.lang.String getAPIVersion()>
<com.facebook.internal.ServerProtocol: android.os.Bundle getQueryParamsForPlatformActivityIntentWebFallback(java.lang.String,int,android.os.Bundle)>
<com.facebook.GraphRequest$1: void onCompleted(com.facebook.GraphResponse)>
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
<android.util.Pair: boolean equals(java.lang.Object)>
<android.util.Pair: int hashCode()>
<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>
<com.facebook.GraphRequest$3: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.GraphRequest$2: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.GraphRequest$5: void run()>
<com.facebook.GraphRequest$4: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.GraphRequest$7: org.json.JSONObject toJSONObject(com.facebook.share.model.SharePhoto)>
<com.facebook.GraphRequest$6: void writeString(java.lang.String,java.lang.String)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType: java.lang.String getMimeType()>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType: android.os.Parcelable getResource()>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType: int describeContents()>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType: void writeToParcel(android.os.Parcel,int)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType: void <init>(android.os.Parcelable,java.lang.String)>
<com.facebook.internal.InternalSettings: void <init>()>
<com.facebook.internal.InternalSettings: void setCustomUserAgent(java.lang.String)>
<com.facebook.internal.InternalSettings: java.lang.String getCustomUserAgent()>
<com.facebook.ProgressOutputStream: void setCurrentRequest(com.facebook.GraphRequest)>
<com.facebook.ProgressOutputStream: void write(byte[])>
<com.facebook.ProgressOutputStream: void write(byte[],int,int)>
<com.facebook.ProgressOutputStream: void write(int)>
<com.facebook.ProgressOutputStream: void close()>
<android.content.pm.PackageItemInfo: void <init>()>
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
<android.content.res.Resources$NotFoundException: void <init>()>
<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>
<android.content.IntentSender$SendIntentException: void <init>()>
<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>
<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>
<android.content.res.AssetManager: void close()>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: int getInt(int,int)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: void recycle()>
<android.content.res.TypedArray: java.lang.String toString()>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: void close()>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>
<android.content.IntentSender: java.lang.String getTargetPackage()>
<android.content.IntentSender: boolean equals(java.lang.Object)>
<android.content.IntentSender: int hashCode()>
<android.content.IntentSender: java.lang.String toString()>
<android.content.IntentSender: int describeContents()>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>
<android.util.AndroidException: void <init>()>
<android.util.AndroidException: void <init>(java.lang.String)>
<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>
<android.util.AndroidException: void <init>(java.lang.Exception)>
<android.content.pm.ConfigurationInfo: void <init>()>
<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>
<android.content.pm.ConfigurationInfo: java.lang.String toString()>
<android.content.pm.ConfigurationInfo: int describeContents()>
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<com.facebook.internal.LockOnGetVariable$1: java.lang.Void call()>
<com.facebook.internal.LockOnGetVariable$1: java.lang.Object call()>
<com.facebook.FacebookRequestError$Category: com.facebook.FacebookRequestError$Category[] values()>
<com.facebook.FacebookRequestError$Category: com.facebook.FacebookRequestError$Category valueOf(java.lang.String)>
<com.facebook.FacebookRequestError$1: com.facebook.FacebookRequestError createFromParcel(android.os.Parcel)>
<com.facebook.FacebookRequestError$1: com.facebook.FacebookRequestError[] newArray(int)>
<com.facebook.FacebookRequestError$1: java.lang.Object[] newArray(int)>
<com.facebook.FacebookRequestError$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.FacebookServiceException: void <init>(com.facebook.FacebookRequestError,java.lang.String)>
<com.facebook.FacebookServiceException: com.facebook.FacebookRequestError getRequestError()>
<com.facebook.FacebookServiceException: java.lang.String toString()>
<com.facebook.GraphResponse$PagingDirection: com.facebook.GraphResponse$PagingDirection[] values()>
<com.facebook.GraphResponse$PagingDirection: com.facebook.GraphResponse$PagingDirection valueOf(java.lang.String)>
<com.facebook.AccessTokenCache$SharedPreferencesTokenCachingStrategyFactory: com.facebook.LegacyTokenHelper create()>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.Message: void <init>()>
<android.os.Message: android.os.Message obtain()>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<android.os.Message: void recycle()>
<android.os.Message: void copyFrom(android.os.Message)>
<android.os.Message: long getWhen()>
<android.os.Message: void setTarget(android.os.Handler)>
<android.os.Message: android.os.Handler getTarget()>
<android.os.Message: java.lang.Runnable getCallback()>
<android.os.Message: android.os.Bundle getData()>
<android.os.Message: android.os.Bundle peekData()>
<android.os.Message: void setData(android.os.Bundle)>
<android.os.Message: void sendToTarget()>
<android.os.Message: java.lang.String toString()>
<android.os.Message: int describeContents()>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.os.HandlerThread: void <init>(java.lang.String)>
<android.os.HandlerThread: void <init>(java.lang.String,int)>
<android.os.HandlerThread: void run()>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: boolean quit()>
<android.os.HandlerThread: int getThreadId()>
<android.content.pm.ComponentInfo: void <init>()>
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>
<android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ComponentInfo: boolean isEnabled()>
<android.content.pm.ComponentInfo: int getIconResource()>
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.PatternMatcher: void <init>(java.lang.String,int)>
<android.os.PatternMatcher: void <init>(android.os.Parcel)>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.os.PatternMatcher: int getType()>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.os.PatternMatcher: java.lang.String toString()>
<android.os.PatternMatcher: int describeContents()>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<android.content.pm.PathPermission: void <init>(android.os.Parcel)>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
<android.os.RemoteException: void <init>()>
<android.os.RemoteException: void <init>(java.lang.String)>
<android.content.OperationApplicationException: void <init>()>
<android.content.OperationApplicationException: void <init>(java.lang.String)>
<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>
<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>
<android.content.OperationApplicationException: void <init>(int)>
<android.content.OperationApplicationException: void <init>(java.lang.String,int)>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<android.content.res.AssetFileDescriptor: void close()>
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>
<android.content.res.AssetFileDescriptor: java.lang.String toString()>
<android.content.res.AssetFileDescriptor: int describeContents()>
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: void <init>()>
<android.content.ContentValues: void <init>(int)>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.content.ContentValues: boolean equals(java.lang.Object)>
<android.content.ContentValues: int hashCode()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentValues: int size()>
<android.content.ContentValues: void remove(java.lang.String)>
<android.content.ContentValues: void clear()>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.content.ContentValues: java.util.Set valueSet()>
<android.content.ContentValues: java.util.Set keySet()>
<android.content.ContentValues: int describeContents()>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: java.lang.String toString()>
<android.content.ContentProviderResult: void <init>(android.net.Uri)>
<android.content.ContentProviderResult: void <init>(int)>
<android.content.ContentProviderResult: void <init>(android.os.Parcel)>
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderResult: int describeContents()>
<android.content.ContentProviderResult: java.lang.String toString()>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProviderClient: boolean release()>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>
<android.accounts.Account: void <init>(android.os.Parcel)>
<android.accounts.Account: boolean equals(java.lang.Object)>
<android.accounts.Account: int hashCode()>
<android.accounts.Account: int describeContents()>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<android.accounts.Account: java.lang.String toString()>
<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>
<android.content.SyncAdapterType: void <init>(android.os.Parcel)>
<android.content.SyncAdapterType: boolean supportsUploading()>
<android.content.SyncAdapterType: boolean isUserVisible()>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: boolean equals(java.lang.Object)>
<android.content.SyncAdapterType: int hashCode()>
<android.content.SyncAdapterType: java.lang.String toString()>
<android.content.SyncAdapterType: int describeContents()>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncInfo: int describeContents()>
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<android.content.res.ColorStateList: void <init>(int[][],int[])>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<android.content.res.ColorStateList: boolean isStateful()>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.content.res.ColorStateList: java.lang.String toString()>
<android.content.res.ColorStateList: int describeContents()>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<android.util.TypedValue: void <init>()>
<android.util.TypedValue: float getFloat()>
<android.util.TypedValue: float complexToFloat(int)>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.util.TypedValue: float getFraction(float,float)>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<android.util.TypedValue: java.lang.String toString()>
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
<android.text.Spannable$Factory: void <init>()>
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>
<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>
<android.graphics.Paint: void <init>()>
<android.graphics.Paint: void <init>(int)>
<android.graphics.Paint: void <init>(android.graphics.Paint)>
<android.graphics.Paint: void reset()>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: boolean isDither()>
<android.graphics.Paint: boolean isLinearText()>
<android.graphics.Paint: boolean isSubpixelText()>
<android.graphics.Paint: boolean isUnderlineText()>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()>
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<android.graphics.Paint: void clearShadowLayer()>
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<android.graphics.Paint: float getFontSpacing()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<com.facebook.internal.WorkQueue: void <init>()>
<com.facebook.internal.WorkQueue: void <init>(int)>
<com.facebook.internal.WorkQueue: void <init>(int,java.util.concurrent.Executor)>
<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkItem addActiveWorkItem(java.lang.Runnable)>
<com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkItem addActiveWorkItem(java.lang.Runnable,boolean)>
<com.facebook.internal.WorkQueue: void validate()>
<com.facebook.internal.ImageRequest: android.net.Uri getProfilePictureUri(java.lang.String,int,int)>
<com.facebook.internal.ImageRequest: android.content.Context getContext()>
<com.facebook.internal.ImageRequest: android.net.Uri getImageUri()>
<com.facebook.internal.ImageRequest: com.facebook.internal.ImageRequest$Callback getCallback()>
<com.facebook.internal.ImageRequest: boolean isCachedRedirectAllowed()>
<com.facebook.internal.ImageRequest: java.lang.Object getCallerTag()>
<com.facebook.internal.ImageDownloader$RequestKey: int hashCode()>
<com.facebook.internal.ImageDownloader$RequestKey: boolean equals(java.lang.Object)>
<com.facebook.internal.ImageDownloader$DownloadImageWorkItem: void run()>
<android.graphics.BitmapFactory: void <init>()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<com.facebook.internal.ImageDownloader$CacheReadWorkItem: void run()>
<com.facebook.internal.ImageDownloader$1: void run()>
<android.graphics.Point: void <init>()>
<android.graphics.Point: void <init>(int,int)>
<android.graphics.Point: void <init>(android.graphics.Point)>
<android.graphics.Point: void set(int,int)>
<android.graphics.Point: void negate()>
<android.graphics.Point: void offset(int,int)>
<android.graphics.Point: boolean equals(int,int)>
<android.graphics.Point: boolean equals(java.lang.Object)>
<android.graphics.Point: int hashCode()>
<android.graphics.Point: java.lang.String toString()>
<android.graphics.Point: int describeContents()>
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Point: void readFromParcel(android.os.Parcel)>
<android.view.View: void <init>(android.content.Context)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: void setFadingEdgeLength(int)>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.View: void setVerticalScrollbarPosition(int)>
<android.view.View: int getVerticalScrollbarPosition()>
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: boolean hasOnClickListeners()>
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>
<android.view.View: boolean performClick()>
<android.view.View: boolean callOnClick()>
<android.view.View: boolean performLongClick()>
<android.view.View: boolean showContextMenu()>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void clearFocus()>
<android.view.View: boolean hasFocus()>
<android.view.View: boolean hasFocusable()>
<android.view.View: void sendAccessibilityEvent(int)>
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
<android.view.View: java.lang.CharSequence getContentDescription()>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: boolean isFocused()>
<android.view.View: android.view.View findFocus()>
<android.view.View: void setScrollContainer(boolean)>
<android.view.View: int getDrawingCacheQuality()>
<android.view.View: void setDrawingCacheQuality(int)>
<android.view.View: boolean getKeepScreenOn()>
<android.view.View: void setKeepScreenOn(boolean)>
<android.view.View: int getNextFocusLeftId()>
<android.view.View: void setNextFocusLeftId(int)>
<android.view.View: int getNextFocusRightId()>
<android.view.View: void setNextFocusRightId(int)>
<android.view.View: int getNextFocusUpId()>
<android.view.View: void setNextFocusUpId(int)>
<android.view.View: int getNextFocusDownId()>
<android.view.View: void setNextFocusDownId(int)>
<android.view.View: int getNextFocusForwardId()>
<android.view.View: void setNextFocusForwardId(int)>
<android.view.View: boolean isShown()>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: boolean fitsSystemWindows()>
<android.view.View: int getVisibility()>
<android.view.View: void setVisibility(int)>
<android.view.View: boolean isEnabled()>
<android.view.View: void setEnabled(boolean)>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setSoundEffectsEnabled(boolean)>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: void setHapticFeedbackEnabled(boolean)>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: boolean willNotDraw()>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: boolean willNotCacheDrawing()>
<android.view.View: boolean isClickable()>
<android.view.View: void setClickable(boolean)>
<android.view.View: boolean isLongClickable()>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void setPressed(boolean)>
<android.view.View: boolean isPressed()>
<android.view.View: boolean isSaveEnabled()>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: boolean getFilterTouchesWhenObscured()>
<android.view.View: void setFilterTouchesWhenObscured(boolean)>
<android.view.View: boolean isSaveFromParentEnabled()>
<android.view.View: void setSaveFromParentEnabled(boolean)>
<android.view.View: boolean isFocusable()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.view.View: android.view.View focusSearch(int)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<android.view.View: void addFocusables(java.util.ArrayList,int,int)>
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<android.view.View: java.util.ArrayList getTouchables()>
<android.view.View: void addTouchables(java.util.ArrayList)>
<android.view.View: boolean requestFocus()>
<android.view.View: boolean requestFocus(int)>
<android.view.View: boolean requestFocus(int,android.graphics.Rect)>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: void onFinishTemporaryDetach()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: boolean hasWindowFocus()>
<android.view.View: void dispatchDisplayHint(int)>
<android.view.View: void dispatchWindowVisibilityChanged(int)>
<android.view.View: int getWindowVisibility()>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.view.View: boolean isInTouchMode()>
<android.view.View: android.content.Context getContext()>
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.view.View: boolean onCheckIsTextEditor()>
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.view.View: boolean checkInputConnectionProxy(android.view.View)>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean isHovered()>
<android.view.View: void setHovered(boolean)>
<android.view.View: void onHoverChanged(boolean)>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: void cancelLongPress()>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.view.View: void bringToFront()>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: void setScrollX(int)>
<android.view.View: void setScrollY(int)>
<android.view.View: int getScrollX()>
<android.view.View: int getScrollY()>
<android.view.View: int getWidth()>
<android.view.View: int getHeight()>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.view.View: int getMeasuredWidth()>
<android.view.View: int getMeasuredWidthAndState()>
<android.view.View: int getMeasuredHeight()>
<android.view.View: int getMeasuredHeightAndState()>
<android.view.View: int getMeasuredState()>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.view.View: void setCameraDistance(float)>
<android.view.View: float getRotation()>
<android.view.View: void setRotation(float)>
<android.view.View: float getRotationY()>
<android.view.View: void setRotationY(float)>
<android.view.View: float getRotationX()>
<android.view.View: void setRotationX(float)>
<android.view.View: float getScaleX()>
<android.view.View: void setScaleX(float)>
<android.view.View: float getScaleY()>
<android.view.View: void setScaleY(float)>
<android.view.View: float getPivotX()>
<android.view.View: void setPivotX(float)>
<android.view.View: float getPivotY()>
<android.view.View: void setPivotY(float)>
<android.view.View: float getAlpha()>
<android.view.View: void setAlpha(float)>
<android.view.View: int getTop()>
<android.view.View: void setTop(int)>
<android.view.View: int getBottom()>
<android.view.View: boolean isDirty()>
<android.view.View: void setBottom(int)>
<android.view.View: int getLeft()>
<android.view.View: void setLeft(int)>
<android.view.View: int getRight()>
<android.view.View: void setRight(int)>
<android.view.View: float getX()>
<android.view.View: void setX(float)>
<android.view.View: float getY()>
<android.view.View: void setY(float)>
<android.view.View: float getTranslationX()>
<android.view.View: void setTranslationX(float)>
<android.view.View: float getTranslationY()>
<android.view.View: void setTranslationY(float)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<android.view.View: void offsetTopAndBottom(int)>
<android.view.View: void offsetLeftAndRight(int)>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.View: void scrollTo(int,int)>
<android.view.View: void scrollBy(int,int)>
<android.view.View: void invalidate(android.graphics.Rect)>
<android.view.View: void invalidate(int,int,int,int)>
<android.view.View: void invalidate()>
<android.view.View: boolean isOpaque()>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: boolean post(java.lang.Runnable)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.View: void postInvalidate()>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.view.View: void computeScroll()>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.view.View: void setScrollbarFadingEnabled(boolean)>
<android.view.View: boolean isScrollbarFadingEnabled()>
<android.view.View: void setScrollBarStyle(int)>
<android.view.View: int getScrollBarStyle()>
<android.view.View: boolean canScrollHorizontally(int)>
<android.view.View: boolean canScrollVertically(int)>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: long getDrawingTime()>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<android.view.View: int getLayerType()>
<android.view.View: void buildLayer()>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.view.View: void destroyDrawingCache()>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.view.View: void buildDrawingCache()>
<android.view.View: void buildDrawingCache(boolean)>
<android.view.View: boolean isInEditMode()>
<android.view.View: boolean isHardwareAccelerated()>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View: int getSolidColor()>
<android.view.View: boolean isLayoutRequested()>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: android.content.res.Resources getResources()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void refreshDrawableState()>
<android.view.View: int[] getDrawableState()>
<android.view.View: void jumpDrawablesToCurrentState()>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: void setBackgroundResource(int)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.View: int getPaddingTop()>
<android.view.View: int getPaddingBottom()>
<android.view.View: int getPaddingLeft()>
<android.view.View: int getPaddingRight()>
<android.view.View: void setSelected(boolean)>
<android.view.View: boolean isSelected()>
<android.view.View: void setActivated(boolean)>
<android.view.View: boolean isActivated()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: android.view.View getRootView()>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: android.view.View findViewById(int)>
<android.view.View: android.view.View findViewWithTag(java.lang.Object)>
<android.view.View: void setId(int)>
<android.view.View: int getId()>
<android.view.View: java.lang.Object getTag()>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: java.lang.Object getTag(int)>
<android.view.View: void setTag(int,java.lang.Object)>
<android.view.View: int getBaseline()>
<android.view.View: void requestLayout()>
<android.view.View: void forceLayout()>
<android.view.View: void measure(int,int)>
<android.view.View: int combineMeasuredStates(int,int)>
<android.view.View: int resolveSize(int,int)>
<android.view.View: int resolveSizeAndState(int,int,int)>
<android.view.View: int getDefaultSize(int,int)>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: void setMinimumWidth(int)>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<android.view.View: void clearAnimation()>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.view.View: void playSoundEffect(int)>
<android.view.View: boolean performHapticFeedback(int)>
<android.view.View: boolean performHapticFeedback(int,int)>
<android.view.View: void setSystemUiVisibility(int)>
<android.view.View: int getSystemUiVisibility()>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean onDragEvent(android.view.DragEvent)>
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.view.View: int getOverScrollMode()>
<android.view.View: void setOverScrollMode(int)>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.view.WindowManager$BadTokenException: void <init>()>
<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>
<android.view.WindowManager$LayoutParams: void <init>()>
<android.view.WindowManager$LayoutParams: void <init>(int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>
<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<android.view.WindowManager$LayoutParams: int describeContents()>
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>
<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>
<android.view.WindowManager$LayoutParams: java.lang.String toString()>
<android.telephony.PhoneStateListener: void <init>()>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<android.os.Build$VERSION_CODES: void <init>()>
<android.database.CharArrayBuffer: void <init>(int)>
<android.database.CharArrayBuffer: void <init>(char[])>
<com.facebook.appevents.AppEventCollection: void <init>()>
<com.facebook.appevents.AppEventCollection: void addPersistedEvents(com.facebook.appevents.PersistedEvents)>
<com.facebook.appevents.AppEventCollection: void addEvent(com.facebook.appevents.AccessTokenAppIdPair,com.facebook.appevents.AppEvent)>
<com.facebook.appevents.AppEventCollection: java.util.Set keySet()>
<com.facebook.appevents.AppEventCollection: com.facebook.appevents.SessionEventsState get(com.facebook.appevents.AccessTokenAppIdPair)>
<com.facebook.appevents.AppEventCollection: int getEventCount()>
<com.facebook.appevents.SessionEventsState: void <init>(com.facebook.internal.AttributionIdentifiers,java.lang.String)>
<com.facebook.appevents.SessionEventsState: void addEvent(com.facebook.appevents.AppEvent)>
<com.facebook.appevents.SessionEventsState: int getAccumulatedEventCount()>
<com.facebook.appevents.SessionEventsState: void clearInFlightAndStats(boolean)>
<com.facebook.appevents.SessionEventsState: int populateRequest(com.facebook.GraphRequest,android.content.Context,boolean,boolean)>
<com.facebook.appevents.SessionEventsState: java.util.List getEventsToPersist()>
<com.facebook.appevents.SessionEventsState: void accumulatePersistedEvents(java.util.List)>
<com.facebook.appevents.AppEventQueue$2: void run()>
<com.facebook.appevents.AppEventQueue$1: void run()>
<com.facebook.appevents.FlushResult: com.facebook.appevents.FlushResult[] values()>
<com.facebook.appevents.FlushResult: com.facebook.appevents.FlushResult valueOf(java.lang.String)>
<com.facebook.appevents.AppEventQueue$6: void run()>
<com.facebook.appevents.AppEventQueue$5: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.appevents.AppEventQueue$4: void run()>
<com.facebook.appevents.AppEventQueue$3: void run()>
<com.facebook.appevents.PersistedEvents: void <init>()>
<com.facebook.appevents.PersistedEvents: void <init>(java.util.HashMap)>
<com.facebook.appevents.AppEventStore: void persistEvents(com.facebook.appevents.AccessTokenAppIdPair,com.facebook.appevents.SessionEventsState)>
<com.facebook.appevents.AppEventStore: void persistEvents(com.facebook.appevents.AppEventCollection)>
<com.facebook.appevents.AppEventStore: com.facebook.appevents.PersistedEvents readAndClearStore()>
<com.facebook.appevents.AppEventsLogger$PersistedAppSessionInfo$1: void run()>
<android.content.ContextWrapper: void <init>(android.content.Context)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: void setTheme(int)>
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.ContextWrapper: java.io.File getObbDir()>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: void startActivity(android.content.Intent)>
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.ContextWrapper: boolean isRestricted()>
<com.facebook.appevents.internal.SessionInfo: void <init>(java.lang.Long,java.lang.Long)>
<com.facebook.appevents.internal.SessionInfo: void <init>(java.lang.Long,java.lang.Long,java.util.UUID)>
<com.facebook.appevents.internal.SessionInfo: com.facebook.appevents.internal.SessionInfo getStoredSessionInfo()>
<com.facebook.appevents.internal.SessionInfo: void clearSavedSessionFromDisk()>
<com.facebook.appevents.internal.SessionInfo: java.lang.Long getSessionStartTime()>
<com.facebook.appevents.internal.SessionInfo: java.lang.Long getSessionLastEventTime()>
<com.facebook.appevents.internal.SessionInfo: void setSessionStartTime(java.lang.Long)>
<com.facebook.appevents.internal.SessionInfo: void setSessionLastEventTime(java.lang.Long)>
<com.facebook.appevents.internal.SessionInfo: int getInterruptionCount()>
<com.facebook.appevents.internal.SessionInfo: void incrementInterruptionCount()>
<com.facebook.appevents.internal.SessionInfo: long getDiskRestoreTime()>
<com.facebook.appevents.internal.SessionInfo: java.util.UUID getSessionId()>
<com.facebook.appevents.internal.SessionInfo: long getSessionLength()>
<com.facebook.appevents.internal.SessionInfo: com.facebook.appevents.internal.SourceApplicationInfo getSourceApplicationInfo()>
<com.facebook.appevents.internal.SessionInfo: void setSourceApplicationInfo(com.facebook.appevents.internal.SourceApplicationInfo)>
<com.facebook.appevents.internal.SessionInfo: void writeSessionToDisk()>
<com.facebook.appevents.internal.ActivityLifecycleTracker$4: void run()>
<com.facebook.appevents.internal.ActivityLifecycleTracker$3: void run()>
<com.facebook.appevents.internal.ActivityLifecycleTracker$2: void run()>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityCreated(android.app.Activity,android.os.Bundle)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityStarted(android.app.Activity)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityResumed(android.app.Activity)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityPaused(android.app.Activity)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityStopped(android.app.Activity)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$1: void onActivityDestroyed(android.app.Activity)>
<android.view.ContextThemeWrapper: void <init>()>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
<android.view.ContextThemeWrapper: void setTheme(int)>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.graphics.Canvas: void <init>()>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<android.graphics.Canvas: boolean isHardwareAccelerated()>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: int getDensity()>
<android.graphics.Canvas: void setDensity(int)>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region)>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.Canvas: void drawColor(int)>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.app.Fragment: void <init>()>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<android.app.Fragment: boolean equals(java.lang.Object)>
<android.app.Fragment: int hashCode()>
<android.app.Fragment: java.lang.String toString()>
<android.app.Fragment: int getId()>
<android.app.Fragment: java.lang.String getTag()>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<android.app.Fragment: android.os.Bundle getArguments()>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.app.Fragment: int getTargetRequestCode()>
<android.app.Fragment: android.app.Activity getActivity()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: java.lang.CharSequence getText(int)>
<android.app.Fragment: java.lang.String getString(int)>
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.app.Fragment: boolean isAdded()>
<android.app.Fragment: boolean isDetached()>
<android.app.Fragment: boolean isRemoving()>
<android.app.Fragment: boolean isInLayout()>
<android.app.Fragment: boolean isResumed()>
<android.app.Fragment: boolean isVisible()>
<android.app.Fragment: boolean isHidden()>
<android.app.Fragment: void onHiddenChanged(boolean)>
<android.app.Fragment: void setRetainInstance(boolean)>
<android.app.Fragment: boolean getRetainInstance()>
<android.app.Fragment: void setHasOptionsMenu(boolean)>
<android.app.Fragment: void setMenuVisibility(boolean)>
<android.app.Fragment: void setUserVisibleHint(boolean)>
<android.app.Fragment: boolean getUserVisibleHint()>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.app.Fragment: void startActivity(android.content.Intent)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onAttach(android.app.Activity)>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.app.Fragment: void onCreate(android.os.Bundle)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.app.Fragment: android.view.View getView()>
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>
<android.app.Fragment: void onStart()>
<android.app.Fragment: void onResume()>
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Fragment: void onPause()>
<android.app.Fragment: void onStop()>
<android.app.Fragment: void onLowMemory()>
<android.app.Fragment: void onTrimMemory(int)>
<android.app.Fragment: void onDestroyView()>
<android.app.Fragment: void onDestroy()>
<android.app.Fragment: void onDetach()>
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.app.Fragment: void onDestroyOptionsMenu()>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Fragment: void registerForContextMenu(android.view.View)>
<android.app.Fragment: void unregisterForContextMenu(android.view.View)>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup$LayoutParams: void <init>(int,int)>
<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.view.KeyEvent: void <init>(int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>
<android.view.KeyEvent: boolean isSystem()>
<android.view.KeyEvent: boolean isGamepadButton(int)>
<android.view.KeyEvent: int getDeviceId()>
<android.view.KeyEvent: int getSource()>
<android.view.KeyEvent: void setSource(int)>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: int getModifiers()>
<android.view.KeyEvent: int getFlags()>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.KeyEvent: int normalizeMetaState(int)>
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.view.KeyEvent: boolean isAltPressed()>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.view.KeyEvent: boolean isSymPressed()>
<android.view.KeyEvent: boolean isCtrlPressed()>
<android.view.KeyEvent: boolean isMetaPressed()>
<android.view.KeyEvent: boolean isFunctionPressed()>
<android.view.KeyEvent: boolean isCapsLockOn()>
<android.view.KeyEvent: boolean isNumLockOn()>
<android.view.KeyEvent: boolean isScrollLockOn()>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: boolean isCanceled()>
<android.view.KeyEvent: void startTracking()>
<android.view.KeyEvent: boolean isTracking()>
<android.view.KeyEvent: boolean isLongPress()>
<android.view.KeyEvent: int getKeyCode()>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.view.KeyEvent: int getScanCode()>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: long getDownTime()>
<android.view.KeyEvent: long getEventTime()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<android.view.KeyEvent: char getMatch(char[])>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.view.KeyEvent: char getNumber()>
<android.view.KeyEvent: boolean isPrintingKey()>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>
<android.view.KeyEvent: java.lang.String toString()>
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.view.MotionEvent: void recycle()>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: int getSource()>
<android.view.MotionEvent: void setSource(int)>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: int getActionMasked()>
<android.view.MotionEvent: int getActionIndex()>
<android.view.MotionEvent: int getFlags()>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getPressure()>
<android.view.MotionEvent: float getSize()>
<android.view.MotionEvent: float getTouchMajor()>
<android.view.MotionEvent: float getTouchMinor()>
<android.view.MotionEvent: float getToolMajor()>
<android.view.MotionEvent: float getToolMinor()>
<android.view.MotionEvent: float getOrientation()>
<android.view.MotionEvent: float getAxisValue(int)>
<android.view.MotionEvent: int getPointerCount()>
<android.view.MotionEvent: int getPointerId(int)>
<android.view.MotionEvent: int getToolType(int)>
<android.view.MotionEvent: int findPointerIndex(int)>
<android.view.MotionEvent: float getX(int)>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getPressure(int)>
<android.view.MotionEvent: float getSize(int)>
<android.view.MotionEvent: float getTouchMajor(int)>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.view.MotionEvent: float getToolMajor(int)>
<android.view.MotionEvent: float getToolMinor(int)>
<android.view.MotionEvent: float getOrientation(int)>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: int getButtonState()>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: float getXPrecision()>
<android.view.MotionEvent: float getYPrecision()>
<android.view.MotionEvent: int getHistorySize()>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: int getEdgeFlags()>
<android.view.MotionEvent: void setEdgeFlags(int)>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.view.MotionEvent: void setLocation(float,float)>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>
<android.view.MotionEvent: java.lang.String toString()>
<android.view.MotionEvent: java.lang.String axisToString(int)>
<android.view.MotionEvent: int axisFromString(java.lang.String)>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>
<android.view.accessibility.AccessibilityEvent: void recycle()>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityEvent: int describeContents()>
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>
<android.app.Dialog: void <init>(android.content.Context)>
<android.app.Dialog: void <init>(android.content.Context,int)>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void show()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: android.view.View getCurrentFocus()>
<android.app.Dialog: android.view.View findViewById(int)>
<android.app.Dialog: void setContentView(int)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void setTitle(java.lang.CharSequence)>
<android.app.Dialog: void setTitle(int)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Dialog: void onBackPressed()>
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Dialog: void onContentChanged()>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.Dialog: void onAttachedToWindow()>
<android.app.Dialog: void onDetachedFromWindow()>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Dialog: void openOptionsMenu()>
<android.app.Dialog: void closeOptionsMenu()>
<android.app.Dialog: void invalidateOptionsMenu()>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Dialog: void registerForContextMenu(android.view.View)>
<android.app.Dialog: void unregisterForContextMenu(android.view.View)>
<android.app.Dialog: void openContextMenu(android.view.View)>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: void setFeatureDrawableResource(int,int)>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void cancel()>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.app.Dialog: int getVolumeControlStream()>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.view.MenuInflater: void <init>(android.content.Context)>
<android.view.MenuInflater: void inflate(int,android.view.Menu)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<android.app.PendingIntent: void cancel()>
<android.app.PendingIntent: void send()>
<android.app.PendingIntent: void send(int)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: boolean equals(java.lang.Object)>
<android.app.PendingIntent: int hashCode()>
<android.app.PendingIntent: java.lang.String toString()>
<android.app.PendingIntent: int describeContents()>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.graphics.ColorFilter: void <init>()>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>
<android.graphics.Region: void <init>()>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Region: void <init>(android.graphics.Rect)>
<android.graphics.Region: void <init>(int,int,int,int)>
<android.graphics.Region: void setEmpty()>
<android.graphics.Region: boolean set(android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<android.graphics.Region: void translate(int,int)>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: java.lang.String toString()>
<android.graphics.Region: int describeContents()>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: boolean equals(java.lang.Object)>
<android.graphics.BitmapFactory$Options: void <init>()>
<android.graphics.BitmapFactory$Options: void requestCancelDecode()>
<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>
<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>
<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>
<android.content.IntentFilter$AuthorityEntry: int getPort()>
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>
<com.facebook.Profile$1: void onSuccess(org.json.JSONObject)>
<com.facebook.Profile$1: void onFailure(com.facebook.FacebookException)>
<com.facebook.Profile$2: com.facebook.Profile createFromParcel(android.os.Parcel)>
<com.facebook.Profile$2: com.facebook.Profile[] newArray(int)>
<com.facebook.Profile$2: java.lang.Object[] newArray(int)>
<com.facebook.Profile$2: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareOpenGraphObject$Builder: void <init>()>
<com.facebook.share.model.ShareOpenGraphObject$Builder: com.facebook.share.model.ShareOpenGraphObject build()>
<com.facebook.share.model.ShareOpenGraphObject$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareOpenGraphObject$1: com.facebook.share.model.ShareOpenGraphObject createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareOpenGraphObject$1: com.facebook.share.model.ShareOpenGraphObject[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphObject$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphObject$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)>
<com.facebook.share.model.ShareOpenGraphAction: java.lang.String getActionType()>
<com.facebook.share.model.SharePhoto: android.graphics.Bitmap getBitmap()>
<com.facebook.share.model.SharePhoto: android.net.Uri getImageUrl()>
<com.facebook.share.model.SharePhoto: boolean getUserGenerated()>
<com.facebook.share.model.SharePhoto: java.lang.String getCaption()>
<com.facebook.share.model.SharePhoto: int describeContents()>
<com.facebook.share.model.SharePhoto: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.SharePhoto: com.facebook.share.model.ShareMedia$Type getMediaType()>
<com.facebook.internal.BundleJSONConverter: void <init>()>
<com.facebook.internal.BundleJSONConverter: org.json.JSONObject convertToJSON(android.os.Bundle)>
<com.facebook.internal.BundleJSONConverter: android.os.Bundle convertToBundle(org.json.JSONObject)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType$1: com.facebook.GraphRequest$ParcelableResourceWithMimeType createFromParcel(android.os.Parcel)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType$1: com.facebook.GraphRequest$ParcelableResourceWithMimeType[] newArray(int)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType$1: java.lang.Object[] newArray(int)>
<com.facebook.GraphRequest$ParcelableResourceWithMimeType$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)>
<android.graphics.Matrix: void <init>()>
<android.graphics.Matrix: void <init>(android.graphics.Matrix)>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.graphics.Matrix: boolean equals(java.lang.Object)>
<android.graphics.Matrix: void reset()>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<android.graphics.Matrix: void setSkew(float,float)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.graphics.Matrix: float mapRadius(float)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: java.lang.String toString()>
<android.graphics.Matrix: java.lang.String toShortString()>
<com.facebook.ProgressOutputStream$1: void run()>
<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
<android.database.SQLException: void <init>()>
<android.database.SQLException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void finish()>
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>
<android.content.res.AssetManager$AssetInputStream: int read()>
<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>
<android.content.res.AssetManager$AssetInputStream: int available()>
<android.content.res.AssetManager$AssetInputStream: void close()>
<android.content.res.AssetManager$AssetInputStream: void mark(int)>
<android.content.res.AssetManager$AssetInputStream: void reset()>
<android.content.res.AssetManager$AssetInputStream: int read(byte[])>
<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>
<android.content.res.AssetManager$AssetInputStream: long skip(long)>
<android.database.sqlite.SQLiteQuery: java.lang.String toString()>
<android.database.sqlite.SQLiteQuery: void close()>
<android.os.Messenger: void <init>(android.os.Handler)>
<android.os.Messenger: void <init>(android.os.IBinder)>
<android.os.Messenger: void send(android.os.Message)>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.os.Messenger: boolean equals(java.lang.Object)>
<android.os.Messenger: int hashCode()>
<android.os.Messenger: int describeContents()>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>
<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()>
<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)>
<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()>
<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)>
<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()>
<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)>
<android.graphics.Path: void <init>()>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.graphics.Path: void reset()>
<android.graphics.Path: void rewind()>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>
<android.graphics.Path: boolean isInverseFillType()>
<android.graphics.Path: void toggleInverseFillType()>
<android.graphics.Path: boolean isEmpty()>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: void incReserve(int)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.graphics.Path: void close()>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: void setLastPoint(float,float)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.Path: void transform(android.graphics.Matrix)>
<android.graphics.Shader: void <init>()>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<android.graphics.Xfermode: void <init>()>
<android.graphics.PathEffect: void <init>()>
<android.graphics.MaskFilter: void <init>()>
<android.graphics.Typeface: int getStyle()>
<android.graphics.Typeface: boolean isBold()>
<android.graphics.Typeface: boolean isItalic()>
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.graphics.Rasterizer: void <init>()>
<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()>
<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)>
<android.graphics.Paint$FontMetrics: void <init>()>
<android.graphics.Paint$FontMetricsInt: void <init>()>
<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>
<com.facebook.internal.WorkQueue$WorkNode: boolean cancel()>
<com.facebook.internal.WorkQueue$WorkNode: void moveToFront()>
<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning()>
<com.facebook.internal.WorkQueue$1: void run()>
<com.facebook.internal.FileLruCache: void <init>(java.lang.String,com.facebook.internal.FileLruCache$Limits)>
<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>
<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>
<com.facebook.internal.FileLruCache: java.io.OutputStream openPutStream(java.lang.String)>
<com.facebook.internal.FileLruCache: java.io.OutputStream openPutStream(java.lang.String,java.lang.String)>
<com.facebook.internal.FileLruCache: void clearCache()>
<com.facebook.internal.FileLruCache: java.lang.String getLocation()>
<com.facebook.internal.FileLruCache: java.io.InputStream interceptAndPut(java.lang.String,java.io.InputStream)>
<com.facebook.internal.FileLruCache: java.lang.String toString()>
<com.facebook.internal.FileLruCache$Limits: void <init>()>
<com.facebook.internal.ImageRequest$Builder: void <init>(android.content.Context,android.net.Uri)>
<com.facebook.internal.ImageRequest$Builder: com.facebook.internal.ImageRequest$Builder setCallback(com.facebook.internal.ImageRequest$Callback)>
<com.facebook.internal.ImageRequest$Builder: com.facebook.internal.ImageRequest$Builder setCallerTag(java.lang.Object)>
<com.facebook.internal.ImageRequest$Builder: com.facebook.internal.ImageRequest$Builder setAllowCachedRedirects(boolean)>
<com.facebook.internal.ImageRequest$Builder: com.facebook.internal.ImageRequest build()>
<com.facebook.internal.ImageResponse: com.facebook.internal.ImageRequest getRequest()>
<com.facebook.internal.ImageResponse: java.lang.Exception getError()>
<com.facebook.internal.ImageResponse: android.graphics.Bitmap getBitmap()>
<com.facebook.internal.ImageResponse: boolean isCachedRedirect()>
<com.facebook.internal.ImageResponseCache$BufferedHttpInputStream: void close()>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>
<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>
<android.view.View$AccessibilityDelegate: void <init>()>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.KeyEvent$DispatcherState: void <init>()>
<android.view.KeyEvent$DispatcherState: void reset()>
<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>
<android.view.inputmethod.EditorInfo: void <init>()>
<android.view.inputmethod.EditorInfo: void makeCompatible(int)>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.EditorInfo: int describeContents()>
<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<android.content.ClipData: int getItemCount()>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.content.ClipData: int describeContents()>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<android.view.View$DragShadowBuilder: void <init>(android.view.View)>
<android.view.View$DragShadowBuilder: void <init>()>
<android.view.View$DragShadowBuilder: android.view.View getView()>
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.view.DragEvent: int getAction()>
<android.view.DragEvent: float getX()>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.view.DragEvent: boolean getResult()>
<android.view.DragEvent: java.lang.String toString()>
<android.view.DragEvent: int describeContents()>
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: void start()>
<android.view.ViewPropertyAnimator: void cancel()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>
<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>
<android.view.View$MeasureSpec: void <init>()>
<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
<android.view.View$MeasureSpec: int getMode(int)>
<android.view.View$MeasureSpec: int getSize(int)>
<android.view.View$MeasureSpec: java.lang.String toString(int)>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: boolean hasFormData()>
<android.webkit.WebViewDatabase: void clearFormData()>
<android.telephony.ServiceState: void <init>()>
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>
<android.telephony.ServiceState: void <init>(android.os.Parcel)>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ServiceState: int describeContents()>
<android.telephony.ServiceState: int getState()>
<android.telephony.ServiceState: boolean getRoaming()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.telephony.ServiceState: int hashCode()>
<android.telephony.ServiceState: boolean equals(java.lang.Object)>
<android.telephony.ServiceState: java.lang.String toString()>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.telephony.ServiceState: void setStateOff()>
<android.telephony.ServiceState: void setState(int)>
<android.telephony.ServiceState: void setRoaming(boolean)>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalStrength: int describeContents()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.telephony.SignalStrength: int getCdmaDbm()>
<android.telephony.SignalStrength: int getCdmaEcio()>
<android.telephony.SignalStrength: int getEvdoDbm()>
<android.telephony.SignalStrength: int getEvdoEcio()>
<android.telephony.SignalStrength: int getEvdoSnr()>
<android.telephony.SignalStrength: boolean isGsm()>
<android.telephony.SignalStrength: int hashCode()>
<android.telephony.SignalStrength: boolean equals(java.lang.Object)>
<android.telephony.SignalStrength: java.lang.String toString()>
<com.facebook.appevents.AppEventStore$MovedClassObjectInputStream: void <init>(java.io.InputStream)>
<com.facebook.appevents.internal.ActivityLifecycleTracker$4$1: void run()>
<com.facebook.appevents.internal.SourceApplicationInfo: com.facebook.appevents.internal.SourceApplicationInfo getStoredSourceApplicatioInfo()>
<com.facebook.appevents.internal.SourceApplicationInfo: void clearSavedSourceApplicationInfoFromDisk()>
<com.facebook.appevents.internal.SourceApplicationInfo: java.lang.String getCallingApplicationPackage()>
<com.facebook.appevents.internal.SourceApplicationInfo: boolean isOpenedByApplink()>
<com.facebook.appevents.internal.SourceApplicationInfo: java.lang.String toString()>
<com.facebook.appevents.internal.SourceApplicationInfo: void writeSourceApplicationInfoToDisk()>
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)>
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>
<com.facebook.appevents.internal.SessionLogger: void logActivateApp(android.content.Context,java.lang.String,com.facebook.appevents.internal.SourceApplicationInfo,java.lang.String)>
<com.facebook.appevents.internal.SessionLogger: void logDeactivateApp(android.content.Context,java.lang.String,com.facebook.appevents.internal.SessionInfo,java.lang.String)>
<com.facebook.appevents.internal.SourceApplicationInfo$Factory: void <init>()>
<com.facebook.appevents.internal.SourceApplicationInfo$Factory: com.facebook.appevents.internal.SourceApplicationInfo create(android.app.Activity)>
<android.app.PendingIntent$CanceledException: void <init>()>
<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>
<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>
<android.graphics.RectF: void <init>()>
<android.graphics.RectF: void <init>(float,float,float,float)>
<android.graphics.RectF: void <init>(android.graphics.RectF)>
<android.graphics.RectF: void <init>(android.graphics.Rect)>
<android.graphics.RectF: java.lang.String toString()>
<android.graphics.RectF: java.lang.String toShortString()>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: float width()>
<android.graphics.RectF: float height()>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: void setEmpty()>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.RectF: void offsetTo(float,float)>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: boolean contains(float,float)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<android.graphics.RectF: void union(float,float,float,float)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.graphics.RectF: void union(float,float)>
<android.graphics.RectF: void sort()>
<android.graphics.RectF: int describeContents()>
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.RectF: void readFromParcel(android.os.Parcel)>
<android.graphics.Region$Op: android.graphics.Region$Op[] values()>
<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)>
<android.graphics.DrawFilter: void <init>()>
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()>
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)>
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()>
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)>
<android.graphics.Picture: void <init>()>
<android.graphics.Picture: void <init>(android.graphics.Picture)>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>
<android.graphics.Picture: void writeToStream(java.io.OutputStream)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.view.accessibility.AccessibilityRecord: boolean isChecked()>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isPassword()>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>
<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>
<android.app.Fragment$SavedState: int describeContents()>
<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<android.view.KeyCharacterMap: boolean deviceHasKey(int)>
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap$KeyData: void <init>()>
<android.view.MotionEvent$PointerProperties: void <init>()>
<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent$PointerProperties: void clear()>
<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent$PointerCoords: void <init>()>
<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent$PointerCoords: void clear()>
<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>
<android.content.Loader: void <init>(android.content.Context)>
<android.content.Loader: void deliverResult(java.lang.Object)>
<android.content.Loader: android.content.Context getContext()>
<android.content.Loader: int getId()>
<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: boolean isStarted()>
<android.content.Loader: boolean isAbandoned()>
<android.content.Loader: boolean isReset()>
<android.content.Loader: void startLoading()>
<android.content.Loader: void forceLoad()>
<android.content.Loader: void stopLoading()>
<android.content.Loader: void abandon()>
<android.content.Loader: void reset()>
<android.content.Loader: boolean takeContentChanged()>
<android.content.Loader: void onContentChanged()>
<android.content.Loader: java.lang.String dataToString(java.lang.Object)>
<android.content.Loader: java.lang.String toString()>
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.ActionBar$LayoutParams: void <init>(int,int)>
<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>
<android.app.ActionBar$LayoutParams: void <init>(int)>
<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>
<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.view.InflateException: void <init>()>
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>
<android.view.InflateException: void <init>(java.lang.String)>
<android.view.InflateException: void <init>(java.lang.Throwable)>
<android.graphics.PorterDuff: void <init>()>
<com.facebook.RequestProgress$1: void run()>
<com.facebook.share.model.SharePhoto$Builder: void <init>()>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto$Builder setBitmap(android.graphics.Bitmap)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto$Builder setImageUrl(android.net.Uri)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto$Builder setUserGenerated(boolean)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto$Builder setCaption(java.lang.String)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto build()>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.SharePhoto$Builder readFrom(com.facebook.share.model.SharePhoto)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.ShareMedia$Builder readFrom(com.facebook.share.model.ShareMedia)>
<com.facebook.share.model.SharePhoto$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.SharePhoto$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareMedia$Type: com.facebook.share.model.ShareMedia$Type[] values()>
<com.facebook.share.model.ShareMedia$Type: com.facebook.share.model.ShareMedia$Type valueOf(java.lang.String)>
<com.facebook.share.model.SharePhoto$1: com.facebook.share.model.SharePhoto createFromParcel(android.os.Parcel)>
<com.facebook.share.model.SharePhoto$1: com.facebook.share.model.SharePhoto[] newArray(int)>
<com.facebook.share.model.SharePhoto$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.SharePhoto$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareOpenGraphAction$Builder: void <init>()>
<com.facebook.share.model.ShareOpenGraphAction$Builder: com.facebook.share.model.ShareOpenGraphAction$Builder setActionType(java.lang.String)>
<com.facebook.share.model.ShareOpenGraphAction$Builder: com.facebook.share.model.ShareOpenGraphAction build()>
<com.facebook.share.model.ShareOpenGraphAction$Builder: com.facebook.share.model.ShareOpenGraphAction$Builder readFrom(com.facebook.share.model.ShareOpenGraphAction)>
<com.facebook.share.model.ShareOpenGraphAction$Builder: com.facebook.share.model.ShareOpenGraphValueContainer$Builder readFrom(com.facebook.share.model.ShareOpenGraphValueContainer)>
<com.facebook.share.model.ShareOpenGraphAction$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareOpenGraphAction$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareOpenGraphAction$1: com.facebook.share.model.ShareOpenGraphAction createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareOpenGraphAction$1: com.facebook.share.model.ShareOpenGraphAction[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphAction$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphAction$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.internal.BundleJSONConverter$1: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$1: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$3: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$3: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$2: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$2: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$5: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$5: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$4: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$4: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$7: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$7: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$6: void setOnBundle(android.os.Bundle,java.lang.String,java.lang.Object)>
<com.facebook.internal.BundleJSONConverter$6: void setOnJSON(org.json.JSONObject,java.lang.String,java.lang.Object)>
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()>
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)>
<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()>
<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)>
<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()>
<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)>
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()>
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)>
<com.facebook.internal.FileLruCache$2: void run()>
<com.facebook.internal.FileLruCache$1: void onClose()>
<com.facebook.internal.FileLruCache$3: void run()>
<com.facebook.internal.FileLruCache$CopyingInputStream: int available()>
<com.facebook.internal.FileLruCache$CopyingInputStream: void close()>
<com.facebook.internal.FileLruCache$CopyingInputStream: void mark(int)>
<com.facebook.internal.FileLruCache$CopyingInputStream: boolean markSupported()>
<com.facebook.internal.FileLruCache$CopyingInputStream: int read(byte[])>
<com.facebook.internal.FileLruCache$CopyingInputStream: int read()>
<com.facebook.internal.FileLruCache$CopyingInputStream: int read(byte[],int,int)>
<com.facebook.internal.FileLruCache$CopyingInputStream: void reset()>
<com.facebook.internal.FileLruCache$CopyingInputStream: long skip(long)>
<com.facebook.internal.FileLruCache$CloseCallbackOutputStream: void close()>
<com.facebook.internal.FileLruCache$CloseCallbackOutputStream: void flush()>
<com.facebook.internal.FileLruCache$CloseCallbackOutputStream: void write(byte[],int,int)>
<com.facebook.internal.FileLruCache$CloseCallbackOutputStream: void write(byte[])>
<com.facebook.internal.FileLruCache$CloseCallbackOutputStream: void write(int)>
<com.facebook.internal.FileLruCache$ModifiedFile: int compareTo(com.facebook.internal.FileLruCache$ModifiedFile)>
<com.facebook.internal.FileLruCache$ModifiedFile: boolean equals(java.lang.Object)>
<com.facebook.internal.FileLruCache$ModifiedFile: int hashCode()>
<com.facebook.internal.FileLruCache$ModifiedFile: int compareTo(java.lang.Object)>
<android.view.animation.Transformation: void <init>()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: int getTransformationType()>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: float getAlpha()>
<android.view.animation.Transformation: java.lang.String toString()>
<android.view.animation.Transformation: java.lang.String toShortString()>
<android.view.ViewDebug: void <init>()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void stopRecyclerTracing()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void stopHierarchyTracing()>
<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>
<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>
<android.content.ClipDescription: void <init>(android.content.ClipDescription)>
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>
<android.content.ClipDescription: int getMimeTypeCount()>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<android.content.ClipDescription: int describeContents()>
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>
<android.animation.LayoutTransition: void <init>()>
<android.animation.LayoutTransition: void setDuration(long)>
<android.animation.LayoutTransition: void setStartDelay(int,long)>
<android.animation.LayoutTransition: long getStartDelay(int)>
<android.animation.LayoutTransition: void setDuration(int,long)>
<android.animation.LayoutTransition: long getDuration(int)>
<android.animation.LayoutTransition: void setStagger(int,long)>
<android.animation.LayoutTransition: long getStagger(int)>
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.animation.LayoutTransition: boolean isRunning()>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>
<android.view.inputmethod.ExtractedText: void <init>()>
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedText: int describeContents()>
<android.view.inputmethod.ExtractedTextRequest: void <init>()>
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedTextRequest: int describeContents()>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>
<android.view.inputmethod.CompletionInfo: long getId()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>
<android.view.inputmethod.CompletionInfo: java.lang.String toString()>
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CompletionInfo: int describeContents()>
<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CorrectionInfo: int describeContents()>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>
<android.content.ClipData$Item: void <init>(android.content.Intent)>
<android.content.ClipData$Item: void <init>(android.net.Uri)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>
<android.content.ClipData$Item: java.lang.CharSequence getText()>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<android.content.ClipData$Item: android.net.Uri getUri()>
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()>
<android.preference.PreferenceScreen: void bind(android.widget.ListView)>
<android.preference.PreferenceScreen: void onDismiss(android.content.DialogInterface)>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<android.preference.PreferenceScreen: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.Preference: void <init>(android.content.Context)>
<android.preference.Preference: void setIntent(android.content.Intent)>
<android.preference.Preference: android.content.Intent getIntent()>
<android.preference.Preference: void setFragment(java.lang.String)>
<android.preference.Preference: java.lang.String getFragment()>
<android.preference.Preference: android.os.Bundle getExtras()>
<android.preference.Preference: android.os.Bundle peekExtras()>
<android.preference.Preference: void setLayoutResource(int)>
<android.preference.Preference: int getLayoutResource()>
<android.preference.Preference: void setWidgetLayoutResource(int)>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)>
<android.preference.Preference: void setOrder(int)>
<android.preference.Preference: int getOrder()>
<android.preference.Preference: void setTitle(java.lang.CharSequence)>
<android.preference.Preference: void setTitle(int)>
<android.preference.Preference: int getTitleRes()>
<android.preference.Preference: java.lang.CharSequence getTitle()>
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)>
<android.preference.Preference: void setIcon(int)>
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()>
<android.preference.Preference: java.lang.CharSequence getSummary()>
<android.preference.Preference: void setSummary(java.lang.CharSequence)>
<android.preference.Preference: void setSummary(int)>
<android.preference.Preference: void setEnabled(boolean)>
<android.preference.Preference: boolean isEnabled()>
<android.preference.Preference: void setSelectable(boolean)>
<android.preference.Preference: boolean isSelectable()>
<android.preference.Preference: void setShouldDisableView(boolean)>
<android.preference.Preference: boolean getShouldDisableView()>
<android.preference.Preference: void setKey(java.lang.String)>
<android.preference.Preference: java.lang.String getKey()>
<android.preference.Preference: boolean hasKey()>
<android.preference.Preference: boolean isPersistent()>
<android.preference.Preference: void setPersistent(boolean)>
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()>
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()>
<android.preference.Preference: android.content.Context getContext()>
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()>
<android.preference.Preference: boolean shouldCommit()>
<android.preference.Preference: int compareTo(android.preference.Preference)>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.Preference: void notifyDependencyChange(boolean)>
<android.preference.Preference: void onDependencyChanged(android.preference.Preference,boolean)>
<android.preference.Preference: boolean shouldDisableDependents()>
<android.preference.Preference: void setDependency(java.lang.String)>
<android.preference.Preference: java.lang.String getDependency()>
<android.preference.Preference: void setDefaultValue(java.lang.Object)>
<android.preference.Preference: java.lang.String toString()>
<android.preference.Preference: void saveHierarchyState(android.os.Bundle)>
<android.preference.Preference: void restoreHierarchyState(android.os.Bundle)>
<android.preference.Preference: int compareTo(java.lang.Object)>
<android.view.InputDevice: android.view.InputDevice getDevice(int)>
<android.view.InputDevice: int[] getDeviceIds()>
<android.view.InputDevice: int getId()>
<android.view.InputDevice: java.lang.String getName()>
<android.view.InputDevice: int getSources()>
<android.view.InputDevice: int getKeyboardType()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>
<android.view.InputDevice: java.util.List getMotionRanges()>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<android.view.InputDevice: int describeContents()>
<android.view.InputDevice: java.lang.String toString()>
<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>
<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>
<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>
<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>
<android.util.AndroidRuntimeException: void <init>()>
<android.util.AndroidRuntimeException: void <init>(java.lang.String)>
<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>
<com.facebook.internal.FileLruCache$BufferFile$2: boolean accept(java.io.File,java.lang.String)>
<com.facebook.internal.FileLruCache$BufferFile$1: boolean accept(java.io.File,java.lang.String)>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)>
<android.widget.ListView: void <init>(android.content.Context)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListView: int getMaxScrollAmount()>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: void addHeaderView(android.view.View)>
<android.widget.ListView: int getHeaderViewsCount()>
<android.widget.ListView: boolean removeHeaderView(android.view.View)>
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: void addFooterView(android.view.View)>
<android.widget.ListView: int getFooterViewsCount()>
<android.widget.ListView: boolean removeFooterView(android.view.View)>
<android.widget.ListView: android.widget.ListAdapter getAdapter()>
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.widget.ListView: void smoothScrollToPosition(int)>
<android.widget.ListView: void smoothScrollByOffset(int)>
<android.widget.ListView: void setSelection(int)>
<android.widget.ListView: void setSelectionFromTop(int,int)>
<android.widget.ListView: void setSelectionAfterHeaderView()>
<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.widget.ListView: boolean isOpaque()>
<android.widget.ListView: void setCacheColorHint(int)>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.widget.ListView: int getDividerHeight()>
<android.widget.ListView: void setDividerHeight(int)>
<android.widget.ListView: void setHeaderDividersEnabled(boolean)>
<android.widget.ListView: void setFooterDividersEnabled(boolean)>
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>
<android.widget.ListView: long[] getCheckItemIds()>
<android.widget.ListView: void setAdapter(android.widget.Adapter)>
<android.widget.ListView: android.widget.Adapter getAdapter()>
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcel)>
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcelable)>
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.Surface: java.lang.String toString()>
<android.view.Surface: int describeContents()>
<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>
<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>
<android.view.InputDevice$MotionRange: int getAxis()>
<android.view.InputDevice$MotionRange: int getSource()>
<android.view.InputDevice$MotionRange: float getMin()>
<android.view.InputDevice$MotionRange: float getMax()>
<android.view.InputDevice$MotionRange: float getRange()>
<android.view.InputDevice$MotionRange: float getFlat()>
<android.view.InputDevice$MotionRange: float getFuzz()>
<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>
<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>
<android.view.Surface$OutOfResourcesException: void <init>()>
<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>
<android.graphics.SurfaceTexture: void <init>(int)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>
<android.graphics.SurfaceTexture: void updateTexImage()>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.SurfaceTexture: void release()>
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView$LayoutParams: void <init>(int,int)>
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>
<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.RemoteViews: void <init>(java.lang.String,int)>
<android.widget.RemoteViews: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: android.widget.RemoteViews clone()>
<android.widget.RemoteViews: java.lang.String getPackage()>
<android.widget.RemoteViews: int getLayoutId()>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.widget.RemoteViews: void showNext(int)>
<android.widget.RemoteViews: void showPrevious(int)>
<android.widget.RemoteViews: void setDisplayedChild(int,int)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setImageViewResource(int,int)>
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setEmptyView(int,int)>
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>
<android.widget.RemoteViews: void setTextColor(int,int)>
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>
<android.widget.RemoteViews: void setScrollPosition(int,int)>
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>
<android.widget.RemoteViews: int describeContents()>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews: java.lang.Object clone()>
<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>
<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>
<android.text.Editable$Factory: void <init>()>
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>
<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>
<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>
<android.text.NoCopySpan$Concrete: void <init>()>
<android.widget.Filter$FilterResults: void <init>()>
<android.text.InputFilter$AllCaps: void <init>()>
<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.InputFilter$LengthFilter: void <init>(int)>
<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<com.facebook.AccessTokenTracker$CurrentAccessTokenBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.appevents.AppEventsConstants: void <init>()>
<com.facebook.applinks.AppLinkData$1: void run()>
<com.facebook.applinks.AppLinkData: void fetchDeferredAppLinkData(android.content.Context,com.facebook.applinks.AppLinkData$CompletionHandler)>
<com.facebook.applinks.AppLinkData: void fetchDeferredAppLinkData(android.content.Context,java.lang.String,com.facebook.applinks.AppLinkData$CompletionHandler)>
<com.facebook.applinks.AppLinkData: com.facebook.applinks.AppLinkData createFromActivity(android.app.Activity)>
<com.facebook.applinks.AppLinkData: com.facebook.applinks.AppLinkData createFromAlApplinkData(android.content.Intent)>
<com.facebook.applinks.AppLinkData: android.net.Uri getTargetUri()>
<com.facebook.applinks.AppLinkData: java.lang.String getRef()>
<com.facebook.applinks.AppLinkData: java.lang.String getPromotionCode()>
<com.facebook.applinks.AppLinkData: android.os.Bundle getArgumentBundle()>
<com.facebook.applinks.AppLinkData: android.os.Bundle getRefererData()>
<com.facebook.applinks.FacebookAppLinkResolver$1: bolts.AppLink then(bolts.Task)>
<com.facebook.applinks.FacebookAppLinkResolver$1: java.lang.Object then(bolts.Task)>
<com.facebook.applinks.FacebookAppLinkResolver: void <init>()>
<com.facebook.applinks.FacebookAppLinkResolver: bolts.Task getAppLinkFromUrlInBackground(android.net.Uri)>
<com.facebook.applinks.FacebookAppLinkResolver: bolts.Task getAppLinkFromUrlsInBackground(java.util.List)>
<com.facebook.applinks.FacebookAppLinkResolver$2: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.BuildConfig: void <init>()>
<com.facebook.CallbackManager$Factory: void <init>()>
<com.facebook.CallbackManager$Factory: com.facebook.CallbackManager create()>
<com.facebook.internal.CallbackManagerImpl: void <init>()>
<com.facebook.internal.CallbackManagerImpl: void registerStaticCallback(int,com.facebook.internal.CallbackManagerImpl$Callback)>
<com.facebook.internal.CallbackManagerImpl: void registerCallback(int,com.facebook.internal.CallbackManagerImpl$Callback)>
<com.facebook.internal.CallbackManagerImpl: boolean onActivityResult(int,int,android.content.Intent)>
<com.facebook.internal.CallbackManagerImpl$RequestCodeOffset: com.facebook.internal.CallbackManagerImpl$RequestCodeOffset[] values()>
<com.facebook.internal.CallbackManagerImpl$RequestCodeOffset: com.facebook.internal.CallbackManagerImpl$RequestCodeOffset valueOf(java.lang.String)>
<com.facebook.internal.CallbackManagerImpl$RequestCodeOffset: int toRequestCode()>
<com.facebook.CustomTabActivity: void <init>()>
<com.facebook.FacebookActivity: void <init>()>
<com.facebook.FacebookActivity: void onCreate(android.os.Bundle)>
<com.facebook.FacebookActivity: void onConfigurationChanged(android.content.res.Configuration)>
<com.facebook.FacebookActivity: android.support.v4.app.Fragment getCurrentFragment()>
<com.facebook.FacebookActivity: void sendResult(android.os.Bundle,com.facebook.FacebookException)>
<com.facebook.internal.FacebookDialogFragment: void <init>()>
<com.facebook.internal.FacebookDialogFragment: void setDialog(android.app.Dialog)>
<com.facebook.internal.FacebookDialogFragment: void onCreate(android.os.Bundle)>
<com.facebook.internal.FacebookDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.facebook.internal.FacebookDialogFragment: void onConfigurationChanged(android.content.res.Configuration)>
<com.facebook.internal.FacebookDialogFragment: void onDestroyView()>
<com.facebook.login.LoginFragment: void <init>()>
<com.facebook.login.LoginFragment: void onCreate(android.os.Bundle)>
<com.facebook.login.LoginFragment: void onDestroy()>
<com.facebook.login.LoginFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.facebook.login.LoginFragment: void onResume()>
<com.facebook.login.LoginFragment: void onPause()>
<com.facebook.login.LoginFragment: void onActivityResult(int,int,android.content.Intent)>
<com.facebook.login.LoginFragment: void onSaveInstanceState(android.os.Bundle)>
<com.facebook.login.LoginFragment: boolean validateChallengeParam(android.os.Bundle)>
<com.facebook.login.LoginFragment: java.lang.String getChallengeParam()>
<com.facebook.share.internal.DeviceShareDialogFragment: void <init>()>
<com.facebook.share.internal.DeviceShareDialogFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.facebook.share.internal.DeviceShareDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.facebook.share.internal.DeviceShareDialogFragment: void onDismiss(android.content.DialogInterface)>
<com.facebook.share.internal.DeviceShareDialogFragment: void onSaveInstanceState(android.os.Bundle)>
<com.facebook.share.internal.DeviceShareDialogFragment: void setShareContent(com.facebook.share.model.ShareContent)>
<com.facebook.login.LoginManager: com.facebook.login.LoginManager getInstance()>
<com.facebook.login.LoginManager: void resolveError(android.app.Activity,com.facebook.GraphResponse)>
<com.facebook.login.LoginManager: void resolveError(android.support.v4.app.Fragment,com.facebook.GraphResponse)>
<com.facebook.login.LoginManager: void resolveError(android.app.Fragment,com.facebook.GraphResponse)>
<com.facebook.login.LoginManager: void registerCallback(com.facebook.CallbackManager,com.facebook.FacebookCallback)>
<com.facebook.login.LoginManager: com.facebook.login.LoginBehavior getLoginBehavior()>
<com.facebook.login.LoginManager: com.facebook.login.LoginManager setLoginBehavior(com.facebook.login.LoginBehavior)>
<com.facebook.login.LoginManager: com.facebook.login.DefaultAudience getDefaultAudience()>
<com.facebook.login.LoginManager: com.facebook.login.LoginManager setDefaultAudience(com.facebook.login.DefaultAudience)>
<com.facebook.login.LoginManager: void logOut()>
<com.facebook.login.LoginManager: void logInWithReadPermissions(android.support.v4.app.Fragment,java.util.Collection)>
<com.facebook.login.LoginManager: void logInWithReadPermissions(android.app.Fragment,java.util.Collection)>
<com.facebook.login.LoginManager: void logInWithReadPermissions(android.app.Activity,java.util.Collection)>
<com.facebook.login.LoginManager: void logInWithPublishPermissions(android.support.v4.app.Fragment,java.util.Collection)>
<com.facebook.login.LoginManager: void logInWithPublishPermissions(android.app.Fragment,java.util.Collection)>
<com.facebook.login.LoginManager: void logInWithPublishPermissions(android.app.Activity,java.util.Collection)>
<com.facebook.login.LoginManager: void setSuccessResult(android.content.Intent,android.os.Bundle)>
<com.facebook.internal.FacebookWebFallbackDialog: void <init>(android.content.Context,java.lang.String,java.lang.String)>
<com.facebook.internal.FacebookWebFallbackDialog: void cancel()>
<com.facebook.internal.FacebookDialogFragment$1: void onComplete(android.os.Bundle,com.facebook.FacebookException)>
<com.facebook.internal.WebDialog$Builder: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>
<com.facebook.internal.WebDialog$Builder: void <init>(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle)>
<com.facebook.internal.WebDialog$Builder: com.facebook.internal.WebDialog$Builder setTheme(int)>
<com.facebook.internal.WebDialog$Builder: com.facebook.internal.WebDialog$Builder setOnCompleteListener(com.facebook.internal.WebDialog$OnCompleteListener)>
<com.facebook.internal.WebDialog$Builder: com.facebook.internal.WebDialog build()>
<com.facebook.internal.WebDialog$Builder: java.lang.String getApplicationId()>
<com.facebook.internal.WebDialog$Builder: android.content.Context getContext()>
<com.facebook.internal.WebDialog$Builder: int getTheme()>
<com.facebook.internal.WebDialog$Builder: android.os.Bundle getParameters()>
<com.facebook.internal.WebDialog$Builder: com.facebook.internal.WebDialog$OnCompleteListener getListener()>
<com.facebook.internal.FacebookDialogFragment$2: void onComplete(android.os.Bundle,com.facebook.FacebookException)>
<com.facebook.internal.WebDialog: void <init>(android.content.Context,java.lang.String)>
<com.facebook.internal.WebDialog: void <init>(android.content.Context,java.lang.String,int)>
<com.facebook.internal.WebDialog: void <init>(android.content.Context,java.lang.String,android.os.Bundle,int,com.facebook.internal.WebDialog$OnCompleteListener)>
<com.facebook.internal.WebDialog: void setOnCompleteListener(com.facebook.internal.WebDialog$OnCompleteListener)>
<com.facebook.internal.WebDialog: com.facebook.internal.WebDialog$OnCompleteListener getOnCompleteListener()>
<com.facebook.internal.WebDialog: boolean onKeyDown(int,android.view.KeyEvent)>
<com.facebook.internal.WebDialog: void dismiss()>
<com.facebook.internal.WebDialog: void onDetachedFromWindow()>
<com.facebook.internal.WebDialog: void onAttachedToWindow()>
<com.facebook.internal.WebDialog: void resize()>
<com.facebook.internal.WebDialog: void cancel()>
<com.facebook.login.LoginClient: void <init>(android.support.v4.app.Fragment)>
<com.facebook.login.LoginClient: android.support.v4.app.Fragment getFragment()>
<com.facebook.login.LoginClient: com.facebook.login.LoginClient$Request getPendingRequest()>
<com.facebook.login.LoginClient: int getLoginRequestCode()>
<com.facebook.login.LoginClient: boolean onActivityResult(int,int,android.content.Intent)>
<com.facebook.login.LoginClient: void <init>(android.os.Parcel)>
<com.facebook.login.LoginClient: int describeContents()>
<com.facebook.login.LoginClient: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.LoginClient$Request: int describeContents()>
<com.facebook.login.LoginClient$Request: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.LoginClient$Result: int describeContents()>
<com.facebook.login.LoginClient$Result: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.LoginClient$Result$Code: com.facebook.login.LoginClient$Result$Code[] values()>
<com.facebook.login.LoginClient$Result$Code: com.facebook.login.LoginClient$Result$Code valueOf(java.lang.String)>
<com.facebook.login.CustomTabLoginMethodHandler: int describeContents()>
<com.facebook.login.CustomTabLoginMethodHandler: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.LoginFragment$2: void onBackgroundProcessingStarted()>
<com.facebook.login.LoginFragment$2: void onBackgroundProcessingStopped()>
<com.facebook.login.LoginFragment$1: void onCompleted(com.facebook.login.LoginClient$Result)>
<android.widget.ProgressBar: void <init>(android.content.Context)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void jumpDrawablesToCurrentState()>
<android.widget.ProgressBar: void postInvalidate()>
<android.widget.ProgressBar: void setProgress(int)>
<android.widget.ProgressBar: void setSecondaryProgress(int)>
<android.widget.ProgressBar: int getProgress()>
<android.widget.ProgressBar: int getSecondaryProgress()>
<android.widget.ProgressBar: int getMax()>
<android.widget.ProgressBar: void setMax(int)>
<android.widget.ProgressBar: void incrementProgressBy(int)>
<android.widget.ProgressBar: void incrementSecondaryProgressBy(int)>
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<android.widget.ProgressBar: void setVisibility(int)>
<android.widget.ProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: android.os.Parcelable onSaveInstanceState()>
<android.widget.ProgressBar: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.ProgressBar: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextView: void <init>(android.content.Context)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextView: void setEnabled(boolean)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>
<android.widget.TextView: java.lang.CharSequence getText()>
<android.widget.TextView: int length()>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.widget.TextView: int getLineHeight()>
<android.widget.TextView: android.text.Layout getLayout()>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.widget.TextView: int getCompoundPaddingTop()>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.widget.TextView: int getCompoundPaddingLeft()>
<android.widget.TextView: int getCompoundPaddingRight()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.TextView: int getTotalPaddingRight()>
<android.widget.TextView: int getTotalPaddingTop()>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<android.widget.TextView: int getCompoundDrawablePadding()>
<android.widget.TextView: void setPadding(int,int,int,int)>
<android.widget.TextView: int getAutoLinkMask()>
<android.widget.TextView: void setTextAppearance(android.content.Context,int)>
<android.widget.TextView: float getTextSize()>
<android.widget.TextView: void setTextSize(float)>
<android.widget.TextView: void setTextSize(int,float)>
<android.widget.TextView: float getTextScaleX()>
<android.widget.TextView: void setTextScaleX(float)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface)>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<android.widget.TextView: void setTextColor(int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.widget.TextView: int getCurrentTextColor()>
<android.widget.TextView: void setHighlightColor(int)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.widget.TextView: void setAutoLinkMask(int)>
<android.widget.TextView: void setLinksClickable(boolean)>
<android.widget.TextView: boolean getLinksClickable()>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.widget.TextView: void setHintTextColor(int)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.widget.TextView: int getCurrentHintTextColor()>
<android.widget.TextView: void setLinkTextColor(int)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.widget.TextView: void setGravity(int)>
<android.widget.TextView: int getGravity()>
<android.widget.TextView: int getPaintFlags()>
<android.widget.TextView: void setPaintFlags(int)>
<android.widget.TextView: void setHorizontallyScrolling(boolean)>
<android.widget.TextView: void setMinLines(int)>
<android.widget.TextView: void setMinHeight(int)>
<android.widget.TextView: void setMaxLines(int)>
<android.widget.TextView: void setMaxHeight(int)>
<android.widget.TextView: void setLines(int)>
<android.widget.TextView: void setHeight(int)>
<android.widget.TextView: void setMinEms(int)>
<android.widget.TextView: void setMinWidth(int)>
<android.widget.TextView: void setMaxEms(int)>
<android.widget.TextView: void setMaxWidth(int)>
<android.widget.TextView: void setEms(int)>
<android.widget.TextView: void setWidth(int)>
<android.widget.TextView: void setLineSpacing(float,float)>
<android.widget.TextView: void append(java.lang.CharSequence)>
<android.widget.TextView: void append(java.lang.CharSequence,int,int)>
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.TextView: void setFreezesText(boolean)>
<android.widget.TextView: boolean getFreezesText()>
<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>
<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setText(char[],int,int)>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setText(int)>
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>
<android.widget.TextView: void setHint(java.lang.CharSequence)>
<android.widget.TextView: void setHint(int)>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.widget.TextView: void setInputType(int)>
<android.widget.TextView: void setRawInputType(int)>
<android.widget.TextView: int getInputType()>
<android.widget.TextView: void setImeOptions(int)>
<android.widget.TextView: int getImeOptions()>
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>
<android.widget.TextView: int getImeActionId()>
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<android.widget.TextView: void onEditorAction(int)>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<android.widget.TextView: java.lang.String getPrivateImeOptions()>
<android.widget.TextView: void setInputExtras(int)>
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>
<android.widget.TextView: java.lang.CharSequence getError()>
<android.widget.TextView: void setError(java.lang.CharSequence)>
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.widget.TextView: boolean onPreDraw()>
<android.widget.TextView: void jumpDrawablesToCurrentState()>
<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: boolean isTextSelectable()>
<android.widget.TextView: void setTextIsSelectable(boolean)>
<android.widget.TextView: void getFocusedRect(android.graphics.Rect)>
<android.widget.TextView: int getLineCount()>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.widget.TextView: int getBaseline()>
<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextView: boolean onCheckIsTextEditor()>
<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.widget.TextView: void beginBatchEdit()>
<android.widget.TextView: void endBatchEdit()>
<android.widget.TextView: void onBeginBatchEdit()>
<android.widget.TextView: void onEndBatchEdit()>
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>
<android.widget.TextView: void setIncludeFontPadding(boolean)>
<android.widget.TextView: boolean bringPointIntoView(int)>
<android.widget.TextView: boolean moveCursorToVisibleOffset()>
<android.widget.TextView: void computeScroll()>
<android.widget.TextView: void debug(int)>
<android.widget.TextView: int getSelectionStart()>
<android.widget.TextView: int getSelectionEnd()>
<android.widget.TextView: boolean hasSelection()>
<android.widget.TextView: void setSingleLine()>
<android.widget.TextView: void setAllCaps(boolean)>
<android.widget.TextView: void setSingleLine(boolean)>
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>
<android.widget.TextView: void setMarqueeRepeatLimit(int)>
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>
<android.widget.TextView: void setSelectAllOnFocus(boolean)>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void onStartTemporaryDetach()>
<android.widget.TextView: void onFinishTemporaryDetach()>
<android.widget.TextView: void onWindowFocusChanged(boolean)>
<android.widget.TextView: void clearComposingText()>
<android.widget.TextView: void setSelected(boolean)>
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.widget.TextView: boolean didTouchFocusSelect()>
<android.widget.TextView: void cancelLongPress()>
<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>
<android.widget.TextView: void setScroller(android.widget.Scroller)>
<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)>
<android.widget.TextView: int getTextColor(android.content.Context,android.content.res.TypedArray,int)>
<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.widget.TextView: void sendAccessibilityEvent(int)>
<android.widget.TextView: boolean isInputMethodTarget()>
<android.widget.TextView: boolean onTextContextMenuItem(int)>
<android.widget.TextView: boolean performLongClick()>
<android.widget.TextView: boolean isSuggestionsEnabled()>
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>
<android.widget.TextView: int getOffsetForPosition(float,float)>
<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: java.lang.String getUserCode()>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: void setUserCode(java.lang.String)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: long getExpiresIn()>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: void setExpiresIn(long)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: int describeContents()>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState: void writeToParcel(android.os.Parcel,int)>
<android.widget.Button: void <init>(android.content.Context)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.share.internal.WebDialogParameters: void <init>()>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle create(com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle create(com.facebook.share.model.GameRequestContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle create(com.facebook.share.model.ShareLinkContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle create(com.facebook.share.model.ShareOpenGraphContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle createBaseParameters(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle createForFeed(com.facebook.share.model.ShareLinkContent)>
<com.facebook.share.internal.WebDialogParameters: android.os.Bundle createForFeed(com.facebook.share.internal.ShareFeedContent)>
<com.facebook.share.model.ShareOpenGraphContent: com.facebook.share.model.ShareOpenGraphAction getAction()>
<com.facebook.share.model.ShareOpenGraphContent: java.lang.String getPreviewPropertyName()>
<com.facebook.share.model.ShareOpenGraphContent: int describeContents()>
<com.facebook.share.model.ShareOpenGraphContent: void writeToParcel(android.os.Parcel,int)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned)>
<com.facebook.share.model.ShareLinkContent: java.lang.String getContentDescription()>
<com.facebook.share.model.ShareLinkContent: java.lang.String getContentTitle()>
<com.facebook.share.model.ShareLinkContent: android.net.Uri getImageUrl()>
<com.facebook.share.model.ShareLinkContent: java.lang.String getQuote()>
<com.facebook.share.model.ShareLinkContent: int describeContents()>
<com.facebook.share.model.ShareLinkContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.internal.DeviceShareDialogFragment$1: void onClick(android.view.View)>
<com.facebook.share.internal.DeviceShareDialogFragment$2: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.internal.DeviceShareDialogFragment$3: void run()>
<com.facebook.share.model.ShareHashtag: java.lang.String getHashtag()>
<com.facebook.share.model.ShareHashtag: int describeContents()>
<com.facebook.share.model.ShareHashtag: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.ShareHashtag$Builder: void <init>()>
<com.facebook.share.model.ShareHashtag$Builder: com.facebook.share.model.ShareHashtag$Builder setHashtag(java.lang.String)>
<com.facebook.share.model.ShareHashtag$Builder: java.lang.String getHashtag()>
<com.facebook.share.model.ShareHashtag$Builder: com.facebook.share.model.ShareHashtag$Builder readFrom(com.facebook.share.model.ShareHashtag)>
<com.facebook.share.model.ShareHashtag$Builder: com.facebook.share.model.ShareHashtag build()>
<com.facebook.share.model.ShareHashtag$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareHashtag$Builder: java.lang.Object build()>
<com.facebook.login.LoginBehavior: com.facebook.login.LoginBehavior[] values()>
<com.facebook.login.LoginBehavior: com.facebook.login.LoginBehavior valueOf(java.lang.String)>
<com.facebook.internal.FragmentWrapper: void <init>(android.support.v4.app.Fragment)>
<com.facebook.internal.FragmentWrapper: void <init>(android.app.Fragment)>
<com.facebook.internal.FragmentWrapper: android.app.Fragment getNativeFragment()>
<com.facebook.internal.FragmentWrapper: android.support.v4.app.Fragment getSupportFragment()>
<com.facebook.internal.FragmentWrapper: void startActivityForResult(android.content.Intent,int)>
<com.facebook.internal.FragmentWrapper: android.app.Activity getActivity()>
<com.facebook.login.LoginResult: void <init>(com.facebook.AccessToken,java.util.Set,java.util.Set)>
<com.facebook.login.LoginResult: com.facebook.AccessToken getAccessToken()>
<com.facebook.login.LoginResult: java.util.Set getRecentlyGrantedPermissions()>
<com.facebook.login.LoginResult: java.util.Set getRecentlyDeniedPermissions()>
<com.facebook.login.LoginLogger: java.lang.String getApplicationId()>
<com.facebook.login.LoginLogger: void logStartLogin(com.facebook.login.LoginClient$Request)>
<com.facebook.login.LoginLogger: void logCompleteLogin(java.lang.String,java.util.Map,com.facebook.login.LoginClient$Result$Code,java.util.Map,java.lang.Exception)>
<com.facebook.login.LoginLogger: void logAuthorizationMethodStart(java.lang.String,java.lang.String)>
<com.facebook.login.LoginLogger: void logAuthorizationMethodComplete(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<com.facebook.login.LoginLogger: void logUnexpectedError(java.lang.String,java.lang.String)>
<com.facebook.login.LoginLogger: void logUnexpectedError(java.lang.String,java.lang.String,java.lang.String)>
<com.facebook.login.LoginManager$FragmentStartActivityDelegate: void startActivityForResult(android.content.Intent,int)>
<com.facebook.login.LoginManager$FragmentStartActivityDelegate: android.app.Activity getActivityContext()>
<com.facebook.login.LoginManager$ActivityStartActivityDelegate: void startActivityForResult(android.content.Intent,int)>
<com.facebook.login.LoginManager$ActivityStartActivityDelegate: android.app.Activity getActivityContext()>
<com.facebook.login.LoginManager$1: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.login.LoginManager$3: boolean onActivityResult(int,android.content.Intent)>
<android.content.ActivityNotFoundException: void <init>()>
<android.content.ActivityNotFoundException: void <init>(java.lang.String)>
<com.facebook.FacebookAuthorizationException: void <init>()>
<com.facebook.FacebookAuthorizationException: void <init>(java.lang.String)>
<com.facebook.FacebookAuthorizationException: void <init>(java.lang.String,java.lang.Throwable)>
<com.facebook.FacebookAuthorizationException: void <init>(java.lang.Throwable)>
<com.facebook.internal.FacebookWebFallbackDialog$1: void run()>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.webkit.WebView: boolean shouldDelayChildPressedState()>
<android.webkit.WebView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.webkit.WebView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.webkit.WebView: void setOverScrollMode(int)>
<android.webkit.WebView: void setScrollBarStyle(int)>
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>
<android.webkit.WebView: boolean overlayHorizontalScrollbar()>
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
<android.webkit.WebView: int getVisibleTitleHeight()>
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebView: void destroy()>
<android.webkit.WebView: void enablePlatformNotifications()>
<android.webkit.WebView: void disablePlatformNotifications()>
<android.webkit.WebView: void setNetworkAvailable(boolean)>
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.webkit.WebView: boolean savePicture(android.os.Bundle,java.io.File)>
<android.webkit.WebView: boolean restorePicture(android.os.Bundle,java.io.File)>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void saveWebArchive(java.lang.String)>
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.WebView: void stopLoading()>
<android.webkit.WebView: void reload()>
<android.webkit.WebView: boolean canGoBack()>
<android.webkit.WebView: void goBack()>
<android.webkit.WebView: boolean canGoForward()>
<android.webkit.WebView: void goForward()>
<android.webkit.WebView: boolean canGoBackOrForward(int)>
<android.webkit.WebView: void goBackOrForward(int)>
<android.webkit.WebView: boolean isPrivateBrowsingEnabled()>
<android.webkit.WebView: boolean pageUp(boolean)>
<android.webkit.WebView: boolean pageDown(boolean)>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: android.graphics.Picture capturePicture()>
<android.webkit.WebView: float getScale()>
<android.webkit.WebView: void setInitialScale(int)>
<android.webkit.WebView: void invokeZoomPicker()>
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebView: void requestImageRef(android.os.Message)>
<android.webkit.WebView: java.lang.String getUrl()>
<android.webkit.WebView: java.lang.String getOriginalUrl()>
<android.webkit.WebView: java.lang.String getTitle()>
<android.webkit.WebView: android.graphics.Bitmap getFavicon()>
<android.webkit.WebView: int getProgress()>
<android.webkit.WebView: int getContentHeight()>
<android.webkit.WebView: void pauseTimers()>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: void onPause()>
<android.webkit.WebView: void onResume()>
<android.webkit.WebView: void freeMemory()>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebView: void clearFormData()>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>
<android.webkit.WebView: void findNext(boolean)>
<android.webkit.WebView: int findAll(java.lang.String)>
<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>
<android.webkit.WebView: void clearMatches()>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.webkit.WebView: void computeScroll()>
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>
<android.webkit.WebView: android.webkit.WebSettings getSettings()>
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.webkit.WebView: boolean performLongClick()>
<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.webkit.WebView: void emulateShiftHeld()>
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.webkit.WebView: void onWindowFocusChanged(boolean)>
<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.webkit.WebView: boolean onHoverEvent(android.view.MotionEvent)>
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)>
<android.webkit.WebView: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>
<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)>
<android.webkit.WebView: void flingScroll(int,int)>
<android.webkit.WebView: android.view.View getZoomControls()>
<android.webkit.WebView: boolean canZoomIn()>
<android.webkit.WebView: boolean canZoomOut()>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: boolean zoomOut()>
<android.webkit.WebView: boolean requestFocus(int,android.graphics.Rect)>
<android.webkit.WebView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.webkit.WebView: void setBackgroundColor(int)>
<android.webkit.WebView: void debugDump()>
<android.app.ProgressDialog: void <init>(android.content.Context)>
<android.app.ProgressDialog: void <init>(android.content.Context,int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)>
<android.app.ProgressDialog: void onStart()>
<android.app.ProgressDialog: void setProgress(int)>
<android.app.ProgressDialog: void setSecondaryProgress(int)>
<android.app.ProgressDialog: int getProgress()>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.app.ProgressDialog: int getMax()>
<android.app.ProgressDialog: void setMax(int)>
<android.app.ProgressDialog: void incrementProgressBy(int)>
<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.app.ProgressDialog: boolean isIndeterminate()>
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)>
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)>
<android.widget.ImageView: void <init>(android.content.Context)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageView: void jumpDrawablesToCurrentState()>
<android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.widget.ImageView: void setMaxWidth(int)>
<android.widget.ImageView: void setMaxHeight(int)>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.widget.ImageView: void setImageResource(int)>
<android.widget.ImageView: void setImageURI(android.net.Uri)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
<android.widget.ImageView: void setImageState(int[],boolean)>
<android.widget.ImageView: void setSelected(boolean)>
<android.widget.ImageView: void setImageLevel(int)>
<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
<android.widget.ImageView: int[] onCreateDrawableState(int)>
<android.widget.ImageView: int getBaseline()>
<android.widget.ImageView: void setBaseline(int)>
<android.widget.ImageView: void setBaselineAlignBottom(boolean)>
<android.widget.ImageView: boolean getBaselineAlignBottom()>
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)>
<android.widget.ImageView: void setColorFilter(int)>
<android.widget.ImageView: void clearColorFilter()>
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>
<android.widget.ImageView: void setAlpha(int)>
<android.widget.ImageView: void setVisibility(int)>
<android.widget.FrameLayout: void <init>(android.content.Context)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.FrameLayout: void setForegroundGravity(int)>
<android.widget.FrameLayout: void jumpDrawablesToCurrentState()>
<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)>
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()>
<android.widget.FrameLayout: void draw(android.graphics.Canvas)>
<android.widget.FrameLayout: boolean gatherTransparentRegion(android.graphics.Region)>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>
<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: void <init>(android.content.Context)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.LinearLayout: void setShowDividers(int)>
<android.widget.LinearLayout: boolean shouldDelayChildPressedState()>
<android.widget.LinearLayout: int getShowDividers()>
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>
<android.widget.LinearLayout: void setDividerPadding(int)>
<android.widget.LinearLayout: int getDividerPadding()>
<android.widget.LinearLayout: boolean isBaselineAligned()>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.widget.LinearLayout: boolean isMeasureWithLargestChildEnabled()>
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)>
<android.widget.LinearLayout: int getBaseline()>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.widget.LinearLayout: float getWeightSum()>
<android.widget.LinearLayout: void setWeightSum(float)>
<android.widget.LinearLayout: void setOrientation(int)>
<android.widget.LinearLayout: int getOrientation()>
<android.widget.LinearLayout: void setGravity(int)>
<android.widget.LinearLayout: void setHorizontalGravity(int)>
<android.widget.LinearLayout: void setVerticalGravity(int)>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.facebook.internal.WebDialog$DialogWebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<com.facebook.internal.WebDialog$DialogWebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<com.facebook.internal.WebDialog$DialogWebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>
<com.facebook.internal.WebDialog$DialogWebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<com.facebook.internal.WebDialog$DialogWebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void <init>()>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>
<com.facebook.internal.WebDialog$4: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.facebook.internal.WebDialog$3: void onWindowFocusChanged(boolean)>
<com.facebook.internal.WebDialog$2: void onClick(android.view.View)>
<com.facebook.internal.WebDialog$1: void onCancel(android.content.DialogInterface)>
<android.webkit.WebSettings: void setNavDump(boolean)>
<android.webkit.WebSettings: boolean getNavDump()>
<android.webkit.WebSettings: void setSupportZoom(boolean)>
<android.webkit.WebSettings: boolean supportZoom()>
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
<android.webkit.WebSettings: boolean getAllowFileAccess()>
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
<android.webkit.WebSettings: boolean getAllowContentAccess()>
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
<android.webkit.WebSettings: boolean enableSmoothTransition()>
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
<android.webkit.WebSettings: void setSaveFormData(boolean)>
<android.webkit.WebSettings: boolean getSaveFormData()>
<android.webkit.WebSettings: void setSavePassword(boolean)>
<android.webkit.WebSettings: boolean getSavePassword()>
<android.webkit.WebSettings: void setTextZoom(int)>
<android.webkit.WebSettings: int getTextZoom()>
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)>
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)>
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
<android.webkit.WebSettings: boolean getUseDoubleTree()>
<android.webkit.WebSettings: void setUserAgent(int)>
<android.webkit.WebSettings: int getUserAgent()>
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
<android.webkit.WebSettings: boolean supportMultipleWindows()>
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)>
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.webkit.WebSettings: void setMinimumFontSize(int)>
<android.webkit.WebSettings: int getMinimumFontSize()>
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<android.webkit.WebSettings: void setDefaultFontSize(int)>
<android.webkit.WebSettings: int getDefaultFontSize()>
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)>
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)>
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)>
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<android.webkit.WebSettings: java.lang.String getDatabasePath()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>
<android.webkit.WebSettings: java.lang.String getPluginsPath()>
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getUserAgentString()>
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)>
<android.webkit.WebSettings: void setCacheMode(int)>
<android.webkit.WebSettings: int getCacheMode()>
<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<com.facebook.login.DeviceAuthMethodHandler: void onCancel()>
<com.facebook.login.DeviceAuthMethodHandler: void onError(java.lang.Exception)>
<com.facebook.login.DeviceAuthMethodHandler: void onSuccess(java.lang.String,java.lang.String,java.lang.String,java.util.Collection,java.util.Collection,com.facebook.AccessTokenSource,java.util.Date,java.util.Date)>
<com.facebook.login.DeviceAuthMethodHandler: java.util.concurrent.ScheduledThreadPoolExecutor getBackgroundExecutor()>
<com.facebook.login.DeviceAuthMethodHandler: int describeContents()>
<com.facebook.login.DeviceAuthMethodHandler: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.KatanaProxyLoginMethodHandler: int describeContents()>
<com.facebook.login.KatanaProxyLoginMethodHandler: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.GetTokenLoginMethodHandler: int describeContents()>
<com.facebook.login.GetTokenLoginMethodHandler: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.WebViewLoginMethodHandler: int describeContents()>
<com.facebook.login.WebViewLoginMethodHandler: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.LoginClient$1: com.facebook.login.LoginClient createFromParcel(android.os.Parcel)>
<com.facebook.login.LoginClient$1: com.facebook.login.LoginClient[] newArray(int)>
<com.facebook.login.LoginClient$1: java.lang.Object[] newArray(int)>
<com.facebook.login.LoginClient$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.LoginClient$Result$1: com.facebook.login.LoginClient$Result createFromParcel(android.os.Parcel)>
<com.facebook.login.LoginClient$Result$1: com.facebook.login.LoginClient$Result[] newArray(int)>
<com.facebook.login.LoginClient$Result$1: java.lang.Object[] newArray(int)>
<com.facebook.login.LoginClient$Result$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.internal.CustomTab: void <init>(java.lang.String,android.os.Bundle)>
<com.facebook.internal.CustomTab: void openCustomTab(android.app.Activity,java.lang.String)>
<com.facebook.login.CustomTabLoginMethodHandler$1: com.facebook.login.CustomTabLoginMethodHandler createFromParcel(android.os.Parcel)>
<com.facebook.login.CustomTabLoginMethodHandler$1: com.facebook.login.CustomTabLoginMethodHandler[] newArray(int)>
<com.facebook.login.CustomTabLoginMethodHandler$1: java.lang.Object[] newArray(int)>
<com.facebook.login.CustomTabLoginMethodHandler$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.LoginClient$Request$1: com.facebook.login.LoginClient$Request createFromParcel(android.os.Parcel)>
<com.facebook.login.LoginClient$Request$1: com.facebook.login.LoginClient$Request[] newArray(int)>
<com.facebook.login.LoginClient$Request$1: java.lang.Object[] newArray(int)>
<com.facebook.login.LoginClient$Request$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.AppGroupCreationContent: java.lang.String getName()>
<com.facebook.share.model.AppGroupCreationContent: java.lang.String getDescription()>
<com.facebook.share.model.AppGroupCreationContent: com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy getAppGroupPrivacy()>
<com.facebook.share.model.AppGroupCreationContent: int describeContents()>
<com.facebook.share.model.AppGroupCreationContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.GameRequestContent: java.lang.String getMessage()>
<com.facebook.share.model.GameRequestContent: java.lang.String getTo()>
<com.facebook.share.model.GameRequestContent: java.util.List getRecipients()>
<com.facebook.share.model.GameRequestContent: java.lang.String getTitle()>
<com.facebook.share.model.GameRequestContent: java.lang.String getData()>
<com.facebook.share.model.GameRequestContent: com.facebook.share.model.GameRequestContent$ActionType getActionType()>
<com.facebook.share.model.GameRequestContent: java.lang.String getObjectId()>
<com.facebook.share.model.GameRequestContent: com.facebook.share.model.GameRequestContent$Filters getFilters()>
<com.facebook.share.model.GameRequestContent: java.util.List getSuggestions()>
<com.facebook.share.model.GameRequestContent: int describeContents()>
<com.facebook.share.model.GameRequestContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getToId()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getLink()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getLinkName()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getLinkCaption()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getLinkDescription()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getPicture()>
<com.facebook.share.internal.ShareFeedContent: java.lang.String getMediaSource()>
<com.facebook.share.internal.ShareFeedContent: int describeContents()>
<com.facebook.share.internal.ShareFeedContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.internal.ShareInternalUtility: void <init>()>
<com.facebook.share.internal.ShareInternalUtility: void invokeCallbackWithException(com.facebook.FacebookCallback,java.lang.Exception)>
<com.facebook.share.internal.ShareInternalUtility: void invokeCallbackWithError(com.facebook.FacebookCallback,java.lang.String)>
<com.facebook.share.internal.ShareInternalUtility: void invokeCallbackWithResults(com.facebook.FacebookCallback,java.lang.String,com.facebook.GraphResponse)>
<com.facebook.share.internal.ShareInternalUtility: java.lang.String getNativeDialogCompletionGesture(android.os.Bundle)>
<com.facebook.share.internal.ShareInternalUtility: java.lang.String getShareDialogPostId(android.os.Bundle)>
<com.facebook.share.internal.ShareInternalUtility: boolean handleActivityResult(int,int,android.content.Intent,com.facebook.share.internal.ResultProcessor)>
<com.facebook.share.internal.ShareInternalUtility: com.facebook.share.internal.ResultProcessor getShareResultProcessor(com.facebook.FacebookCallback)>
<com.facebook.share.internal.ShareInternalUtility: void registerStaticShareCallback(int)>
<com.facebook.share.internal.ShareInternalUtility: void registerSharerCallback(int,com.facebook.CallbackManager,com.facebook.FacebookCallback)>
<com.facebook.share.internal.ShareInternalUtility: java.util.List getPhotoUrls(com.facebook.share.model.SharePhotoContent,java.util.UUID)>
<com.facebook.share.internal.ShareInternalUtility: java.lang.String getVideoUrl(com.facebook.share.model.ShareVideoContent,java.util.UUID)>
<com.facebook.share.internal.ShareInternalUtility: java.util.List getMediaInfos(com.facebook.share.model.ShareMediaContent,java.util.UUID)>
<com.facebook.share.internal.ShareInternalUtility: org.json.JSONObject toJSONObjectForCall(java.util.UUID,com.facebook.share.model.ShareOpenGraphContent)>
<com.facebook.share.internal.ShareInternalUtility: org.json.JSONObject toJSONObjectForWeb(com.facebook.share.model.ShareOpenGraphContent)>
<com.facebook.share.internal.ShareInternalUtility: org.json.JSONArray removeNamespacesFromOGJsonArray(org.json.JSONArray,boolean)>
<com.facebook.share.internal.ShareInternalUtility: org.json.JSONObject removeNamespacesFromOGJsonObject(org.json.JSONObject,boolean)>
<com.facebook.share.internal.ShareInternalUtility: android.util.Pair getFieldNameAndNamespaceFromFullName(java.lang.String)>
<com.facebook.share.internal.ShareInternalUtility: com.facebook.GraphRequest newUploadStagingResourceWithImageRequest(com.facebook.AccessToken,android.graphics.Bitmap,com.facebook.GraphRequest$Callback)>
<com.facebook.share.internal.ShareInternalUtility: com.facebook.GraphRequest newUploadStagingResourceWithImageRequest(com.facebook.AccessToken,java.io.File,com.facebook.GraphRequest$Callback)>
<com.facebook.share.internal.ShareInternalUtility: com.facebook.GraphRequest newUploadStagingResourceWithImageRequest(com.facebook.AccessToken,android.net.Uri,com.facebook.GraphRequest$Callback)>
<com.facebook.share.internal.ShareInternalUtility: com.facebook.share.widget.LikeView$ObjectType getMostSpecificObjectType(com.facebook.share.widget.LikeView$ObjectType,com.facebook.share.widget.LikeView$ObjectType)>
<com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy: com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy[] values()>
<com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy: com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy valueOf(java.lang.String)>
<com.facebook.share.model.GameRequestContent$ActionType: com.facebook.share.model.GameRequestContent$ActionType[] values()>
<com.facebook.share.model.GameRequestContent$ActionType: com.facebook.share.model.GameRequestContent$ActionType valueOf(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Filters: com.facebook.share.model.GameRequestContent$Filters[] values()>
<com.facebook.share.model.GameRequestContent$Filters: com.facebook.share.model.GameRequestContent$Filters valueOf(java.lang.String)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: void <init>()>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareOpenGraphContent$Builder setAction(com.facebook.share.model.ShareOpenGraphAction)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareOpenGraphContent$Builder setPreviewPropertyName(java.lang.String)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareOpenGraphContent build()>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareOpenGraphContent$Builder readFrom(com.facebook.share.model.ShareOpenGraphContent)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareOpenGraphContent$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareOpenGraphContent$1: com.facebook.share.model.ShareOpenGraphContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareOpenGraphContent$1: com.facebook.share.model.ShareOpenGraphContent[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareOpenGraphContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState$1: com.facebook.share.internal.DeviceShareDialogFragment$RequestState createFromParcel(android.os.Parcel)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState$1: com.facebook.share.internal.DeviceShareDialogFragment$RequestState[] newArray(int)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState$1: java.lang.Object[] newArray(int)>
<com.facebook.share.internal.DeviceShareDialogFragment$RequestState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.style.URLSpan: void <init>(java.lang.String)>
<android.text.style.URLSpan: void <init>(android.os.Parcel)>
<android.text.style.URLSpan: int getSpanTypeId()>
<android.text.style.URLSpan: int describeContents()>
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.URLSpan: java.lang.String getURL()>
<android.text.style.URLSpan: void onClick(android.view.View)>
<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()>
<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)>
<android.widget.Scroller: void <init>(android.content.Context)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>
<android.widget.Scroller: void setFriction(float)>
<android.widget.Scroller: boolean isFinished()>
<android.widget.Scroller: void forceFinished(boolean)>
<android.widget.Scroller: int getDuration()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<android.widget.Scroller: float getCurrVelocity()>
<android.widget.Scroller: int getStartX()>
<android.widget.Scroller: int getStartY()>
<android.widget.Scroller: int getFinalX()>
<android.widget.Scroller: int getFinalY()>
<android.widget.Scroller: boolean computeScrollOffset()>
<android.widget.Scroller: void startScroll(int,int,int,int)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.Scroller: void abortAnimation()>
<android.widget.Scroller: void extendDuration(int)>
<android.widget.Scroller: int timePassed()>
<android.widget.Scroller: void setFinalX(int)>
<android.widget.Scroller: void setFinalY(int)>
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>
<android.widget.TextView$SavedState: java.lang.String toString()>
<com.facebook.share.model.ShareLinkContent$Builder: void <init>()>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent$Builder setContentDescription(java.lang.String)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent$Builder setContentTitle(java.lang.String)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent$Builder setImageUrl(android.net.Uri)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent$Builder setQuote(java.lang.String)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent build()>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareLinkContent$Builder readFrom(com.facebook.share.model.ShareLinkContent)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.model.ShareLinkContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareLinkContent$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareLinkContent$1: com.facebook.share.model.ShareLinkContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareLinkContent$1: com.facebook.share.model.ShareLinkContent[] newArray(int)>
<com.facebook.share.model.ShareLinkContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareLinkContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareHashtag$1: com.facebook.share.model.ShareHashtag createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareHashtag$1: com.facebook.share.model.ShareHashtag[] newArray(int)>
<com.facebook.share.model.ShareHashtag$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareHashtag$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.AbsoluteLayout: boolean shouldDelayChildPressedState()>
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)>
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>
<android.net.http.SslCertificate: java.lang.String toString()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<android.webkit.WebBackForwardList: int getSize()>
<android.webkit.WebView$HitTestResult: int getType()>
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()>
<android.webkit.WebChromeClient: void <init>()>
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)>
<android.webkit.WebChromeClient: void onHideCustomView()>
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)>
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>
<android.webkit.WebChromeClient: boolean onJsTimeout()>
<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>
<android.webkit.WebView$WebViewTransport: void <init>(android.webkit.WebView)>
<android.webkit.WebView$WebViewTransport: void setWebView(android.webkit.WebView)>
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()>
<android.widget.LinearLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.LinearLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType valueOf(java.lang.String)>
<android.webkit.SslErrorHandler: void proceed()>
<android.webkit.SslErrorHandler: void cancel()>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,java.lang.String)>
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>
<android.net.http.SslError: java.lang.String getUrl()>
<android.net.http.SslError: boolean addError(int)>
<android.net.http.SslError: boolean hasError(int)>
<android.net.http.SslError: int getPrimaryError()>
<android.net.http.SslError: java.lang.String toString()>
<com.facebook.FacebookDialogException: void <init>(java.lang.String,int,java.lang.String)>
<com.facebook.FacebookDialogException: int getErrorCode()>
<com.facebook.FacebookDialogException: java.lang.String getFailingUrl()>
<com.facebook.FacebookDialogException: java.lang.String toString()>
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>
<android.webkit.WebResourceResponse: java.lang.String getMimeType()>
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>
<android.webkit.WebResourceResponse: java.lang.String getEncoding()>
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>
<android.webkit.WebResourceResponse: java.io.InputStream getData()>
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>
<android.webkit.HttpAuthHandler: void cancel()>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize valueOf(java.lang.String)>
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity[] values()>
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String)>
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm[] values()>
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String)>
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState[] values()>
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState valueOf(java.lang.String)>
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority[] values()>
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority valueOf(java.lang.String)>
<android.app.AlertDialog: android.widget.Button getButton(int)>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>
<android.app.AlertDialog: void setCustomTitle(android.view.View)>
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>
<android.app.AlertDialog: void setView(android.view.View)>
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setIcon(int)>
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog: void setIconAttribute(int)>
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>
<android.app.AlertDialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.AlertDialog: boolean onKeyUp(int,android.view.KeyEvent)>
<com.facebook.login.DeviceAuthMethodHandler$1: com.facebook.login.DeviceAuthMethodHandler createFromParcel(android.os.Parcel)>
<com.facebook.login.DeviceAuthMethodHandler$1: com.facebook.login.DeviceAuthMethodHandler[] newArray(int)>
<com.facebook.login.DeviceAuthMethodHandler$1: java.lang.Object[] newArray(int)>
<com.facebook.login.DeviceAuthMethodHandler$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.DeviceAuthDialog: void <init>()>
<com.facebook.login.DeviceAuthDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.facebook.login.DeviceAuthDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.facebook.login.DeviceAuthDialog: void onDismiss(android.content.DialogInterface)>
<com.facebook.login.DeviceAuthDialog: void onSaveInstanceState(android.os.Bundle)>
<com.facebook.login.DeviceAuthDialog: void onDestroy()>
<com.facebook.login.DeviceAuthDialog: void startLogin(com.facebook.login.LoginClient$Request)>
<com.facebook.login.KatanaProxyLoginMethodHandler$1: com.facebook.login.KatanaProxyLoginMethodHandler createFromParcel(android.os.Parcel)>
<com.facebook.login.KatanaProxyLoginMethodHandler$1: com.facebook.login.KatanaProxyLoginMethodHandler[] newArray(int)>
<com.facebook.login.KatanaProxyLoginMethodHandler$1: java.lang.Object[] newArray(int)>
<com.facebook.login.KatanaProxyLoginMethodHandler$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.GetTokenLoginMethodHandler$3: com.facebook.login.GetTokenLoginMethodHandler createFromParcel(android.os.Parcel)>
<com.facebook.login.GetTokenLoginMethodHandler$3: com.facebook.login.GetTokenLoginMethodHandler[] newArray(int)>
<com.facebook.login.GetTokenLoginMethodHandler$3: java.lang.Object[] newArray(int)>
<com.facebook.login.GetTokenLoginMethodHandler$3: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.GetTokenLoginMethodHandler$1: void completed(android.os.Bundle)>
<com.facebook.login.GetTokenLoginMethodHandler$2: void onSuccess(org.json.JSONObject)>
<com.facebook.login.GetTokenLoginMethodHandler$2: void onFailure(com.facebook.FacebookException)>
<com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>
<com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder: com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder setE2E(java.lang.String)>
<com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder: com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder setIsRerequest(boolean)>
<com.facebook.login.WebViewLoginMethodHandler$AuthDialogBuilder: com.facebook.internal.WebDialog build()>
<com.facebook.login.WebViewLoginMethodHandler$2: com.facebook.login.WebViewLoginMethodHandler createFromParcel(android.os.Parcel)>
<com.facebook.login.WebViewLoginMethodHandler$2: com.facebook.login.WebViewLoginMethodHandler[] newArray(int)>
<com.facebook.login.WebViewLoginMethodHandler$2: java.lang.Object[] newArray(int)>
<com.facebook.login.WebViewLoginMethodHandler$2: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.login.WebViewLoginMethodHandler$1: void onComplete(android.os.Bundle,com.facebook.FacebookException)>
<com.facebook.share.model.AppGroupCreationContent$Builder: void <init>()>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.AppGroupCreationContent$Builder setName(java.lang.String)>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.AppGroupCreationContent$Builder setDescription(java.lang.String)>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.AppGroupCreationContent$Builder setAppGroupPrivacy(com.facebook.share.model.AppGroupCreationContent$AppGroupPrivacy)>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.AppGroupCreationContent build()>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.AppGroupCreationContent$Builder readFrom(com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.model.AppGroupCreationContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.AppGroupCreationContent$Builder: java.lang.Object build()>
<com.facebook.share.model.AppGroupCreationContent$1: com.facebook.share.model.AppGroupCreationContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.AppGroupCreationContent$1: com.facebook.share.model.AppGroupCreationContent[] newArray(int)>
<com.facebook.share.model.AppGroupCreationContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.AppGroupCreationContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.internal.AppCall: com.facebook.internal.AppCall getCurrentPendingCall()>
<com.facebook.internal.AppCall: com.facebook.internal.AppCall finishPendingCall(java.util.UUID,int)>
<com.facebook.internal.AppCall: void <init>(int)>
<com.facebook.internal.AppCall: void <init>(int,java.util.UUID)>
<com.facebook.internal.AppCall: android.content.Intent getRequestIntent()>
<com.facebook.internal.AppCall: java.util.UUID getCallId()>
<com.facebook.internal.AppCall: int getRequestCode()>
<com.facebook.internal.AppCall: void setRequestCode(int)>
<com.facebook.internal.AppCall: void setRequestIntent(android.content.Intent)>
<com.facebook.internal.AppCall: boolean setPending()>
<com.facebook.share.model.SharePhotoContent: java.util.List getPhotos()>
<com.facebook.share.model.SharePhotoContent: int describeContents()>
<com.facebook.share.model.SharePhotoContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.ShareVideoContent: java.lang.String getContentDescription()>
<com.facebook.share.model.ShareVideoContent: java.lang.String getContentTitle()>
<com.facebook.share.model.ShareVideoContent: com.facebook.share.model.SharePhoto getPreviewPhoto()>
<com.facebook.share.model.ShareVideoContent: com.facebook.share.model.ShareVideo getVideo()>
<com.facebook.share.model.ShareVideoContent: int describeContents()>
<com.facebook.share.model.ShareVideoContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.ShareMediaContent: java.util.List getMedia()>
<com.facebook.share.model.ShareMediaContent: int describeContents()>
<com.facebook.share.model.ShareMediaContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.internal.NativeAppCallAttachmentStore$Attachment: java.lang.String getAttachmentUrl()>
<com.facebook.share.widget.LikeView$ObjectType: com.facebook.share.widget.LikeView$ObjectType[] values()>
<com.facebook.share.widget.LikeView$ObjectType: com.facebook.share.widget.LikeView$ObjectType valueOf(java.lang.String)>
<com.facebook.share.widget.LikeView$ObjectType: com.facebook.share.widget.LikeView$ObjectType fromInt(int)>
<com.facebook.share.widget.LikeView$ObjectType: java.lang.String toString()>
<com.facebook.share.widget.LikeView$ObjectType: int getValue()>
<com.facebook.share.model.ShareVideo: android.net.Uri getLocalUrl()>
<com.facebook.share.model.ShareVideo: int describeContents()>
<com.facebook.share.model.ShareVideo: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.ShareVideo: com.facebook.share.model.ShareMedia$Type getMediaType()>
<com.facebook.internal.NativeAppCallAttachmentStore: com.facebook.internal.NativeAppCallAttachmentStore$Attachment createAttachment(java.util.UUID,android.graphics.Bitmap)>
<com.facebook.internal.NativeAppCallAttachmentStore: com.facebook.internal.NativeAppCallAttachmentStore$Attachment createAttachment(java.util.UUID,android.net.Uri)>
<com.facebook.internal.NativeAppCallAttachmentStore: void addAttachments(java.util.Collection)>
<com.facebook.internal.NativeAppCallAttachmentStore: void cleanupAttachmentsForCall(java.util.UUID)>
<com.facebook.internal.NativeAppCallAttachmentStore: java.io.File openAttachment(java.util.UUID,java.lang.String)>
<com.facebook.internal.NativeAppCallAttachmentStore: void cleanupAllAttachments()>
<com.facebook.FacebookGraphResponseException: void <init>(com.facebook.GraphResponse,java.lang.String)>
<com.facebook.FacebookGraphResponseException: com.facebook.GraphResponse getGraphResponse()>
<com.facebook.FacebookGraphResponseException: java.lang.String toString()>
<com.facebook.share.Sharer$Result: void <init>(java.lang.String)>
<com.facebook.share.Sharer$Result: java.lang.String getPostId()>
<com.facebook.share.internal.ShareInternalUtility$8: org.json.JSONObject toJSONObject(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareInternalUtility$7: org.json.JSONObject toJSONObject(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareInternalUtility$6: android.os.Bundle apply(com.facebook.share.model.ShareMedia)>
<com.facebook.share.internal.ShareInternalUtility$6: java.lang.Object apply(java.lang.Object)>
<com.facebook.share.internal.ShareInternalUtility$5: java.lang.String apply(com.facebook.internal.NativeAppCallAttachmentStore$Attachment)>
<com.facebook.share.internal.ShareInternalUtility$5: java.lang.Object apply(java.lang.Object)>
<com.facebook.share.internal.ShareInternalUtility$4: com.facebook.internal.NativeAppCallAttachmentStore$Attachment apply(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareInternalUtility$4: java.lang.Object apply(java.lang.Object)>
<com.facebook.share.internal.ShareInternalUtility$3: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.internal.ShareInternalUtility$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.internal.ShareInternalUtility$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.internal.ShareInternalUtility$1: void onCancel(com.facebook.internal.AppCall)>
<com.facebook.share.internal.ShareInternalUtility$1: void onError(com.facebook.internal.AppCall,com.facebook.FacebookException)>
<com.facebook.share.internal.ShareFeedContent$Builder: void <init>()>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setToId(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setLink(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setLinkName(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setLinkCaption(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setLinkDescription(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setPicture(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder setMediaSource(java.lang.String)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent build()>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.internal.ShareFeedContent$Builder readFrom(com.facebook.share.internal.ShareFeedContent)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.ShareFeedContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.internal.ShareFeedContent$Builder: java.lang.Object build()>
<com.facebook.share.internal.ShareFeedContent$1: com.facebook.share.internal.ShareFeedContent createFromParcel(android.os.Parcel)>
<com.facebook.share.internal.ShareFeedContent$1: com.facebook.share.internal.ShareFeedContent[] newArray(int)>
<com.facebook.share.internal.ShareFeedContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.internal.ShareFeedContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.GameRequestContent$Builder: void <init>()>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setMessage(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setTo(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setRecipients(java.util.List)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setData(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setTitle(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setActionType(com.facebook.share.model.GameRequestContent$ActionType)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setObjectId(java.lang.String)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setFilters(com.facebook.share.model.GameRequestContent$Filters)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder setSuggestions(java.util.List)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent build()>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.GameRequestContent$Builder readFrom(com.facebook.share.model.GameRequestContent)>
<com.facebook.share.model.GameRequestContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.GameRequestContent$Builder: java.lang.Object build()>
<com.facebook.share.model.GameRequestContent$1: com.facebook.share.model.GameRequestContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.GameRequestContent$1: com.facebook.share.model.GameRequestContent[] newArray(int)>
<com.facebook.share.model.GameRequestContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.GameRequestContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>
<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(int,int,int,int)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.AbsoluteLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.webkit.WebHistoryItem: int getId()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<android.webkit.JsResult: void cancel()>
<android.webkit.JsResult: void confirm()>
<android.webkit.JsPromptResult: void confirm(java.lang.String)>
<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)>
<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()>
<android.webkit.ConsoleMessage: java.lang.String message()>
<android.webkit.ConsoleMessage: java.lang.String sourceId()>
<android.webkit.ConsoleMessage: int lineNumber()>
<android.net.http.SslCertificate$DName: void <init>(android.net.http.SslCertificate,java.lang.String)>
<android.net.http.SslCertificate$DName: java.lang.String getDName()>
<android.net.http.SslCertificate$DName: java.lang.String getCName()>
<android.net.http.SslCertificate$DName: java.lang.String getOName()>
<android.net.http.SslCertificate$DName: java.lang.String getUName()>
<android.app.AlertDialog$Builder: void <init>(android.content.Context)>
<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>
<android.app.AlertDialog$Builder: android.content.Context getContext()>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>
<android.app.AlertDialog$Builder: android.app.AlertDialog create()>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<com.facebook.login.DeviceAuthDialog$RequestState: java.lang.String getUserCode()>
<com.facebook.login.DeviceAuthDialog$RequestState: void setUserCode(java.lang.String)>
<com.facebook.login.DeviceAuthDialog$RequestState: java.lang.String getRequestCode()>
<com.facebook.login.DeviceAuthDialog$RequestState: void setRequestCode(java.lang.String)>
<com.facebook.login.DeviceAuthDialog$RequestState: long getInterval()>
<com.facebook.login.DeviceAuthDialog$RequestState: void setInterval(long)>
<com.facebook.login.DeviceAuthDialog$RequestState: void setLastPoll(long)>
<com.facebook.login.DeviceAuthDialog$RequestState: boolean withinLastRefreshWindow()>
<com.facebook.login.DeviceAuthDialog$RequestState: int describeContents()>
<com.facebook.login.DeviceAuthDialog$RequestState: void writeToParcel(android.os.Parcel,int)>
<com.facebook.login.DeviceAuthDialog$2: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.login.DeviceAuthDialog$3: void run()>
<com.facebook.login.DeviceAuthDialog$4: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.login.DeviceAuthDialog$5: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.login.DeviceAuthDialog$1: void onClick(android.view.View)>
<com.facebook.share.model.ShareVideo$Builder: void <init>()>
<com.facebook.share.model.ShareVideo$Builder: com.facebook.share.model.ShareVideo$Builder setLocalUrl(android.net.Uri)>
<com.facebook.share.model.ShareVideo$Builder: com.facebook.share.model.ShareVideo build()>
<com.facebook.share.model.ShareVideo$Builder: com.facebook.share.model.ShareVideo$Builder readFrom(com.facebook.share.model.ShareVideo)>
<com.facebook.share.model.ShareVideo$Builder: com.facebook.share.model.ShareMedia$Builder readFrom(com.facebook.share.model.ShareMedia)>
<com.facebook.share.model.ShareVideo$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareVideo$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareVideo$1: com.facebook.share.model.ShareVideo createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareVideo$1: com.facebook.share.model.ShareVideo[] newArray(int)>
<com.facebook.share.model.ShareVideo$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareVideo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.FacebookContentProvider: void <init>()>
<com.facebook.FacebookContentProvider: java.lang.String getAttachmentUrl(java.lang.String,java.util.UUID,java.lang.String)>
<com.facebook.FacebookContentProvider: boolean onCreate()>
<com.facebook.FacebookContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.facebook.FacebookContentProvider: java.lang.String getType(android.net.Uri)>
<com.facebook.FacebookContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.facebook.FacebookContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.facebook.FacebookContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.facebook.FacebookContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.facebook.share.model.ShareVideoContent$Builder: void <init>()>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent$Builder setContentDescription(java.lang.String)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent$Builder setContentTitle(java.lang.String)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent$Builder setPreviewPhoto(com.facebook.share.model.SharePhoto)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent$Builder setVideo(com.facebook.share.model.ShareVideo)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent build()>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareVideoContent$Builder readFrom(com.facebook.share.model.ShareVideoContent)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.model.ShareVideoContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareVideoContent$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareVideoContent$1: com.facebook.share.model.ShareVideoContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareVideoContent$1: com.facebook.share.model.ShareVideoContent[] newArray(int)>
<com.facebook.share.model.ShareVideoContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareVideoContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.SharePhotoContent$Builder: void <init>()>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.SharePhotoContent$Builder addPhoto(com.facebook.share.model.SharePhoto)>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.SharePhotoContent$Builder addPhotos(java.util.List)>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.SharePhotoContent build()>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.SharePhotoContent$Builder readFrom(com.facebook.share.model.SharePhotoContent)>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.SharePhotoContent$Builder setPhotos(java.util.List)>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.model.SharePhotoContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.SharePhotoContent$Builder: java.lang.Object build()>
<com.facebook.share.model.SharePhotoContent$1: com.facebook.share.model.SharePhotoContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.SharePhotoContent$1: com.facebook.share.model.SharePhotoContent[] newArray(int)>
<com.facebook.share.model.SharePhotoContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.SharePhotoContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareMediaContent$Builder: void <init>()>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareMediaContent$Builder addMedium(com.facebook.share.model.ShareMedia)>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareMediaContent$Builder addMedia(java.util.List)>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareMediaContent build()>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareMediaContent$Builder readFrom(com.facebook.share.model.ShareMediaContent)>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareMediaContent$Builder setMedia(java.util.List)>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareContent$Builder readFrom(com.facebook.share.model.ShareContent)>
<com.facebook.share.model.ShareMediaContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.ShareMediaContent$Builder: java.lang.Object build()>
<com.facebook.share.model.ShareMediaContent$1: com.facebook.share.model.ShareMediaContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.ShareMediaContent$1: com.facebook.share.model.ShareMediaContent[] newArray(int)>
<com.facebook.share.model.ShareMediaContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.ShareMediaContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.widget.LikeView: void <init>(android.content.Context)>
<com.facebook.share.widget.LikeView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.share.widget.LikeView: void setObjectIdAndType(java.lang.String,com.facebook.share.widget.LikeView$ObjectType)>
<com.facebook.share.widget.LikeView: void setLikeViewStyle(com.facebook.share.widget.LikeView$Style)>
<com.facebook.share.widget.LikeView: void setAuxiliaryViewPosition(com.facebook.share.widget.LikeView$AuxiliaryViewPosition)>
<com.facebook.share.widget.LikeView: void setHorizontalAlignment(com.facebook.share.widget.LikeView$HorizontalAlignment)>
<com.facebook.share.widget.LikeView: void setForegroundColor(int)>
<com.facebook.share.widget.LikeView: void setOnErrorListener(com.facebook.share.widget.LikeView$OnErrorListener)>
<com.facebook.share.widget.LikeView: com.facebook.share.widget.LikeView$OnErrorListener getOnErrorListener()>
<com.facebook.share.widget.LikeView: void setFragment(android.support.v4.app.Fragment)>
<com.facebook.share.widget.LikeView: void setFragment(android.app.Fragment)>
<com.facebook.share.widget.LikeView: void setEnabled(boolean)>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel[] values()>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String)>
<android.webkit.WebStorage: void <init>()>
<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>
<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>
<android.webkit.WebStorage: void deleteAllData()>
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>
<android.webkit.GeolocationPermissions: void <init>()>
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>
<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.GeolocationPermissions: void clear(java.lang.String)>
<android.webkit.GeolocationPermissions: void allow(java.lang.String)>
<android.webkit.GeolocationPermissions: void clearAll()>
<com.facebook.login.DeviceAuthDialog$RequestState$1: com.facebook.login.DeviceAuthDialog$RequestState createFromParcel(android.os.Parcel)>
<com.facebook.login.DeviceAuthDialog$RequestState$1: com.facebook.login.DeviceAuthDialog$RequestState[] newArray(int)>
<com.facebook.login.DeviceAuthDialog$RequestState$1: java.lang.Object[] newArray(int)>
<com.facebook.login.DeviceAuthDialog$RequestState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.internal.PlatformServiceClient$1: void handleMessage(android.os.Message)>
<com.facebook.share.internal.LikeButton: void <init>(android.content.Context,boolean)>
<com.facebook.share.internal.LikeButton: void setSelected(boolean)>
<com.facebook.share.internal.LikeBoxCountView: void <init>(android.content.Context)>
<com.facebook.share.internal.LikeBoxCountView: void setText(java.lang.String)>
<com.facebook.share.internal.LikeBoxCountView: void setCaretPosition(com.facebook.share.internal.LikeBoxCountView$LikeBoxCountViewCaretPosition)>
<com.facebook.share.internal.LikeActionController: boolean handleOnActivityResult(int,int,android.content.Intent)>
<com.facebook.share.internal.LikeActionController: void getControllerForObjectId(java.lang.String,com.facebook.share.widget.LikeView$ObjectType,com.facebook.share.internal.LikeActionController$CreationCallback)>
<com.facebook.share.internal.LikeActionController: java.lang.String getObjectId()>
<com.facebook.share.internal.LikeActionController: java.lang.String getLikeCountString()>
<com.facebook.share.internal.LikeActionController: java.lang.String getSocialSentence()>
<com.facebook.share.internal.LikeActionController: boolean isObjectLiked()>
<com.facebook.share.internal.LikeActionController: boolean shouldEnableView()>
<com.facebook.share.internal.LikeActionController: void toggleLike(android.app.Activity,com.facebook.internal.FragmentWrapper,android.os.Bundle)>
<com.facebook.share.widget.LikeView$LikeActionControllerCreationCallback: void cancel()>
<com.facebook.share.widget.LikeView$LikeActionControllerCreationCallback: void onComplete(com.facebook.share.internal.LikeActionController,com.facebook.FacebookException)>
<com.facebook.share.widget.LikeView$Style: com.facebook.share.widget.LikeView$Style[] values()>
<com.facebook.share.widget.LikeView$Style: com.facebook.share.widget.LikeView$Style valueOf(java.lang.String)>
<com.facebook.share.widget.LikeView$Style: java.lang.String toString()>
<com.facebook.share.widget.LikeView$HorizontalAlignment: com.facebook.share.widget.LikeView$HorizontalAlignment[] values()>
<com.facebook.share.widget.LikeView$HorizontalAlignment: com.facebook.share.widget.LikeView$HorizontalAlignment valueOf(java.lang.String)>
<com.facebook.share.widget.LikeView$HorizontalAlignment: java.lang.String toString()>
<com.facebook.share.widget.LikeView$AuxiliaryViewPosition: com.facebook.share.widget.LikeView$AuxiliaryViewPosition[] values()>
<com.facebook.share.widget.LikeView$AuxiliaryViewPosition: com.facebook.share.widget.LikeView$AuxiliaryViewPosition valueOf(java.lang.String)>
<com.facebook.share.widget.LikeView$AuxiliaryViewPosition: java.lang.String toString()>
<com.facebook.share.widget.LikeView$LikeControllerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.share.widget.LikeView$1: void onClick(android.view.View)>
<com.facebook.share.internal.LikeBoxCountView$LikeBoxCountViewCaretPosition: com.facebook.share.internal.LikeBoxCountView$LikeBoxCountViewCaretPosition[] values()>
<com.facebook.share.internal.LikeBoxCountView$LikeBoxCountViewCaretPosition: com.facebook.share.internal.LikeBoxCountView$LikeBoxCountViewCaretPosition valueOf(java.lang.String)>
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>
<android.webkit.WebStorage$Origin: long getQuota()>
<android.webkit.WebStorage$Origin: long getUsage()>
<com.facebook.share.internal.LikeActionController$9: void onComplete()>
<com.facebook.share.internal.LikeActionController$8: void onBatchCompleted(com.facebook.GraphRequestBatch)>
<com.facebook.share.internal.LikeActionController$4: void run()>
<com.facebook.share.internal.LikeActionController$7: void onComplete()>
<com.facebook.share.internal.LikeActionController$6: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.internal.LikeActionController$6: void onError(com.facebook.internal.AppCall,com.facebook.FacebookException)>
<com.facebook.share.internal.LikeActionController$6: void onCancel(com.facebook.internal.AppCall)>
<com.facebook.share.internal.LikeActionController$CreateLikeActionControllerWorkItem: void run()>
<com.facebook.share.internal.LikeActionController$10: void completed(android.os.Bundle)>
<com.facebook.share.internal.LikeActionController$11: void onBatchCompleted(com.facebook.GraphRequestBatch)>
<com.facebook.share.internal.LikeActionController$MRUCacheWorkItem: void run()>
<com.facebook.share.internal.LikeContent$Builder: void <init>()>
<com.facebook.share.internal.LikeContent$Builder: com.facebook.share.internal.LikeContent$Builder setObjectId(java.lang.String)>
<com.facebook.share.internal.LikeContent$Builder: com.facebook.share.internal.LikeContent$Builder setObjectType(java.lang.String)>
<com.facebook.share.internal.LikeContent$Builder: com.facebook.share.internal.LikeContent build()>
<com.facebook.share.internal.LikeContent$Builder: com.facebook.share.internal.LikeContent$Builder readFrom(com.facebook.share.internal.LikeContent)>
<com.facebook.share.internal.LikeContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.internal.LikeContent$Builder: java.lang.Object build()>
<com.facebook.share.internal.LikeContent: java.lang.String getObjectId()>
<com.facebook.share.internal.LikeContent: java.lang.String getObjectType()>
<com.facebook.share.internal.LikeContent: int describeContents()>
<com.facebook.share.internal.LikeContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.internal.LikeActionController$GetOGObjectLikesRequestWrapper: boolean isObjectLiked()>
<com.facebook.share.internal.LikeActionController$GetOGObjectLikesRequestWrapper: java.lang.String getUnlikeToken()>
<com.facebook.share.internal.LikeActionController$1: void onComplete(com.facebook.share.internal.LikeActionController,com.facebook.FacebookException)>
<com.facebook.share.internal.LikeActionController$3: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.internal.LikeActionController$2: void run()>
<com.facebook.share.internal.LikeActionController$GetPageLikesRequestWrapper: boolean isObjectLiked()>
<com.facebook.share.internal.LikeActionController$GetPageLikesRequestWrapper: java.lang.String getUnlikeToken()>
<com.facebook.share.internal.LikeActionController$SerializeToDiskWorkItem: void run()>
<com.facebook.share.internal.LikeDialog: boolean canShowNativeDialog()>
<com.facebook.share.internal.LikeDialog: boolean canShowWebFallback()>
<com.facebook.share.internal.LikeDialog: void <init>(android.app.Activity)>
<com.facebook.share.internal.LikeDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.internal.LikeDialog: void <init>(android.app.Fragment)>
<com.facebook.share.internal.LikeDialog: void <init>(com.facebook.internal.FragmentWrapper)>
<com.facebook.share.internal.LikeActionController$9$1: void onBatchCompleted(com.facebook.GraphRequestBatch)>
<com.facebook.share.internal.LikeActionController$7$1: void onBatchCompleted(com.facebook.GraphRequestBatch)>
<com.facebook.share.internal.LikeActionController$AbstractRequestWrapper$1: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.internal.LikeContent$1: com.facebook.share.internal.LikeContent createFromParcel(android.os.Parcel)>
<com.facebook.share.internal.LikeContent$1: com.facebook.share.internal.LikeContent[] newArray(int)>
<com.facebook.share.internal.LikeContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.internal.LikeContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.internal.LikeDialogFeature: com.facebook.share.internal.LikeDialogFeature[] values()>
<com.facebook.share.internal.LikeDialogFeature: com.facebook.share.internal.LikeDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.LikeDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.LikeDialogFeature: int getMinVersion()>
<com.facebook.share.internal.LikeDialog$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.internal.LikeDialog$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.internal.LikeDialog$Result: void <init>(android.os.Bundle)>
<com.facebook.share.internal.LikeDialog$Result: android.os.Bundle getData()>
<com.facebook.internal.DialogPresenter: void <init>()>
<com.facebook.internal.DialogPresenter: void setupAppCallForCannotShowError(com.facebook.internal.AppCall)>
<com.facebook.internal.DialogPresenter: void setupAppCallForValidationError(com.facebook.internal.AppCall,com.facebook.FacebookException)>
<com.facebook.internal.DialogPresenter: void present(com.facebook.internal.AppCall,android.app.Activity)>
<com.facebook.internal.DialogPresenter: void present(com.facebook.internal.AppCall,com.facebook.internal.FragmentWrapper)>
<com.facebook.internal.DialogPresenter: boolean canPresentNativeDialogWithFeature(com.facebook.internal.DialogFeature)>
<com.facebook.internal.DialogPresenter: boolean canPresentWebFallbackDialogWithFeature(com.facebook.internal.DialogFeature)>
<com.facebook.internal.DialogPresenter: void setupAppCallForErrorResult(com.facebook.internal.AppCall,com.facebook.FacebookException)>
<com.facebook.internal.DialogPresenter: void setupAppCallForWebDialog(com.facebook.internal.AppCall,java.lang.String,android.os.Bundle)>
<com.facebook.internal.DialogPresenter: void setupAppCallForWebFallbackDialog(com.facebook.internal.AppCall,android.os.Bundle,com.facebook.internal.DialogFeature)>
<com.facebook.internal.DialogPresenter: void setupAppCallForNativeDialog(com.facebook.internal.AppCall,com.facebook.internal.DialogPresenter$ParameterProvider,com.facebook.internal.DialogFeature)>
<com.facebook.internal.DialogPresenter: int getProtocolVersionForNativeDialog(com.facebook.internal.DialogFeature)>
<com.facebook.internal.DialogPresenter: void logDialogActivity(android.content.Context,java.lang.String,java.lang.String)>
<com.facebook.share.internal.LikeDialog$WebFallbackHandler: boolean canShow(com.facebook.share.internal.LikeContent,boolean)>
<com.facebook.share.internal.LikeDialog$WebFallbackHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.internal.LikeContent)>
<com.facebook.share.internal.LikeDialog$WebFallbackHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.internal.LikeDialog$WebFallbackHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.internal.LikeDialog$NativeHandler: boolean canShow(com.facebook.share.internal.LikeContent,boolean)>
<com.facebook.share.internal.LikeDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.internal.LikeContent)>
<com.facebook.share.internal.LikeDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.internal.LikeDialog$NativeHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.FacebookButtonBase$1: void onClick(android.view.View)>
<com.facebook.share.internal.LikeDialog$NativeHandler$1: android.os.Bundle getParameters()>
<com.facebook.share.internal.LikeDialog$NativeHandler$1: android.os.Bundle getLegacyParameters()>
<com.facebook.FacebookBroadcastReceiver: void <init>()>
<com.facebook.FacebookBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.internal.AnalyticsEvents: void <init>()>
<com.facebook.internal.CollectionMapper$1: void onComplete()>
<com.facebook.internal.CollectionMapper$1: void onError(com.facebook.FacebookException)>
<com.facebook.internal.CollectionMapper: void iterate(com.facebook.internal.CollectionMapper$Collection,com.facebook.internal.CollectionMapper$ValueMapper,com.facebook.internal.CollectionMapper$OnMapperCompleteListener)>
<com.facebook.internal.Mutable: void <init>(java.lang.Object)>
<com.facebook.internal.CollectionMapper$2: void onComplete(java.lang.Object)>
<com.facebook.internal.CollectionMapper$2: void onError(com.facebook.FacebookException)>
<com.facebook.internal.GraphUtil: void <init>()>
<com.facebook.internal.GraphUtil: org.json.JSONObject createOpenGraphActionForPost(java.lang.String)>
<com.facebook.internal.GraphUtil: org.json.JSONObject createOpenGraphObjectForPost(java.lang.String)>
<com.facebook.internal.GraphUtil: org.json.JSONObject createOpenGraphObjectForPost(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.json.JSONObject,java.lang.String)>
<com.facebook.internal.GraphUtil: boolean isOpenGraphObjectForPost(org.json.JSONObject)>
<com.facebook.internal.JsonUtil$JSONObjectEntry: java.lang.String getKey()>
<com.facebook.internal.JsonUtil$JSONObjectEntry: java.lang.Object getValue()>
<com.facebook.internal.JsonUtil$JSONObjectEntry: java.lang.Object setValue(java.lang.Object)>
<com.facebook.internal.JsonUtil$JSONObjectEntry: java.lang.Object getKey()>
<com.facebook.internal.LoginAuthorizationType: com.facebook.internal.LoginAuthorizationType[] values()>
<com.facebook.internal.LoginAuthorizationType: com.facebook.internal.LoginAuthorizationType valueOf(java.lang.String)>
<com.facebook.internal.PermissionType: com.facebook.internal.PermissionType[] values()>
<com.facebook.internal.PermissionType: com.facebook.internal.PermissionType valueOf(java.lang.String)>
<com.facebook.login.DeviceLoginManager: void <init>()>
<com.facebook.login.DeviceLoginManager: com.facebook.login.DeviceLoginManager getInstance()>
<com.facebook.login.DeviceLoginManager: void setDeviceRedirectUri(android.net.Uri)>
<com.facebook.login.DeviceLoginManager: android.net.Uri getDeviceRedirectUri()>
<com.facebook.login.widget.DeviceLoginButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.login.widget.DeviceLoginButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.login.widget.DeviceLoginButton: void <init>(android.content.Context)>
<com.facebook.login.widget.DeviceLoginButton: void setDeviceRedirectUri(android.net.Uri)>
<com.facebook.login.widget.DeviceLoginButton: android.net.Uri getDeviceRedirectUri()>
<com.facebook.login.widget.LoginButton: void <init>(android.content.Context)>
<com.facebook.login.widget.LoginButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.login.widget.LoginButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.login.widget.LoginButton: void setDefaultAudience(com.facebook.login.DefaultAudience)>
<com.facebook.login.widget.LoginButton: com.facebook.login.DefaultAudience getDefaultAudience()>
<com.facebook.login.widget.LoginButton: void setReadPermissions(java.util.List)>
<com.facebook.login.widget.LoginButton: void setReadPermissions(java.lang.String[])>
<com.facebook.login.widget.LoginButton: void setPublishPermissions(java.util.List)>
<com.facebook.login.widget.LoginButton: void setPublishPermissions(java.lang.String[])>
<com.facebook.login.widget.LoginButton: void clearPermissions()>
<com.facebook.login.widget.LoginButton: void setLoginBehavior(com.facebook.login.LoginBehavior)>
<com.facebook.login.widget.LoginButton: com.facebook.login.LoginBehavior getLoginBehavior()>
<com.facebook.login.widget.LoginButton: void setToolTipStyle(com.facebook.login.widget.ToolTipPopup$Style)>
<com.facebook.login.widget.LoginButton: void setToolTipMode(com.facebook.login.widget.LoginButton$ToolTipMode)>
<com.facebook.login.widget.LoginButton: com.facebook.login.widget.LoginButton$ToolTipMode getToolTipMode()>
<com.facebook.login.widget.LoginButton: void setToolTipDisplayTime(long)>
<com.facebook.login.widget.LoginButton: long getToolTipDisplayTime()>
<com.facebook.login.widget.LoginButton: void dismissToolTip()>
<com.facebook.login.widget.LoginButton: void registerCallback(com.facebook.CallbackManager,com.facebook.FacebookCallback)>
<com.facebook.login.widget.LoginButton$LoginClickListener: void onClick(android.view.View)>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: void setDefaultAudience(com.facebook.login.DefaultAudience)>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: com.facebook.login.DefaultAudience getDefaultAudience()>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: void setReadPermissions(java.util.List)>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: void setPublishPermissions(java.util.List)>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: void clearPermissions()>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: void setLoginBehavior(com.facebook.login.LoginBehavior)>
<com.facebook.login.widget.LoginButton$LoginButtonProperties: com.facebook.login.LoginBehavior getLoginBehavior()>
<com.facebook.login.widget.ToolTipPopup$Style: com.facebook.login.widget.ToolTipPopup$Style[] values()>
<com.facebook.login.widget.ToolTipPopup$Style: com.facebook.login.widget.ToolTipPopup$Style valueOf(java.lang.String)>
<com.facebook.login.widget.LoginButton$ToolTipMode: com.facebook.login.widget.LoginButton$ToolTipMode[] values()>
<com.facebook.login.widget.LoginButton$ToolTipMode: com.facebook.login.widget.LoginButton$ToolTipMode valueOf(java.lang.String)>
<com.facebook.login.widget.LoginButton$ToolTipMode: com.facebook.login.widget.LoginButton$ToolTipMode fromInt(int)>
<com.facebook.login.widget.LoginButton$ToolTipMode: java.lang.String toString()>
<com.facebook.login.widget.LoginButton$ToolTipMode: int getValue()>
<com.facebook.login.widget.ToolTipPopup: void <init>(java.lang.String,android.view.View)>
<com.facebook.login.widget.ToolTipPopup: void setStyle(com.facebook.login.widget.ToolTipPopup$Style)>
<com.facebook.login.widget.ToolTipPopup: void show()>
<com.facebook.login.widget.ToolTipPopup: void setNuxDisplayTime(long)>
<com.facebook.login.widget.ToolTipPopup: void dismiss()>
<com.facebook.login.widget.LoginButton$1: void run()>
<com.facebook.login.widget.LoginButton$LoginClickListener$1: void onClick(android.content.DialogInterface,int)>
<com.facebook.login.widget.LoginButton$1$1: void run()>
<com.facebook.login.widget.ToolTipPopup$PopupContentView: void <init>(com.facebook.login.widget.ToolTipPopup,android.content.Context)>
<com.facebook.login.widget.ToolTipPopup$PopupContentView: void showTopArrow()>
<com.facebook.login.widget.ToolTipPopup$PopupContentView: void showBottomArrow()>
<android.widget.PopupWindow: void <init>(android.content.Context)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.PopupWindow: void <init>()>
<android.widget.PopupWindow: void <init>(android.view.View)>
<android.widget.PopupWindow: void <init>(int,int)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.widget.PopupWindow: void setIgnoreCheekPress()>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>
<android.widget.PopupWindow: boolean isFocusable()>
<android.widget.PopupWindow: void setFocusable(boolean)>
<android.widget.PopupWindow: int getInputMethodMode()>
<android.widget.PopupWindow: void setInputMethodMode(int)>
<android.widget.PopupWindow: void setSoftInputMode(int)>
<android.widget.PopupWindow: int getSoftInputMode()>
<android.widget.PopupWindow: boolean isTouchable()>
<android.widget.PopupWindow: void setTouchable(boolean)>
<android.widget.PopupWindow: boolean isOutsideTouchable()>
<android.widget.PopupWindow: void setOutsideTouchable(boolean)>
<android.widget.PopupWindow: boolean isClippingEnabled()>
<android.widget.PopupWindow: void setClippingEnabled(boolean)>
<android.widget.PopupWindow: boolean isSplitTouchEnabled()>
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
<android.widget.PopupWindow: int getHeight()>
<android.widget.PopupWindow: void setHeight(int)>
<android.widget.PopupWindow: int getWidth()>
<android.widget.PopupWindow: void setWidth(int)>
<android.widget.PopupWindow: boolean isShowing()>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>
<android.widget.PopupWindow: boolean isAboveAnchor()>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>
<android.widget.PopupWindow: void dismiss()>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.widget.PopupWindow: void update()>
<android.widget.PopupWindow: void update(int,int)>
<android.widget.PopupWindow: void update(int,int,int,int)>
<android.widget.PopupWindow: void update(int,int,int,int,boolean)>
<android.widget.PopupWindow: void update(android.view.View,int,int)>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<com.facebook.login.widget.ToolTipPopup$3: void onClick(android.view.View)>
<com.facebook.login.widget.ToolTipPopup$1: void onScrollChanged()>
<com.facebook.login.widget.ToolTipPopup$2: void run()>
<com.facebook.login.widget.ProfilePictureView$1: void onCompleted(com.facebook.internal.ImageResponse)>
<com.facebook.login.widget.ProfilePictureView: void <init>(android.content.Context)>
<com.facebook.login.widget.ProfilePictureView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.login.widget.ProfilePictureView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.login.widget.ProfilePictureView: int getPresetSize()>
<com.facebook.login.widget.ProfilePictureView: void setPresetSize(int)>
<com.facebook.login.widget.ProfilePictureView: boolean isCropped()>
<com.facebook.login.widget.ProfilePictureView: void setCropped(boolean)>
<com.facebook.login.widget.ProfilePictureView: java.lang.String getProfileId()>
<com.facebook.login.widget.ProfilePictureView: void setProfileId(java.lang.String)>
<com.facebook.login.widget.ProfilePictureView: com.facebook.login.widget.ProfilePictureView$OnErrorListener getOnErrorListener()>
<com.facebook.login.widget.ProfilePictureView: void setOnErrorListener(com.facebook.login.widget.ProfilePictureView$OnErrorListener)>
<com.facebook.login.widget.ProfilePictureView: void setDefaultProfilePicture(android.graphics.Bitmap)>
<com.facebook.messenger.MessengerThreadParams$Origin: com.facebook.messenger.MessengerThreadParams$Origin[] values()>
<com.facebook.messenger.MessengerThreadParams$Origin: com.facebook.messenger.MessengerThreadParams$Origin valueOf(java.lang.String)>
<com.facebook.messenger.MessengerThreadParams: void <init>(com.facebook.messenger.MessengerThreadParams$Origin,java.lang.String,java.lang.String,java.util.List)>
<com.facebook.messenger.MessengerUtils: void <init>()>
<com.facebook.messenger.MessengerUtils: void shareToMessenger(android.app.Activity,int,com.facebook.messenger.ShareToMessengerParams)>
<com.facebook.messenger.MessengerUtils: com.facebook.messenger.MessengerThreadParams getMessengerThreadParamsForIntent(android.content.Intent)>
<com.facebook.messenger.MessengerUtils: void finishShareToMessenger(android.app.Activity,com.facebook.messenger.ShareToMessengerParams)>
<com.facebook.messenger.MessengerUtils: boolean hasMessengerInstalled(android.content.Context)>
<com.facebook.messenger.MessengerUtils: void openMessengerInPlayStore(android.content.Context)>
<com.facebook.messenger.ShareToMessengerParams: com.facebook.messenger.ShareToMessengerParamsBuilder newBuilder(android.net.Uri,java.lang.String)>
<com.facebook.messenger.ShareToMessengerParamsBuilder: android.net.Uri getUri()>
<com.facebook.messenger.ShareToMessengerParamsBuilder: java.lang.String getMimeType()>
<com.facebook.messenger.ShareToMessengerParamsBuilder: com.facebook.messenger.ShareToMessengerParamsBuilder setMetaData(java.lang.String)>
<com.facebook.messenger.ShareToMessengerParamsBuilder: java.lang.String getMetaData()>
<com.facebook.messenger.ShareToMessengerParamsBuilder: com.facebook.messenger.ShareToMessengerParamsBuilder setExternalUri(android.net.Uri)>
<com.facebook.messenger.ShareToMessengerParamsBuilder: android.net.Uri getExternalUri()>
<com.facebook.messenger.ShareToMessengerParamsBuilder: com.facebook.messenger.ShareToMessengerParams build()>
<com.facebook.ProfileTracker$ProfileBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.share.DeviceShareDialog$1: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.DeviceShareDialog: void <init>(android.app.Activity)>
<com.facebook.share.DeviceShareDialog: void <init>(android.app.Fragment)>
<com.facebook.share.DeviceShareDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.DeviceShareDialog$Result: void <init>()>
<com.facebook.share.internal.AppInviteDialogFeature: com.facebook.share.internal.AppInviteDialogFeature[] values()>
<com.facebook.share.internal.AppInviteDialogFeature: com.facebook.share.internal.AppInviteDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.AppInviteDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.AppInviteDialogFeature: int getMinVersion()>
<com.facebook.share.internal.GameRequestValidation: void <init>()>
<com.facebook.share.internal.GameRequestValidation: void validate(com.facebook.share.model.GameRequestContent)>
<com.facebook.share.internal.LegacyNativeDialogParameters: void <init>()>
<com.facebook.share.internal.LegacyNativeDialogParameters: android.os.Bundle create(java.util.UUID,com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.internal.MessageDialogFeature: com.facebook.share.internal.MessageDialogFeature[] values()>
<com.facebook.share.internal.MessageDialogFeature: com.facebook.share.internal.MessageDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.MessageDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.MessageDialogFeature: int getMinVersion()>
<com.facebook.share.internal.NativeDialogParameters: void <init>()>
<com.facebook.share.internal.NativeDialogParameters: android.os.Bundle create(java.util.UUID,com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.internal.OpenGraphActionDialogFeature: com.facebook.share.internal.OpenGraphActionDialogFeature[] values()>
<com.facebook.share.internal.OpenGraphActionDialogFeature: com.facebook.share.internal.OpenGraphActionDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.OpenGraphActionDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.OpenGraphActionDialogFeature: int getMinVersion()>
<com.facebook.share.internal.OpenGraphMessageDialogFeature: com.facebook.share.internal.OpenGraphMessageDialogFeature[] values()>
<com.facebook.share.internal.OpenGraphMessageDialogFeature: com.facebook.share.internal.OpenGraphMessageDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.OpenGraphMessageDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.OpenGraphMessageDialogFeature: int getMinVersion()>
<com.facebook.share.internal.ShareConstants: void <init>()>
<com.facebook.share.internal.ShareContentValidation: void <init>()>
<com.facebook.share.internal.ShareContentValidation: void validateForMessage(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.ShareContentValidation: void validateForNativeShare(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.ShareContentValidation: void validateForWebShare(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.ShareContentValidation: void validateForApiShare(com.facebook.share.model.ShareContent)>
<com.facebook.share.internal.ShareContentValidation: void validateMedium(com.facebook.share.model.ShareMedia,com.facebook.share.internal.ShareContentValidation$Validator)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareLinkContent)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.SharePhotoContent)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareVideoContent)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareMediaContent)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareOpenGraphContent)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareOpenGraphAction)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareOpenGraphObject)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareOpenGraphValueContainer,boolean)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareVideo)>
<com.facebook.share.internal.ShareContentValidation$Validator: void validate(com.facebook.share.model.ShareMedia)>
<com.facebook.share.internal.ShareContentValidation$Validator: boolean isOpenGraphContent()>
<com.facebook.share.internal.ShareContentValidation$WebShareValidator: void validate(com.facebook.share.model.SharePhotoContent)>
<com.facebook.share.internal.ShareContentValidation$WebShareValidator: void validate(com.facebook.share.model.ShareVideoContent)>
<com.facebook.share.internal.ShareContentValidation$WebShareValidator: void validate(com.facebook.share.model.ShareMediaContent)>
<com.facebook.share.internal.ShareContentValidation$WebShareValidator: void validate(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareContentValidation$ApiValidator: void validate(com.facebook.share.model.SharePhoto)>
<com.facebook.share.internal.ShareContentValidation$ApiValidator: void validate(com.facebook.share.model.ShareVideoContent)>
<com.facebook.share.internal.ShareContentValidation$ApiValidator: void validate(com.facebook.share.model.ShareMediaContent)>
<com.facebook.share.internal.ShareContentValidation$ApiValidator: void validate(com.facebook.share.model.ShareLinkContent)>
<com.facebook.share.internal.ShareDialogFeature: com.facebook.share.internal.ShareDialogFeature[] values()>
<com.facebook.share.internal.ShareDialogFeature: com.facebook.share.internal.ShareDialogFeature valueOf(java.lang.String)>
<com.facebook.share.internal.ShareDialogFeature: java.lang.String getAction()>
<com.facebook.share.internal.ShareDialogFeature: int getMinVersion()>
<com.facebook.share.internal.VideoUploader: void <init>()>
<com.facebook.share.internal.VideoUploader: void uploadAsync(com.facebook.share.model.ShareVideoContent,com.facebook.FacebookCallback)>
<com.facebook.share.internal.VideoUploader: void uploadAsync(com.facebook.share.model.ShareVideoContent,java.lang.String,com.facebook.FacebookCallback)>
<com.facebook.share.internal.VideoUploader$StartUploadWorkItem: void <init>(com.facebook.share.internal.VideoUploader$UploadContext,int)>
<com.facebook.share.internal.VideoUploader$StartUploadWorkItem: android.os.Bundle getParameters()>
<com.facebook.share.internal.VideoUploader$TransferChunkWorkItem: void <init>(com.facebook.share.internal.VideoUploader$UploadContext,java.lang.String,java.lang.String,int)>
<com.facebook.share.internal.VideoUploader$TransferChunkWorkItem: android.os.Bundle getParameters()>
<com.facebook.share.internal.VideoUploader$FinishUploadWorkItem: void <init>(com.facebook.share.internal.VideoUploader$UploadContext,int)>
<com.facebook.share.internal.VideoUploader$FinishUploadWorkItem: android.os.Bundle getParameters()>
<com.facebook.share.internal.VideoUploader$UploadWorkItemBase$2: void run()>
<com.facebook.share.internal.VideoUploader$UploadWorkItemBase$1: void run()>
<com.facebook.share.model.AppInviteContent$1: com.facebook.share.model.AppInviteContent createFromParcel(android.os.Parcel)>
<com.facebook.share.model.AppInviteContent$1: com.facebook.share.model.AppInviteContent[] newArray(int)>
<com.facebook.share.model.AppInviteContent$1: java.lang.Object[] newArray(int)>
<com.facebook.share.model.AppInviteContent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.facebook.share.model.AppInviteContent: java.lang.String getApplinkUrl()>
<com.facebook.share.model.AppInviteContent: java.lang.String getPreviewImageUrl()>
<com.facebook.share.model.AppInviteContent: java.lang.String getPromotionCode()>
<com.facebook.share.model.AppInviteContent: java.lang.String getPromotionText()>
<com.facebook.share.model.AppInviteContent: int describeContents()>
<com.facebook.share.model.AppInviteContent: void writeToParcel(android.os.Parcel,int)>
<com.facebook.share.model.AppInviteContent$Builder: void <init>()>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.AppInviteContent$Builder setApplinkUrl(java.lang.String)>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.AppInviteContent$Builder setPreviewImageUrl(java.lang.String)>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.AppInviteContent$Builder setPromotionDetails(java.lang.String,java.lang.String)>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.AppInviteContent build()>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.AppInviteContent$Builder readFrom(com.facebook.share.model.AppInviteContent)>
<com.facebook.share.model.AppInviteContent$Builder: com.facebook.share.model.ShareModelBuilder readFrom(com.facebook.share.model.ShareModel)>
<com.facebook.share.model.AppInviteContent$Builder: java.lang.Object build()>
<com.facebook.share.ShareApi$1: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.ShareApi: void share(com.facebook.share.model.ShareContent,com.facebook.FacebookCallback)>
<com.facebook.share.ShareApi: void <init>(com.facebook.share.model.ShareContent)>
<com.facebook.share.ShareApi: java.lang.String getMessage()>
<com.facebook.share.ShareApi: void setMessage(java.lang.String)>
<com.facebook.share.ShareApi: java.lang.String getGraphNode()>
<com.facebook.share.ShareApi: void setGraphNode(java.lang.String)>
<com.facebook.share.ShareApi: com.facebook.share.model.ShareContent getShareContent()>
<com.facebook.share.ShareApi: boolean canShare()>
<com.facebook.share.ShareApi: void share(com.facebook.FacebookCallback)>
<com.facebook.share.ShareApi$9: java.util.Iterator keyIterator()>
<com.facebook.share.ShareApi$9: java.lang.Object get(java.lang.String)>
<com.facebook.share.ShareApi$9: void set(java.lang.String,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$9: void set(java.lang.Object,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$9: java.lang.Object get(java.lang.Object)>
<com.facebook.share.ShareApi$7: void mapValue(java.lang.Object,com.facebook.internal.CollectionMapper$OnMapValueCompleteListener)>
<com.facebook.share.ShareApi$8: java.util.Iterator keyIterator()>
<com.facebook.share.ShareApi$8: java.lang.Object get(java.lang.String)>
<com.facebook.share.ShareApi$8: void set(java.lang.String,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$8: void set(java.lang.Object,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$8: java.lang.Object get(java.lang.Object)>
<com.facebook.share.ShareApi$11: void onComplete()>
<com.facebook.share.ShareApi$11: void onError(com.facebook.FacebookException)>
<com.facebook.share.ShareApi$10: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.ShareApi$2: void onComplete()>
<com.facebook.share.ShareApi$2: void onError(com.facebook.FacebookException)>
<com.facebook.share.ShareApi$5: java.util.Iterator keyIterator()>
<com.facebook.share.ShareApi$5: java.lang.Object get(java.lang.Integer)>
<com.facebook.share.ShareApi$5: void set(java.lang.Integer,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$5: void set(java.lang.Object,java.lang.Object,com.facebook.internal.CollectionMapper$OnErrorListener)>
<com.facebook.share.ShareApi$5: java.lang.Object get(java.lang.Object)>
<com.facebook.share.ShareApi$6: void onComplete()>
<com.facebook.share.ShareApi$6: void onError(com.facebook.FacebookException)>
<com.facebook.share.ShareApi$3: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.ShareApi$4: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.ShareApi$12: void onCompleted(com.facebook.GraphResponse)>
<com.facebook.share.ShareApi$5$1: boolean hasNext()>
<com.facebook.share.ShareApi$5$1: java.lang.Integer next()>
<com.facebook.share.ShareApi$5$1: void remove()>
<com.facebook.share.ShareApi$5$1: java.lang.Object next()>
<com.facebook.share.widget.AppInviteDialog$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.widget.AppInviteDialog: boolean canShow()>
<com.facebook.share.widget.AppInviteDialog: void show(android.app.Activity,com.facebook.share.model.AppInviteContent)>
<com.facebook.share.widget.AppInviteDialog: void show(android.support.v4.app.Fragment,com.facebook.share.model.AppInviteContent)>
<com.facebook.share.widget.AppInviteDialog: void show(android.app.Fragment,com.facebook.share.model.AppInviteContent)>
<com.facebook.share.widget.AppInviteDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.AppInviteDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.AppInviteDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.AppInviteDialog$Result: void <init>(android.os.Bundle)>
<com.facebook.share.widget.AppInviteDialog$Result: android.os.Bundle getData()>
<com.facebook.share.widget.AppInviteDialog$NativeHandler: boolean canShow(com.facebook.share.model.AppInviteContent,boolean)>
<com.facebook.share.widget.AppInviteDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.AppInviteContent)>
<com.facebook.share.widget.AppInviteDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.AppInviteDialog$NativeHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.AppInviteDialog$WebFallbackHandler: boolean canShow(com.facebook.share.model.AppInviteContent,boolean)>
<com.facebook.share.widget.AppInviteDialog$WebFallbackHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.AppInviteContent)>
<com.facebook.share.widget.AppInviteDialog$WebFallbackHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.AppInviteDialog$WebFallbackHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.AppInviteDialog$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.widget.AppInviteDialog$NativeHandler$1: android.os.Bundle getParameters()>
<com.facebook.share.widget.AppInviteDialog$NativeHandler$1: android.os.Bundle getLegacyParameters()>
<com.facebook.share.widget.CreateAppGroupDialog$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.widget.CreateAppGroupDialog: boolean canShow()>
<com.facebook.share.widget.CreateAppGroupDialog: void show(android.app.Activity,com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.widget.CreateAppGroupDialog: void show(android.support.v4.app.Fragment,com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.widget.CreateAppGroupDialog: void show(android.app.Fragment,com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.widget.CreateAppGroupDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.CreateAppGroupDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.CreateAppGroupDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.CreateAppGroupDialog$Result: java.lang.String getId()>
<com.facebook.share.widget.CreateAppGroupDialog$WebHandler: boolean canShow(com.facebook.share.model.AppGroupCreationContent,boolean)>
<com.facebook.share.widget.CreateAppGroupDialog$WebHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.AppGroupCreationContent)>
<com.facebook.share.widget.CreateAppGroupDialog$WebHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.CreateAppGroupDialog$WebHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.CreateAppGroupDialog$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.widget.DeviceShareButton$1: void onClick(android.view.View)>
<com.facebook.share.widget.DeviceShareButton: void <init>(android.content.Context)>
<com.facebook.share.widget.DeviceShareButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.share.widget.DeviceShareButton: com.facebook.share.model.ShareContent getShareContent()>
<com.facebook.share.widget.DeviceShareButton: void setShareContent(com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.DeviceShareButton: void setEnabled(boolean)>
<com.facebook.share.widget.DeviceShareButton: int getRequestCode()>
<com.facebook.share.widget.DeviceShareButton: void registerCallback(com.facebook.CallbackManager,com.facebook.FacebookCallback)>
<com.facebook.share.widget.DeviceShareButton: void registerCallback(com.facebook.CallbackManager,com.facebook.FacebookCallback,int)>
<com.facebook.share.widget.GameRequestDialog$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.widget.GameRequestDialog: boolean canShow()>
<com.facebook.share.widget.GameRequestDialog: void show(android.app.Activity,com.facebook.share.model.GameRequestContent)>
<com.facebook.share.widget.GameRequestDialog: void show(android.support.v4.app.Fragment,com.facebook.share.model.GameRequestContent)>
<com.facebook.share.widget.GameRequestDialog: void show(android.app.Fragment,com.facebook.share.model.GameRequestContent)>
<com.facebook.share.widget.GameRequestDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.GameRequestDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.GameRequestDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.GameRequestDialog$Result: java.lang.String getRequestId()>
<com.facebook.share.widget.GameRequestDialog$Result: java.util.List getRequestRecipients()>
<com.facebook.share.widget.GameRequestDialog$WebHandler: boolean canShow(com.facebook.share.model.GameRequestContent,boolean)>
<com.facebook.share.widget.GameRequestDialog$WebHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.GameRequestContent)>
<com.facebook.share.widget.GameRequestDialog$WebHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.GameRequestDialog$WebHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.GameRequestDialog$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.widget.JoinAppGroupDialog$1: void onSuccess(com.facebook.internal.AppCall,android.os.Bundle)>
<com.facebook.share.widget.JoinAppGroupDialog: boolean canShow()>
<com.facebook.share.widget.JoinAppGroupDialog: void show(android.app.Activity,java.lang.String)>
<com.facebook.share.widget.JoinAppGroupDialog: void show(android.support.v4.app.Fragment,java.lang.String)>
<com.facebook.share.widget.JoinAppGroupDialog: void show(android.app.Fragment,java.lang.String)>
<com.facebook.share.widget.JoinAppGroupDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.JoinAppGroupDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.JoinAppGroupDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.JoinAppGroupDialog$Result: android.os.Bundle getData()>
<com.facebook.share.widget.JoinAppGroupDialog$WebHandler: boolean canShow(java.lang.String,boolean)>
<com.facebook.share.widget.JoinAppGroupDialog$WebHandler: com.facebook.internal.AppCall createAppCall(java.lang.String)>
<com.facebook.share.widget.JoinAppGroupDialog$WebHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.JoinAppGroupDialog$WebHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.JoinAppGroupDialog$2: boolean onActivityResult(int,android.content.Intent)>
<com.facebook.share.widget.MessageDialog: void show(android.app.Activity,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.MessageDialog: void show(android.support.v4.app.Fragment,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.MessageDialog: void show(android.app.Fragment,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.MessageDialog: boolean canShow(java.lang.Class)>
<com.facebook.share.widget.MessageDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.MessageDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.MessageDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.MessageDialog: boolean getShouldFailOnDataError()>
<com.facebook.share.widget.MessageDialog: void setShouldFailOnDataError(boolean)>
<com.facebook.share.widget.MessageDialog$NativeHandler: boolean canShow(com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.widget.MessageDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.MessageDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.MessageDialog$NativeHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.MessageDialog$NativeHandler$1: android.os.Bundle getParameters()>
<com.facebook.share.widget.MessageDialog$NativeHandler$1: android.os.Bundle getLegacyParameters()>
<com.facebook.share.widget.SendButton: void <init>(android.content.Context)>
<com.facebook.share.widget.SendButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.share.widget.SendButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.share.widget.ShareButtonBase$1: void onClick(android.view.View)>
<com.facebook.share.widget.ShareButton: void <init>(android.content.Context)>
<com.facebook.share.widget.ShareButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.facebook.share.widget.ShareButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.facebook.share.widget.ShareDialog: void show(android.app.Activity,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog: void show(android.support.v4.app.Fragment,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog: void show(android.app.Fragment,com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog: boolean canShow(java.lang.Class)>
<com.facebook.share.widget.ShareDialog: void <init>(android.app.Activity)>
<com.facebook.share.widget.ShareDialog: void <init>(android.support.v4.app.Fragment)>
<com.facebook.share.widget.ShareDialog: void <init>(android.app.Fragment)>
<com.facebook.share.widget.ShareDialog: boolean getShouldFailOnDataError()>
<com.facebook.share.widget.ShareDialog: void setShouldFailOnDataError(boolean)>
<com.facebook.share.widget.ShareDialog: boolean canShow(com.facebook.share.model.ShareContent,com.facebook.share.widget.ShareDialog$Mode)>
<com.facebook.share.widget.ShareDialog: void show(com.facebook.share.model.ShareContent,com.facebook.share.widget.ShareDialog$Mode)>
<com.facebook.share.widget.ShareDialog$Mode: com.facebook.share.widget.ShareDialog$Mode[] values()>
<com.facebook.share.widget.ShareDialog$Mode: com.facebook.share.widget.ShareDialog$Mode valueOf(java.lang.String)>
<com.facebook.share.widget.ShareDialog$FeedHandler: java.lang.Object getMode()>
<com.facebook.share.widget.ShareDialog$FeedHandler: boolean canShow(com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.widget.ShareDialog$FeedHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog$FeedHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.ShareDialog$FeedHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.ShareDialog$WebShareHandler: java.lang.Object getMode()>
<com.facebook.share.widget.ShareDialog$WebShareHandler: boolean canShow(com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.widget.ShareDialog$WebShareHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog$WebShareHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.ShareDialog$WebShareHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.ShareDialog$NativeHandler: java.lang.Object getMode()>
<com.facebook.share.widget.ShareDialog$NativeHandler: boolean canShow(com.facebook.share.model.ShareContent,boolean)>
<com.facebook.share.widget.ShareDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(com.facebook.share.model.ShareContent)>
<com.facebook.share.widget.ShareDialog$NativeHandler: com.facebook.internal.AppCall createAppCall(java.lang.Object)>
<com.facebook.share.widget.ShareDialog$NativeHandler: boolean canShow(java.lang.Object,boolean)>
<com.facebook.share.widget.ShareDialog$NativeHandler$1: android.os.Bundle getParameters()>
<com.facebook.share.widget.ShareDialog$NativeHandler$1: android.os.Bundle getLegacyParameters()>
<com.facebook.TestUserManager$Mode: com.facebook.TestUserManager$Mode[] values()>
<com.facebook.TestUserManager$Mode: com.facebook.TestUserManager$Mode valueOf(java.lang.String)>
<com.facebook.TestUserManager: void <init>(java.lang.String,java.lang.String)>
<com.facebook.TestUserManager: com.facebook.AccessToken getAccessTokenForPrivateUser(java.util.List)>
<com.facebook.TestUserManager: com.facebook.AccessToken getAccessTokenForSharedUser(java.util.List)>
<com.facebook.TestUserManager: com.facebook.AccessToken getAccessTokenForSharedUser(java.util.List,java.lang.String)>
<com.facebook.TestUserManager: java.lang.String getTestApplicationId()>
<com.facebook.TestUserManager: java.lang.String getTestApplicationSecret()>
